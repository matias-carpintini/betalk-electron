/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/sortablejs/modular/sortable.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/sortablejs/modular/sortable.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiDrag: () => (/* binding */ MultiDragPlugin),
/* harmony export */   Sortable: () => (/* binding */ Sortable),
/* harmony export */   Swap: () => (/* binding */ SwapPlugin),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**!
 * Sortable 1.15.3
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }
  return _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var version = "1.15.3";
function userAgent(pattern) {
  if (typeof window !== 'undefined' && window.navigator) {
    return !! /*@__PURE__*/navigator.userAgent.match(pattern);
  }
}
var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
var captureMode = {
  capture: false,
  passive: false
};
function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}
function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}
function matches( /**HTMLElement*/el, /**String*/selector) {
  if (!selector) return;
  selector[0] === '>' && (selector = selector.substring(1));
  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_) {
      return false;
    }
  }
  return false;
}
function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}
function closest( /**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;
    do {
      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }
      if (el === ctx) break;
      /* jshint boss:true */
    } while (el = getParentOrHost(el));
  }
  return null;
}
var R_SPACE = /\s+/g;
function toggleClass(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? 'add' : 'remove'](name);
    } else {
      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
    }
  }
}
function css(el, prop, val) {
  var style = el && el.style;
  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }
      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }
      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}
function matrix(el, selfOnly) {
  var appliedTransforms = '';
  if (typeof el === 'string') {
    appliedTransforms = el;
  } else {
    do {
      var transform = css(el, 'transform');
      if (transform && transform !== 'none') {
        appliedTransforms = transform + ' ' + appliedTransforms;
      }
      /* jshint boss:true */
    } while (!selfOnly && (el = el.parentNode));
  }
  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  /*jshint -W056 */
  return matrixFn && new matrixFn(appliedTransforms);
}
function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName),
      i = 0,
      n = list.length;
    if (iterator) {
      for (; i < n; i++) {
        iterator(list[i], i);
      }
    }
    return list;
  }
  return [];
}
function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;
  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}

/**
 * Returns the "bounding client rect" of given element
 * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
 * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
 * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
 * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
 * @param  {[HTMLElement]} container              The parent the element will be placed in
 * @return {Object}                               The boundingClientRect of el, with specified adjustments
 */
function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window) return;
  var elRect, top, left, bottom, right, height, width;
  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }
  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    // Adjust for translate()
    container = container || el.parentNode;

    // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
    // Not needed on <= IE11
    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
          var containerRect = container.getBoundingClientRect();

          // Set relative to edges of padding box of container
          top -= containerRect.top + parseInt(css(container, 'border-top-width'));
          left -= containerRect.left + parseInt(css(container, 'border-left-width'));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
        /* jshint boss:true */
      } while (container = container.parentNode);
    }
  }
  if (undoScale && el !== window) {
    // Adjust for scale()
    var elMatrix = matrix(container || el),
      scaleX = elMatrix && elMatrix.a,
      scaleY = elMatrix && elMatrix.d;
    if (elMatrix) {
      top /= scaleY;
      left /= scaleX;
      width /= scaleX;
      height /= scaleY;
      bottom = top + height;
      right = left + width;
    }
  }
  return {
    top: top,
    left: left,
    bottom: bottom,
    right: right,
    width: width,
    height: height
  };
}

/**
 * Checks if a side of an element is scrolled past a side of its parents
 * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
 * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
 * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
 * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
 */
function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true),
    elSideVal = getRect(el)[elSide];

  /* jshint boss:true */
  while (parent) {
    var parentSideVal = getRect(parent)[parentSide],
      visible = void 0;
    if (parentSide === 'top' || parentSide === 'left') {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }
    if (!visible) return parent;
    if (parent === getWindowScrollingElement()) break;
    parent = getParentAutoScrollElement(parent, false);
  }
  return false;
}

/**
 * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
 * and non-draggable elements
 * @param  {HTMLElement} el       The parent element
 * @param  {Number} childNum      The index of the child
 * @param  {Object} options       Parent Sortable's options
 * @return {HTMLElement}          The child at index childNum, or null if not found
 */
function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0,
    i = 0,
    children = el.children;
  while (i < children.length) {
    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i];
      }
      currentChild++;
    }
    i++;
  }
  return null;
}

/**
 * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
 * @param  {HTMLElement} el       Parent element
 * @param  {selector} selector    Any other elements that should be ignored
 * @return {HTMLElement}          The last child, ignoring ghostEl
 */
function lastChild(el, selector) {
  var last = el.lastElementChild;
  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }
  return last || null;
}

/**
 * Returns the index of an element within its parent for a selected set of
 * elements
 * @param  {HTMLElement} el
 * @param  {selector} selector
 * @return {number}
 */
function index(el, selector) {
  var index = 0;
  if (!el || !el.parentNode) {
    return -1;
  }

  /* jshint boss:true */
  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index++;
    }
  }
  return index;
}

/**
 * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
 * The value is returned in real pixels.
 * @param  {HTMLElement} el
 * @return {Array}             Offsets in the format of [left, top]
 */
function getRelativeScrollOffset(el) {
  var offsetLeft = 0,
    offsetTop = 0,
    winScroller = getWindowScrollingElement();
  if (el) {
    do {
      var elMatrix = matrix(el),
        scaleX = elMatrix.a,
        scaleY = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX;
      offsetTop += el.scrollTop * scaleY;
    } while (el !== winScroller && (el = el.parentNode));
  }
  return [offsetLeft, offsetTop];
}

/**
 * Returns the index of the object within the given array
 * @param  {Array} arr   Array that may or may not hold the object
 * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
 * @return {Number}      The index of the object in the array, or -1
 */
function indexOfObject(arr, obj) {
  for (var i in arr) {
    if (!arr.hasOwnProperty(i)) continue;
    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
    }
  }
  return -1;
}
function getParentAutoScrollElement(el, includeSelf) {
  // skip to window
  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;
  do {
    // we don't need to get elem css if it isn't even overflowing in the first place (performance)
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);
      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
        if (gotSelf || includeSelf) return elem;
        gotSelf = true;
      }
    }
    /* jshint boss:true */
  } while (elem = elem.parentNode);
  return getWindowScrollingElement();
}
function extend(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }
  return dst;
}
function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}
var _throttleTimeout;
function throttle(callback, ms) {
  return function () {
    if (!_throttleTimeout) {
      var args = arguments,
        _this = this;
      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }
      _throttleTimeout = setTimeout(function () {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}
function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}
function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}
function clone(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;
  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}
function setRect(el, rect) {
  css(el, 'position', 'absolute');
  css(el, 'top', rect.top);
  css(el, 'left', rect.left);
  css(el, 'width', rect.width);
  css(el, 'height', rect.height);
}
function unsetRect(el) {
  css(el, 'position', '');
  css(el, 'top', '');
  css(el, 'left', '');
  css(el, 'width', '');
  css(el, 'height', '');
}
function getChildContainingRectFromElement(container, options, ghostEl) {
  var rect = {};
  Array.from(container.children).forEach(function (child) {
    var _rect$left, _rect$top, _rect$right, _rect$bottom;
    if (!closest(child, options.draggable, container, false) || child.animated || child === ghostEl) return;
    var childRect = getRect(child);
    rect.left = Math.min((_rect$left = rect.left) !== null && _rect$left !== void 0 ? _rect$left : Infinity, childRect.left);
    rect.top = Math.min((_rect$top = rect.top) !== null && _rect$top !== void 0 ? _rect$top : Infinity, childRect.top);
    rect.right = Math.max((_rect$right = rect.right) !== null && _rect$right !== void 0 ? _rect$right : -Infinity, childRect.right);
    rect.bottom = Math.max((_rect$bottom = rect.bottom) !== null && _rect$bottom !== void 0 ? _rect$bottom : -Infinity, childRect.bottom);
  });
  rect.width = rect.right - rect.left;
  rect.height = rect.bottom - rect.top;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
var expando = 'Sortable' + new Date().getTime();
function AnimationStateManager() {
  var animationStates = [],
    animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation) return;
      var children = [].slice.call(this.el.children);
      children.forEach(function (child) {
        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });
        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect);

        // If animating: compensate for current animation
        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);
          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }
        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target: target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;
      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === 'function') callback();
        return;
      }
      var animating = false,
        animationTime = 0;
      animationStates.forEach(function (state) {
        var time = 0,
          target = state.target,
          fromRect = target.fromRect,
          toRect = getRect(target),
          prevFromRect = target.prevFromRect,
          prevToRect = target.prevToRect,
          animatingRect = state.rect,
          targetMatrix = matrix(target, true);
        if (targetMatrix) {
          // Compensate for current animation
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }
        target.toRect = toRect;
        if (target.thisAnimationDuration) {
          // Could also check if animatingRect is between fromRect and toRect
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) &&
          // Make sure animatingRect is on line between toRect & fromRect
          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            // If returning to same place as started from animation and on same axis
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        }

        // if fromRect != toRect: animate
        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;
          if (!time) {
            time = _this.options.animation;
          }
          _this.animate(target, animatingRect, toRect, time);
        }
        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function () {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);
      if (!animating) {
        if (typeof callback === 'function') callback();
      } else {
        animationCallbackId = setTimeout(function () {
          if (typeof callback === 'function') callback();
        }, animationTime);
      }
      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, 'transition', '');
        css(target, 'transform', '');
        var elMatrix = matrix(this.el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d,
          translateX = (currentRect.left - toRect.left) / (scaleX || 1),
          translateY = (currentRect.top - toRect.top) / (scaleY || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
        this.forRepaintDummy = repaint(target); // repaint

        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
        css(target, 'transform', 'translate3d(0,0,0)');
        typeof target.animated === 'number' && clearTimeout(target.animated);
        target.animated = setTimeout(function () {
          css(target, 'transition', '');
          css(target, 'transform', '');
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}
function repaint(target) {
  return target.offsetWidth;
}
function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}
var plugins = [];
var defaults = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    // Set default static properties
    for (var option in defaults) {
      if (defaults.hasOwnProperty(option) && !(option in plugin)) {
        plugin[option] = defaults[option];
      }
    }
    plugins.forEach(function (p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent(eventName, sortable, evt) {
    var _this = this;
    this.eventCanceled = false;
    evt.cancel = function () {
      _this.eventCanceled = true;
    };
    var eventNameGlobal = eventName + 'Global';
    plugins.forEach(function (plugin) {
      if (!sortable[plugin.pluginName]) return;
      // Fire global events if it exists in this sortable
      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
          sortable: sortable
        }, evt));
      }

      // Only fire plugin event if plugin is enabled in this sortable,
      // and plugin has event defined
      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2({
          sortable: sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults, options) {
    plugins.forEach(function (plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized;

      // Add default options from plugin
      _extends(defaults, initialized.defaults);
    });
    for (var option in sortable.options) {
      if (!sortable.options.hasOwnProperty(option)) continue;
      var modified = this.modifyOption(sortable, option, sortable.options[option]);
      if (typeof modified !== 'undefined') {
        sortable.options[option] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function (plugin) {
      if (typeof plugin.eventProperties !== 'function') return;
      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function (plugin) {
      // Plugin must exist on the Sortable
      if (!sortable[plugin.pluginName]) return;

      // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin
      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};
function dispatchEvent(_ref) {
  var sortable = _ref.sortable,
    rootEl = _ref.rootEl,
    name = _ref.name,
    targetEl = _ref.targetEl,
    cloneEl = _ref.cloneEl,
    toEl = _ref.toEl,
    fromEl = _ref.fromEl,
    oldIndex = _ref.oldIndex,
    newIndex = _ref.newIndex,
    oldDraggableIndex = _ref.oldDraggableIndex,
    newDraggableIndex = _ref.newDraggableIndex,
    originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl && rootEl[expando];
  if (!sortable) return;
  var evt,
    options = sortable.options,
    onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);
  // Support for new CustomEvent feature
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
  }
  evt.to = toEl || rootEl;
  evt.from = fromEl || rootEl;
  evt.item = targetEl || rootEl;
  evt.clone = cloneEl;
  evt.oldIndex = oldIndex;
  evt.newIndex = newIndex;
  evt.oldDraggableIndex = oldDraggableIndex;
  evt.newDraggableIndex = newDraggableIndex;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;
  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
  for (var option in allEventProperties) {
    evt[option] = allEventProperties[option];
  }
  if (rootEl) {
    rootEl.dispatchEvent(evt);
  }
  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}
var _excluded = ["evt"];
var pluginEvent = function pluginEvent(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    originalEvent = _ref.evt,
    data = _objectWithoutProperties(_ref, _excluded);
  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
    dragEl: dragEl,
    parentEl: parentEl,
    ghostEl: ghostEl,
    rootEl: rootEl,
    nextEl: nextEl,
    lastDownEl: lastDownEl,
    cloneEl: cloneEl,
    cloneHidden: cloneHidden,
    dragStarted: moved,
    putSortable: putSortable,
    activeSortable: Sortable.active,
    originalEvent: originalEvent,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable: sortable,
        name: name,
        originalEvent: originalEvent
      });
    }
  }, data));
};
function _dispatchEvent(info) {
  dispatchEvent(_objectSpread2({
    putSortable: putSortable,
    cloneEl: cloneEl,
    targetEl: dragEl,
    rootEl: rootEl,
    oldIndex: oldIndex,
    oldDraggableIndex: oldDraggableIndex,
    newIndex: newIndex,
    newDraggableIndex: newDraggableIndex
  }, info));
}
var dragEl,
  parentEl,
  ghostEl,
  rootEl,
  nextEl,
  lastDownEl,
  cloneEl,
  cloneHidden,
  oldIndex,
  newIndex,
  oldDraggableIndex,
  newDraggableIndex,
  activeGroup,
  putSortable,
  awaitingDragStarted = false,
  ignoreNextClick = false,
  sortables = [],
  tapEvt,
  touchEvt,
  lastDx,
  lastDy,
  tapDistanceLeft,
  tapDistanceTop,
  moved,
  lastTarget,
  lastDirection,
  pastFirstInvertThresh = false,
  isCircumstantialInvert = false,
  targetMoveDistance,
  // For positioning ghost absolutely
  ghostRelativeParent,
  ghostRelativeParentInitialScroll = [],
  // (left, top)

  _silent = false,
  savedInputChecked = [];

/** @const */
var documentExists = typeof document !== 'undefined',
  PositionGhostAbsolutely = IOS,
  CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
  // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
  supportCssPointerEvents = function () {
    if (!documentExists) return;
    // false when <= IE11
    if (IE11OrLess) {
      return false;
    }
    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
  _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
      child1 = getChild(el, 0, options),
      child2 = getChild(el, 1, options),
      firstChildCSS = child1 && css(child1),
      secondChildCSS = child2 && css(child2),
      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }
    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }
    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }
    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
  _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
      dragElOppLength = vertical ? dragRect.width : dragRect.height,
      targetS1Opp = vertical ? targetRect.left : targetRect.top,
      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
      targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },
  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      var threshold = sortable[expando].options.emptyInsertThreshold;
      if (!threshold || lastChild(sortable)) return;
      var rect = getRect(sortable),
        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
      if (insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
  _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;
        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }
    var group = {};
    var originalGroup = options.group;
    if (!originalGroup || _typeof(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }
    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
  _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
  _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  };

// #1184 fix - Prevent click event on fallback if dragged but item not changed position
if (documentExists && !ChromeForAndroid) {
  document.addEventListener('click', function (evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}
var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;
    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
    if (nearest) {
      // Create imitation event
      var event = {};
      for (var i in evt) {
        if (evt.hasOwnProperty(i)) {
          event[i] = evt[i];
        }
      }
      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;
      nearest[expando]._onDragOver(event);
    }
  }
};
var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};

/**
 * @class  Sortable
 * @param  {HTMLElement}  el
 * @param  {Object}       [options]
 */
function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }
  this.el = el; // root element
  this.options = options = _extends({}, options);

  // Export instance
  el[expando] = this;
  var defaults = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
    swapThreshold: 1,
    // percentage; 0 <= x <= 1
    invertSwap: false,
    // invert always
    invertedSwapThreshold: null,
    // will be set to same as swapThreshold if default
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: 'sortable-ghost',
    chosenClass: 'sortable-chosen',
    dragClass: 'sortable-drag',
    ignore: 'a, img',
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData(dataTransfer, dragEl) {
      dataTransfer.setData('Text', dragEl.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: 'data-id',
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: 'sortable-fallback',
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults);

  // Set default options
  for (var name in defaults) {
    !(name in options) && (options[name] = defaults[name]);
  }
  _prepareGroup(options);

  // Bind all private methods
  for (var fn in this) {
    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
      this[fn] = this[fn].bind(this);
    }
  }

  // Setup drag mode
  this.nativeDraggable = options.forceFallback ? false : supportDraggable;
  if (this.nativeDraggable) {
    // Touch start threshold cannot be greater than the native dragstart threshold
    this.options.touchStartThreshold = 1;
  }

  // Bind events
  if (options.supportPointer) {
    on(el, 'pointerdown', this._onTapStart);
  } else {
    on(el, 'mousedown', this._onTapStart);
    on(el, 'touchstart', this._onTapStart);
  }
  if (this.nativeDraggable) {
    on(el, 'dragover', this);
    on(el, 'dragenter', this);
  }
  sortables.push(this.el);

  // Restore sorting
  options.store && options.store.get && this.sort(options.store.get(this) || []);

  // Add animation state manager
  _extends(this, AnimationStateManager());
}
Sortable.prototype = /** @lends Sortable.prototype */{
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart( /** Event|TouchEvent */evt) {
    if (!evt.cancelable) return;
    var _this = this,
      el = this.el,
      options = this.options,
      preventOnFilter = options.preventOnFilter,
      type = evt.type,
      touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
      target = (touch || evt).target,
      originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
      filter = options.filter;
    _saveInputCheckedState(el);

    // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.
    if (dragEl) {
      return;
    }
    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return; // only left button and enabled
    }

    // cancel dnd if original target is content editable
    if (originalTarget.isContentEditable) {
      return;
    }

    // Safari ignores further event handling after mousedown
    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
      return;
    }
    target = closest(target, options.draggable, el, false);
    if (target && target.animated) {
      return;
    }
    if (lastDownEl === target) {
      // Ignoring duplicate `down`
      return;
    }

    // Get the index of the dragged element within its parent
    oldIndex = index(target);
    oldDraggableIndex = index(target, options.draggable);

    // Check filter
    if (typeof filter === 'function') {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: 'filter',
          targetEl: target,
          toEl: el,
          fromEl: el
        });
        pluginEvent('filter', _this, {
          evt: evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    } else if (filter) {
      filter = filter.split(',').some(function (criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);
        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: 'filter',
            targetEl: target,
            fromEl: el,
            toEl: el
          });
          pluginEvent('filter', _this, {
            evt: evt
          });
          return true;
        }
      });
      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return; // cancel dnd
      }
    }
    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    }

    // Prepare `dragstart`
    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart( /** Event */evt, /** Touch */touch, /** HTMLElement */target) {
    var _this = this,
      el = _this.el,
      options = _this.options,
      ownerDocument = el.ownerDocument,
      dragStartFn;
    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style['will-change'] = 'all';
      dragStartFn = function dragStartFn() {
        pluginEvent('delayEnded', _this, {
          evt: evt
        });
        if (Sortable.eventCanceled) {
          _this._onDrop();
          return;
        }
        // Delayed drag has been triggered
        // we can re-enable the events: touchmove/mousemove
        _this._disableDelayedDragEvents();
        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        }

        // Bind the events: dragstart/dragend
        _this._triggerDragStart(evt, touch);

        // Drag start event
        _dispatchEvent({
          sortable: _this,
          name: 'choose',
          originalEvent: evt
        });

        // Chosen item
        toggleClass(dragEl, options.chosenClass, true);
      };

      // Disable "draggable"
      options.ignore.split(',').forEach(function (criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
      on(ownerDocument, 'mouseup', _this._onDrop);
      on(ownerDocument, 'touchend', _this._onDrop);
      on(ownerDocument, 'touchcancel', _this._onDrop);

      // Make dragEl draggable (must be before delay for FireFox)
      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }
      pluginEvent('delayStart', this, {
        evt: evt
      });

      // Delay is impossible for native DnD in Edge or IE
      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();
          return;
        }
        // If the user moves the pointer or let go the click or touch
        // before the delay has been reached:
        // disable the delayed drag
        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
        on(ownerDocument, 'touchend', _this._disableDelayedDrag);
        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler( /** TouchEvent|PointerEvent **/e) {
    var touch = e.touches ? e.touches[0] : e;
    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);
    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._disableDelayedDrag);
    off(ownerDocument, 'touchend', this._disableDelayedDrag);
    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart( /** Event */evt, /** Touch */touch) {
    touch = touch || evt.pointerType == 'touch' && evt;
    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, 'pointermove', this._onTouchMove);
      } else if (touch) {
        on(document, 'touchmove', this._onTouchMove);
      } else {
        on(document, 'mousemove', this._onTouchMove);
      }
    } else {
      on(dragEl, 'dragend', this);
      on(rootEl, 'dragstart', this._onDragStart);
    }
    try {
      if (document.selection) {
        // Timeout neccessary for IE9
        _nextTick(function () {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {}
  },
  _dragStarted: function _dragStarted(fallback, evt) {
    awaitingDragStarted = false;
    if (rootEl && dragEl) {
      pluginEvent('dragStarted', this, {
        evt: evt
      });
      if (this.nativeDraggable) {
        on(document, 'dragover', _checkOutsideTargetEl);
      }
      var options = this.options;

      // Apply effect
      !fallback && toggleClass(dragEl, options.dragClass, false);
      toggleClass(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost();

      // Drag start event
      _dispatchEvent({
        sortable: this,
        name: 'start',
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;
      _hideGhostForTarget();
      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;
      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent) break;
        parent = target;
      }
      dragEl.parentNode[expando]._isOutsideThisEl(target);
      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target: target,
              rootEl: parent
            });
            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }
          target = parent; // store last element
        }
        /* jshint boss:true */ while (parent = getParentOrHost(parent));
      }
      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove( /**TouchEvent*/evt) {
    if (tapEvt) {
      var options = this.options,
        fallbackTolerance = options.fallbackTolerance,
        fallbackOffset = options.fallbackOffset,
        touch = evt.touches ? evt.touches[0] : evt,
        ghostMatrix = ghostEl && matrix(ghostEl, true),
        scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
        scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
        relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
        dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
        dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1);

      // only set the status to dragging, when we are actually dragging
      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }
        this._onDragStart(evt, true);
      }
      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }
        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, 'webkitTransform', cssMatrix);
        css(ghostEl, 'mozTransform', cssMatrix);
        css(ghostEl, 'msTransform', cssMatrix);
        css(ghostEl, 'transform', cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }
      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    // Bug if using scale(): https://stackoverflow.com/questions/2637058
    // Not being adjusted for
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl,
        rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
        options = this.options;

      // Position absolutely
      if (PositionGhostAbsolutely) {
        // Get relatively positioned parent
        ghostRelativeParent = container;
        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }
        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }
        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }
      ghostEl = dragEl.cloneNode(true);
      toggleClass(ghostEl, options.ghostClass, false);
      toggleClass(ghostEl, options.fallbackClass, true);
      toggleClass(ghostEl, options.dragClass, true);
      css(ghostEl, 'transition', '');
      css(ghostEl, 'transform', '');
      css(ghostEl, 'box-sizing', 'border-box');
      css(ghostEl, 'margin', 0);
      css(ghostEl, 'top', rect.top);
      css(ghostEl, 'left', rect.left);
      css(ghostEl, 'width', rect.width);
      css(ghostEl, 'height', rect.height);
      css(ghostEl, 'opacity', '0.8');
      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
      css(ghostEl, 'zIndex', '100000');
      css(ghostEl, 'pointerEvents', 'none');
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl);

      // Set transform-origin
      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
    }
  },
  _onDragStart: function _onDragStart( /**Event*/evt, /**boolean*/fallback) {
    var _this = this;
    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent('dragStart', this, {
      evt: evt
    });
    if (Sortable.eventCanceled) {
      this._onDrop();
      return;
    }
    pluginEvent('setupClone', this);
    if (!Sortable.eventCanceled) {
      cloneEl = clone(dragEl);
      cloneEl.removeAttribute("id");
      cloneEl.draggable = false;
      cloneEl.style['will-change'] = '';
      this._hideClone();
      toggleClass(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    }

    // #1143: IFrame support workaround
    _this.cloneId = _nextTick(function () {
      pluginEvent('clone', _this);
      if (Sortable.eventCanceled) return;
      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }
      _this._hideClone();
      _dispatchEvent({
        sortable: _this,
        name: 'clone'
      });
    });
    !fallback && toggleClass(dragEl, options.dragClass, true);

    // Set proper drop events
    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      // Undo what was set in _prepareDragStart before drag started
      off(document, 'mouseup', _this._onDrop);
      off(document, 'touchend', _this._onDrop);
      off(document, 'touchcancel', _this._onDrop);
      if (dataTransfer) {
        dataTransfer.effectAllowed = 'move';
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }
      on(document, 'drop', _this);

      // #1276 fix:
      css(dragEl, 'transform', 'translateZ(0)');
    }
    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, 'selectstart', _this);
    moved = true;
    if (Safari) {
      css(document.body, 'user-select', 'none');
    }
  },
  // Returns true - if no further action is needed (either inserted or another condition)
  _onDragOver: function _onDragOver( /**Event*/evt) {
    var el = this.el,
      target = evt.target,
      dragRect,
      targetRect,
      revert,
      options = this.options,
      group = options.group,
      activeSortable = Sortable.active,
      isOwner = activeGroup === group,
      canSort = options.sort,
      fromSortable = putSortable || activeSortable,
      vertical,
      _this = this,
      completedFired = false;
    if (_silent) return;
    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread2({
        evt: evt,
        isOwner: isOwner,
        axis: vertical ? 'vertical' : 'horizontal',
        revert: revert,
        dragRect: dragRect,
        targetRect: targetRect,
        canSort: canSort,
        fromSortable: fromSortable,
        target: target,
        completed: completed,
        onMove: function onMove(target, after) {
          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
        },
        changed: changed
      }, extra));
    }

    // Capture animation state
    function capture() {
      dragOverEvent('dragOverAnimationCapture');
      _this.captureAnimationState();
      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    }

    // Return invocation when dragEl is inserted (or completed)
    function completed(insertion) {
      dragOverEvent('dragOverCompleted', {
        insertion: insertion
      });
      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }
        if (_this !== fromSortable) {
          // Set ghost class to new sortable's ghost class
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass(dragEl, options.ghostClass, true);
        }
        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        }

        // Animation
        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }
        _this.animateAll(function () {
          dragOverEvent('dragOverAnimationComplete');
          _this._ignoreWhileAnimating = null;
        });
        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      }

      // Null lastTarget if it is not inside a previously swapped element
      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      }

      // no bubbling and not fallback
      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target);

        // Do not detect for empty insert if already inserted
        !insertion && nearestEmptyInsertDetectEvent(evt);
      }
      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    }

    // Call when dragEl has been inserted
    function changed() {
      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      _dispatchEvent({
        sortable: _this,
        name: 'change',
        toEl: el,
        newIndex: newIndex,
        newDraggableIndex: newDraggableIndex,
        originalEvent: evt
      });
    }
    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }
    target = closest(target, options.draggable, el, true);
    dragOverEvent('dragOver');
    if (Sortable.eventCanceled) return completedFired;
    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }
    ignoreNextClick = false;
    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === 'vertical';
      dragRect = getRect(dragEl);
      dragOverEvent('dragOverValid');
      if (Sortable.eventCanceled) return completedFired;
      if (revert) {
        parentEl = rootEl; // actualization
        capture();
        this._hideClone();
        dragOverEvent('revert');
        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }
        return completed(true);
      }
      var elLastChild = lastChild(el, options.draggable);
      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        // Insert to end of list

        // If already at end of list: Do not insert
        if (elLastChild === dragEl) {
          return completed(false);
        }

        // if there is a last element, it is the target
        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }
        if (target) {
          targetRect = getRect(target);
        }
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          if (elLastChild && elLastChild.nextSibling) {
            // the last draggable element is not the last node
            el.insertBefore(dragEl, elLastChild.nextSibling);
          } else {
            el.appendChild(dragEl);
          }
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        // Insert to start of list
        var firstChild = getChild(el, 0, options, true);
        if (firstChild === dragEl) {
          return completed(false);
        }
        target = firstChild;
        targetRect = getRect(target);
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el; // actualization

          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0,
          targetBeforeFirstSwap,
          differentLevel = dragEl.parentNode !== el,
          differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
          side1 = vertical ? 'top' : 'left',
          scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
          scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }
        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;
        if (direction !== 0) {
          // Check if target is beside dragEl in respective direction (ignoring hidden elements)
          var dragIndex = index(dragEl);
          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
        }
        // If dragEl is already beside target: Do not insert
        if (direction === 0 || sibling === target) {
          return completed(false);
        }
        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling,
          after = false;
        after = direction === 1;
        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }
          _silent = true;
          setTimeout(_unsilent, 30);
          capture();
          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          }

          // Undo chrome's scroll adjustment (has no effect on other browsers)
          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }
          parentEl = dragEl.parentNode; // actualization

          // must be done before animation
          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }
          changed();
          return completed(true);
        }
      }
      if (el.contains(dragEl)) {
        return completed(false);
      }
    }
    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, 'mousemove', this._onTouchMove);
    off(document, 'touchmove', this._onTouchMove);
    off(document, 'pointermove', this._onTouchMove);
    off(document, 'dragover', nearestEmptyInsertDetectEvent);
    off(document, 'mousemove', nearestEmptyInsertDetectEvent);
    off(document, 'touchmove', nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, 'mouseup', this._onDrop);
    off(ownerDocument, 'touchend', this._onDrop);
    off(ownerDocument, 'pointerup', this._onDrop);
    off(ownerDocument, 'touchcancel', this._onDrop);
    off(document, 'selectstart', this);
  },
  _onDrop: function _onDrop( /**Event*/evt) {
    var el = this.el,
      options = this.options;

    // Get the index of the dragged element within its parent
    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    pluginEvent('drop', this, {
      evt: evt
    });
    parentEl = dragEl && dragEl.parentNode;

    // Get again after plugin event
    newIndex = index(dragEl);
    newDraggableIndex = index(dragEl, options.draggable);
    if (Sortable.eventCanceled) {
      this._nulling();
      return;
    }
    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);
    _cancelNextTick(this.cloneId);
    _cancelNextTick(this._dragStartId);

    // Unbind events
    if (this.nativeDraggable) {
      off(document, 'drop', this);
      off(el, 'dragstart', this._onDragStart);
    }
    this._offMoveEvents();
    this._offUpEvents();
    if (Safari) {
      css(document.body, 'user-select', '');
    }
    css(dragEl, 'transform', '');
    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }
      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        // Remove clone(s)
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }
      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, 'dragend', this);
        }
        _disableDraggable(dragEl);
        dragEl.style['will-change'] = '';

        // Remove classes
        // ghostClass is added in dragStarted
        if (moved && !awaitingDragStarted) {
          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }
        toggleClass(dragEl, this.options.chosenClass, false);

        // Drag stop event
        _dispatchEvent({
          sortable: this,
          name: 'unchoose',
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });
        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            // Add event
            _dispatchEvent({
              rootEl: parentEl,
              name: 'add',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });

            // Remove event
            _dispatchEvent({
              sortable: this,
              name: 'remove',
              toEl: parentEl,
              originalEvent: evt
            });

            // drag from one list and drop into another
            _dispatchEvent({
              rootEl: parentEl,
              name: 'sort',
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });
            _dispatchEvent({
              sortable: this,
              name: 'sort',
              toEl: parentEl,
              originalEvent: evt
            });
          }
          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              // drag & drop within the same list
              _dispatchEvent({
                sortable: this,
                name: 'update',
                toEl: parentEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }
        if (Sortable.active) {
          /* jshint eqnull:true */
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }
          _dispatchEvent({
            sortable: this,
            name: 'end',
            toEl: parentEl,
            originalEvent: evt
          });

          // Save sorting
          this.save();
        }
      }
    }
    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent('nulling', this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function (el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent( /**Event*/evt) {
    switch (evt.type) {
      case 'drop':
      case 'dragend':
        this._onDrop(evt);
        break;
      case 'dragenter':
      case 'dragover':
        if (dragEl) {
          this._onDragOver(evt);
          _globalDragOver(evt);
        }
        break;
      case 'selectstart':
        evt.preventDefault();
        break;
    }
  },
  /**
   * Serializes the item into an array of string.
   * @returns {String[]}
   */
  toArray: function toArray() {
    var order = [],
      el,
      children = this.el.children,
      i = 0,
      n = children.length,
      options = this.options;
    for (; i < n; i++) {
      el = children[i];
      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }
    return order;
  },
  /**
   * Sorts the elements according to the array.
   * @param  {String[]}  order  order of the items
   */
  sort: function sort(order, useAnimation) {
    var items = {},
      rootEl = this.el;
    this.toArray().forEach(function (id, i) {
      var el = rootEl.children[i];
      if (closest(el, this.options.draggable, rootEl, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order.forEach(function (id) {
      if (items[id]) {
        rootEl.removeChild(items[id]);
        rootEl.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },
  /**
   * Save the current sorting
   */
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },
  /**
   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
   * @param   {HTMLElement}  el
   * @param   {String}       [selector]  default: `options.draggable`
   * @returns {HTMLElement|null}
   */
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },
  /**
   * Set/get option
   * @param   {string} name
   * @param   {*}      [value]
   * @returns {*}
   */
  option: function option(name, value) {
    var options = this.options;
    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);
      if (typeof modifiedValue !== 'undefined') {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }
      if (name === 'group') {
        _prepareGroup(options);
      }
    }
  },
  /**
   * Destroy
   */
  destroy: function destroy() {
    pluginEvent('destroy', this);
    var el = this.el;
    el[expando] = null;
    off(el, 'mousedown', this._onTapStart);
    off(el, 'touchstart', this._onTapStart);
    off(el, 'pointerdown', this._onTapStart);
    if (this.nativeDraggable) {
      off(el, 'dragover', this);
      off(el, 'dragenter', this);
    }
    // Remove draggable attributes
    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
      el.removeAttribute('draggable');
    });
    this._onDrop();
    this._disableDelayedDragEvents();
    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent('hideClone', this);
      if (Sortable.eventCanceled) return;
      css(cloneEl, 'display', 'none');
      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }
      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable) {
    if (putSortable.lastPutMode !== 'clone') {
      this._hideClone();
      return;
    }
    if (cloneHidden) {
      pluginEvent('showClone', this);
      if (Sortable.eventCanceled) return;

      // show clone at dragEl or original position
      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }
      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }
      css(cloneEl, 'display', '');
      cloneHidden = false;
    }
  }
};
function _globalDragOver( /**Event*/evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = 'move';
  }
  evt.cancelable && evt.preventDefault();
}
function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt,
    sortable = fromEl[expando],
    onMoveFn = sortable.options.onMove,
    retVal;
  // Support for new CustomEvent feature
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent('move', {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent('Event');
    evt.initEvent('move', true, true);
  }
  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);
  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }
  return retVal;
}
function _disableDraggable(el) {
  el.draggable = false;
}
function _unsilent() {
  _silent = false;
}
function _ghostIsFirst(evt, vertical, sortable) {
  var firstElRect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
  var spacer = 10;
  return vertical ? evt.clientX < childContainingRect.left - spacer || evt.clientY < firstElRect.top && evt.clientX < firstElRect.right : evt.clientY < childContainingRect.top - spacer || evt.clientY < firstElRect.bottom && evt.clientX < firstElRect.left;
}
function _ghostIsLast(evt, vertical, sortable) {
  var lastElRect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var childContainingRect = getChildContainingRectFromElement(sortable.el, sortable.options, ghostEl);
  var spacer = 10;
  return vertical ? evt.clientX > childContainingRect.right + spacer || evt.clientY > lastElRect.bottom && evt.clientX > lastElRect.left : evt.clientY > childContainingRect.bottom + spacer || evt.clientX > lastElRect.right && evt.clientY > lastElRect.top;
}
function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
    targetLength = vertical ? targetRect.height : targetRect.width,
    targetS1 = vertical ? targetRect.top : targetRect.left,
    targetS2 = vertical ? targetRect.bottom : targetRect.right,
    invert = false;
  if (!invertSwap) {
    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
      // check if past first invert threshold on side opposite of lastDirection
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        // past first invert threshold, do not restrict inverted threshold to dragEl shadow
        pastFirstInvertThresh = true;
      }
      if (!pastFirstInvertThresh) {
        // dragEl shadow (target move distance shadow)
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
        : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      // Regular
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }
  invert = invert || invertSwap;
  if (invert) {
    // Invert of regular
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }
  return 0;
}

/**
 * Gets the direction dragEl must be swapped relative to target in order to make it
 * seem that dragEl has been "inserted" into that element's position
 * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
 * @return {Number}                   Direction dragEl must be swapped
 */
function _getInsertDirection(target) {
  if (index(dragEl) < index(target)) {
    return 1;
  } else {
    return -1;
  }
}

/**
 * Generate id
 * @param   {HTMLElement} el
 * @returns {String}
 * @private
 */
function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent,
    i = str.length,
    sum = 0;
  while (i--) {
    sum += str.charCodeAt(i);
  }
  return sum.toString(36);
}
function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName('input');
  var idx = inputs.length;
  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}
function _nextTick(fn) {
  return setTimeout(fn, 0);
}
function _cancelNextTick(id) {
  return clearTimeout(id);
}

// Fixed #973:
if (documentExists) {
  on(document, 'touchmove', function (evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
}

// Export utils
Sortable.utils = {
  on: on,
  off: off,
  css: css,
  find: find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend,
  throttle: throttle,
  closest: closest,
  toggleClass: toggleClass,
  clone: clone,
  index: index,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild: getChild,
  expando: expando
};

/**
 * Get the Sortable instance of an element
 * @param  {HTMLElement} element The element
 * @return {Sortable|undefined}         The instance of Sortable
 */
Sortable.get = function (element) {
  return element[expando];
};

/**
 * Mount a plugin to Sortable
 * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
 */
Sortable.mount = function () {
  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins[_key] = arguments[_key];
  }
  if (plugins[0].constructor === Array) plugins = plugins[0];
  plugins.forEach(function (plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }
    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};

/**
 * Create sortable instance
 * @param {HTMLElement}  el
 * @param {Object}      [options]
 */
Sortable.create = function (el, options) {
  return new Sortable(el, options);
};

// Export
Sortable.version = version;
var autoScrolls = [],
  scrollEl,
  scrollRootEl,
  scrolling = false,
  lastAutoScrollX,
  lastAutoScrollY,
  touchEvt$1,
  pointerElemChangedInterval;
function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    };

    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
  }
  AutoScroll.prototype = {
    dragStarted: function dragStarted(_ref) {
      var originalEvent = _ref.originalEvent;
      if (this.sortable.nativeDraggable) {
        on(document, 'dragover', this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, 'touchmove', this._handleFallbackAutoScroll);
        } else {
          on(document, 'mousemove', this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;
      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop() {
      if (this.sortable.nativeDraggable) {
        off(document, 'dragover', this._handleAutoScroll);
      } else {
        off(document, 'pointermove', this._handleFallbackAutoScroll);
        off(document, 'touchmove', this._handleFallbackAutoScroll);
        off(document, 'mousemove', this._handleFallbackAutoScroll);
      }
      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;
      var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt;

      // IE does not seem to have native autoscroll,
      // Edge's autoscroll seems too conditional,
      // MACOS Safari does not have autoscroll,
      // Firefox and Chrome are good
      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback);

        // Listener for pointer element change
        var ogElemScroller = getParentAutoScrollElement(elem, true);
        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval();
          // Detect for pointer elem change, emulating native DnD behaviour
          pointerElemChangedInterval = setInterval(function () {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }
            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }
        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: 'scroll',
    initializeByDefault: true
  });
}
function clearAutoScrolls() {
  autoScrolls.forEach(function (autoScroll) {
    clearInterval(autoScroll.pid);
  });
  autoScrolls = [];
}
function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}
var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
  if (!options.scroll) return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX,
    y = (evt.touches ? evt.touches[0] : evt).clientY,
    sens = options.scrollSensitivity,
    speed = options.scrollSpeed,
    winScroller = getWindowScrollingElement();
  var scrollThisInstance = false,
    scrollCustomFn;

  // New scroll root, set scrollEl
  if (scrollRootEl !== rootEl) {
    scrollRootEl = rootEl;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;
    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl, true);
    }
  }
  var layersOut = 0;
  var currentParent = scrollEl;
  do {
    var el = currentParent,
      rect = getRect(el),
      top = rect.top,
      bottom = rect.bottom,
      left = rect.left,
      right = rect.right,
      width = rect.width,
      height = rect.height,
      canScrollX = void 0,
      canScrollY = void 0,
      scrollWidth = el.scrollWidth,
      scrollHeight = el.scrollHeight,
      elCSS = css(el),
      scrollPosX = el.scrollLeft,
      scrollPosY = el.scrollTop;
    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
    }
    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
    if (!autoScrolls[layersOut]) {
      for (var i = 0; i <= layersOut; i++) {
        if (!autoScrolls[i]) {
          autoScrolls[i] = {};
        }
      }
    }
    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);
      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        /* jshint loopfunc:true */
        autoScrolls[layersOut].pid = setInterval(function () {
          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely
          }
          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
          if (typeof scrollCustomFn === 'function') {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
              return;
            }
          }
          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }
    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
}, 30);
var drop = function drop(_ref) {
  var originalEvent = _ref.originalEvent,
    putSortable = _ref.putSortable,
    dragEl = _ref.dragEl,
    activeSortable = _ref.activeSortable,
    dispatchSortableEvent = _ref.dispatchSortableEvent,
    hideGhostForTarget = _ref.hideGhostForTarget,
    unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent) return;
  var toSortable = putSortable || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();
  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent('spill');
    this.onSpill({
      dragEl: dragEl,
      putSortable: putSortable
    });
  }
};
function Revert() {}
Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl = _ref3.dragEl,
      putSortable = _ref3.putSortable;
    this.sortable.captureAnimationState();
    if (putSortable) {
      putSortable.captureAnimationState();
    }
    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl);
    }
    this.sortable.animateAll();
    if (putSortable) {
      putSortable.animateAll();
    }
  },
  drop: drop
};
_extends(Revert, {
  pluginName: 'revertOnSpill'
});
function Remove() {}
Remove.prototype = {
  onSpill: function onSpill(_ref4) {
    var dragEl = _ref4.dragEl,
      putSortable = _ref4.putSortable;
    var parentSortable = putSortable || this.sortable;
    parentSortable.captureAnimationState();
    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
    parentSortable.animateAll();
  },
  drop: drop
};
_extends(Remove, {
  pluginName: 'removeOnSpill'
});
var lastSwapEl;
function SwapPlugin() {
  function Swap() {
    this.defaults = {
      swapClass: 'sortable-swap-highlight'
    };
  }
  Swap.prototype = {
    dragStart: function dragStart(_ref) {
      var dragEl = _ref.dragEl;
      lastSwapEl = dragEl;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed,
        target = _ref2.target,
        onMove = _ref2.onMove,
        activeSortable = _ref2.activeSortable,
        changed = _ref2.changed,
        cancel = _ref2.cancel;
      if (!activeSortable.options.swap) return;
      var el = this.sortable.el,
        options = this.options;
      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;
        if (onMove(target) !== false) {
          toggleClass(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }
        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass(prevSwapEl, options.swapClass, false);
        }
      }
      changed();
      completed(true);
      cancel();
    },
    drop: function drop(_ref3) {
      var activeSortable = _ref3.activeSortable,
        putSortable = _ref3.putSortable,
        dragEl = _ref3.dragEl;
      var toSortable = putSortable || this.sortable;
      var options = this.options;
      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);
      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {
        if (dragEl !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable) activeSortable.captureAnimationState();
          swapNodes(dragEl, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable) activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: 'swap',
    eventProperties: function eventProperties() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}
function swapNodes(n1, n2) {
  var p1 = n1.parentNode,
    p2 = n2.parentNode,
    i1,
    i2;
  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;
  i1 = index(n1);
  i2 = index(n2);
  if (p1.isEqualNode(p2) && i1 < i2) {
    i2++;
  }
  p1.insertBefore(n2, p1.children[i1]);
  p2.insertBefore(n1, p2.children[i2]);
}
var multiDragElements = [],
  multiDragClones = [],
  lastMultiDragSelect,
  // for selection with modifier key down (SHIFT)
  multiDragSortable,
  initialFolding = false,
  // Initial multi-drag fold when drag started
  folding = false,
  // Folding any other time
  dragStarted = false,
  dragEl$1,
  clonesFromRect,
  clonesHidden;
function MultiDragPlugin() {
  function MultiDrag(sortable) {
    // Bind all private methods
    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    }
    if (!sortable.options.avoidImplicitDeselect) {
      if (sortable.options.supportPointer) {
        on(document, 'pointerup', this._deselectMultiDrag);
      } else {
        on(document, 'mouseup', this._deselectMultiDrag);
        on(document, 'touchend', this._deselectMultiDrag);
      }
    }
    on(document, 'keydown', this._checkKeyDown);
    on(document, 'keyup', this._checkKeyUp);
    this.defaults = {
      selectedClass: 'sortable-selected',
      multiDragKey: null,
      avoidImplicitDeselect: false,
      setData: function setData(dataTransfer, dragEl) {
        var data = '';
        if (multiDragElements.length && multiDragSortable === sortable) {
          multiDragElements.forEach(function (multiDragElement, i) {
            data += (!i ? '' : ', ') + multiDragElement.textContent;
          });
        } else {
          data = dragEl.textContent;
        }
        dataTransfer.setData('Text', data);
      }
    };
  }
  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable,
        cancel = _ref2.cancel;
      if (!this.isMultiDrag) return;
      for (var i = 0; i < multiDragElements.length; i++) {
        multiDragClones.push(clone(multiDragElements[i]));
        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;
        multiDragClones[i].draggable = false;
        multiDragClones[i].style['will-change'] = '';
        toggleClass(multiDragClones[i], this.options.selectedClass, false);
        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);
      }
      sortable._hideClone();
      cancel();
    },
    clone: function clone(_ref3) {
      var sortable = _ref3.sortable,
        rootEl = _ref3.rootEl,
        dispatchSortableEvent = _ref3.dispatchSortableEvent,
        cancel = _ref3.cancel;
      if (!this.isMultiDrag) return;
      if (!this.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl);
          dispatchSortableEvent('clone');
          cancel();
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown,
        rootEl = _ref4.rootEl,
        cancel = _ref4.cancel;
      if (!this.isMultiDrag) return;
      insertMultiDragClones(false, rootEl);
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', '');
      });
      cloneNowShown();
      clonesHidden = false;
      cancel();
    },
    hideClone: function hideClone(_ref5) {
      var _this = this;
      var sortable = _ref5.sortable,
        cloneNowHidden = _ref5.cloneNowHidden,
        cancel = _ref5.cancel;
      if (!this.isMultiDrag) return;
      multiDragClones.forEach(function (clone) {
        css(clone, 'display', 'none');
        if (_this.options.removeCloneOnHide && clone.parentNode) {
          clone.parentNode.removeChild(clone);
        }
      });
      cloneNowHidden();
      clonesHidden = true;
      cancel();
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      var sortable = _ref6.sortable;
      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }
      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.sortableIndex = index(multiDragElement);
      });

      // Sort multi-drag elements
      multiDragElements = multiDragElements.sort(function (a, b) {
        return a.sortableIndex - b.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted(_ref7) {
      var _this2 = this;
      var sortable = _ref7.sortable;
      if (!this.isMultiDrag) return;
      if (this.options.sort) {
        // Capture rects,
        // hide multi drag elements (by positioning them absolute),
        // set multi drag elements rects to dragRect,
        // show multi drag elements,
        // animate to rects,
        // unset rects & remove from DOM

        sortable.captureAnimationState();
        if (this.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            css(multiDragElement, 'position', 'absolute');
          });
          var dragRect = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRect);
          });
          folding = true;
          initialFolding = true;
        }
      }
      sortable.animateAll(function () {
        folding = false;
        initialFolding = false;
        if (_this2.options.animation) {
          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
        }

        // Remove all auxiliary multidrag items from el, if sorting enabled
        if (_this2.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target,
        completed = _ref8.completed,
        cancel = _ref8.cancel;
      if (folding && ~multiDragElements.indexOf(target)) {
        completed(false);
        cancel();
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable,
        rootEl = _ref9.rootEl,
        sortable = _ref9.sortable,
        dragRect = _ref9.dragRect;
      if (multiDragElements.length > 1) {
        // Setup unfold animation
        multiDragElements.forEach(function (multiDragElement) {
          sortable.addAnimationState({
            target: multiDragElement,
            rect: folding ? getRect(multiDragElement) : dragRect
          });
          unsetRect(multiDragElement);
          multiDragElement.fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElement);
        });
        folding = false;
        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable,
        isOwner = _ref10.isOwner,
        insertion = _ref10.insertion,
        activeSortable = _ref10.activeSortable,
        parentEl = _ref10.parentEl,
        putSortable = _ref10.putSortable;
      var options = this.options;
      if (insertion) {
        // Clones must be hidden before folding animation to capture dragRectAbsolute properly
        if (isOwner) {
          activeSortable._hideClone();
        }
        initialFolding = false;
        // If leaving sort:false root, or already folding - Fold to new location
        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {
          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function (multiDragElement) {
            if (multiDragElement === dragEl$1) return;
            setRect(multiDragElement, dragRectAbsolute);

            // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted
            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable
            parentEl.appendChild(multiDragElement);
          });
          folding = true;
        }

        // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out
        if (!isOwner) {
          // Only remove if not folding (folding will remove them anyways)
          if (!folding) {
            removeMultiDragElements();
          }
          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;
            activeSortable._showClone(sortable);

            // Unfold animation for clones if showing from hidden
            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              multiDragClones.forEach(function (clone) {
                activeSortable.addAnimationState({
                  target: clone,
                  rect: clonesFromRect
                });
                clone.fromRect = clonesFromRect;
                clone.thisAnimationDuration = null;
              });
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect,
        isOwner = _ref11.isOwner,
        activeSortable = _ref11.activeSortable;
      multiDragElements.forEach(function (multiDragElement) {
        multiDragElement.thisAnimationDuration = null;
      });
      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop(_ref12) {
      var evt = _ref12.originalEvent,
        rootEl = _ref12.rootEl,
        parentEl = _ref12.parentEl,
        sortable = _ref12.sortable,
        dispatchSortableEvent = _ref12.dispatchSortableEvent,
        oldIndex = _ref12.oldIndex,
        putSortable = _ref12.putSortable;
      var toSortable = putSortable || this.sortable;
      if (!evt) return;
      var options = this.options,
        children = parentEl.children;

      // Multi-drag selection
      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }
        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));
        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'select',
            targetEl: dragEl$1,
            originalEvent: evt
          });

          // Modifier activated, select from last to dragEl
          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index(lastMultiDragSelect),
              currentIndex = index(dragEl$1);
            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              // Must include lastMultiDragSelect (select it), in case modified selection from no selection
              // (but previous selection existed)
              var n, i;
              if (currentIndex > lastIndex) {
                i = lastIndex;
                n = currentIndex;
              } else {
                i = currentIndex;
                n = lastIndex + 1;
              }
              for (; i < n; i++) {
                if (~multiDragElements.indexOf(children[i])) continue;
                toggleClass(children[i], options.selectedClass, true);
                multiDragElements.push(children[i]);
                dispatchEvent({
                  sortable: sortable,
                  rootEl: rootEl,
                  name: 'select',
                  targetEl: children[i],
                  originalEvent: evt
                });
              }
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }
          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent({
            sortable: sortable,
            rootEl: rootEl,
            name: 'deselect',
            targetEl: dragEl$1,
            originalEvent: evt
          });
        }
      }

      // Multi-drag drop
      if (dragStarted && this.isMultiDrag) {
        folding = false;
        // Do not "unfold" after around dragEl if reverted
        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1),
            multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');
          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();
          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;
              multiDragElements.forEach(function (multiDragElement) {
                multiDragElement.thisAnimationDuration = null;
                if (multiDragElement !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElement) : dragRect;
                  multiDragElement.fromRect = rect;

                  // Prepare unfold animation
                  toSortable.addAnimationState({
                    target: multiDragElement,
                    rect: rect
                  });
                }
              });
            }

            // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert
            // properly they must all be removed
            removeMultiDragElements();
            multiDragElements.forEach(function (multiDragElement) {
              if (children[multiDragIndex]) {
                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);
              } else {
                parentEl.appendChild(multiDragElement);
              }
              multiDragIndex++;
            });

            // If initial folding is done, the elements may have changed position because they are now
            // unfolding around dragEl, even though dragEl may not have his index changed, so update event
            // must be fired here as Sortable will not.
            if (oldIndex === index(dragEl$1)) {
              var update = false;
              multiDragElements.forEach(function (multiDragElement) {
                if (multiDragElement.sortableIndex !== index(multiDragElement)) {
                  update = true;
                  return;
                }
              });
              if (update) {
                dispatchSortableEvent('update');
                dispatchSortableEvent('sort');
              }
            }
          }

          // Must be done after capturing individual rects (scroll bar)
          multiDragElements.forEach(function (multiDragElement) {
            unsetRect(multiDragElement);
          });
          toSortable.animateAll();
        }
        multiDragSortable = toSortable;
      }

      // Remove clones if necessary
      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
        multiDragClones.forEach(function (clone) {
          clone.parentNode && clone.parentNode.removeChild(clone);
        });
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroyGlobal: function destroyGlobal() {
      this._deselectMultiDrag();
      off(document, 'pointerup', this._deselectMultiDrag);
      off(document, 'mouseup', this._deselectMultiDrag);
      off(document, 'touchend', this._deselectMultiDrag);
      off(document, 'keydown', this._checkKeyDown);
      off(document, 'keyup', this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (typeof dragStarted !== "undefined" && dragStarted) return;

      // Only deselect if selection is in this sortable
      if (multiDragSortable !== this.sortable) return;

      // Only deselect if target is not item in this sortable
      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return;

      // Only deselect if left click
      if (evt && evt.button !== 0) return;
      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass(el, this.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: 'deselect',
          targetEl: el,
          originalEvent: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    // Static methods & properties
    pluginName: 'multiDrag',
    utils: {
      /**
       * Selects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be selected
       */
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;
        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();
          multiDragSortable = sortable;
        }
        toggleClass(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },
      /**
       * Deselects the provided multi-drag item
       * @param  {HTMLElement} el    The element to be deselected
       */
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando],
          index = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index) return;
        toggleClass(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index, 1);
      }
    },
    eventProperties: function eventProperties() {
      var _this3 = this;
      var oldIndicies = [],
        newIndicies = [];
      multiDragElements.forEach(function (multiDragElement) {
        oldIndicies.push({
          multiDragElement: multiDragElement,
          index: multiDragElement.sortableIndex
        });

        // multiDragElements will already be sorted if folding
        var newIndex;
        if (folding && multiDragElement !== dragEl$1) {
          newIndex = -1;
        } else if (folding) {
          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');
        } else {
          newIndex = index(multiDragElement);
        }
        newIndicies.push({
          multiDragElement: multiDragElement,
          index: newIndex
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies: oldIndicies,
        newIndicies: newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();
        if (key === 'ctrl') {
          key = 'Control';
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }
        return key;
      }
    }
  });
}
function insertMultiDragElements(clonesInserted, rootEl) {
  multiDragElements.forEach(function (multiDragElement, i) {
    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];
    if (target) {
      rootEl.insertBefore(multiDragElement, target);
    } else {
      rootEl.appendChild(multiDragElement);
    }
  });
}

/**
 * Insert multi-drag clones
 * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted
 * @param  {HTMLElement} rootEl
 */
function insertMultiDragClones(elementsInserted, rootEl) {
  multiDragClones.forEach(function (clone, i) {
    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];
    if (target) {
      rootEl.insertBefore(clone, target);
    } else {
      rootEl.appendChild(clone);
    }
  });
}
function removeMultiDragElements() {
  multiDragElements.forEach(function (multiDragElement) {
    if (multiDragElement === dragEl$1) return;
    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
  });
}
Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sortable);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/main.scss":
/*!****************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/main.scss ***!
  \****************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, `.start-messaging {
  font-family: system, -apple-system, system-ui, BlinkMacSystemFont, "Helvetica Neue", "Helvetica", "Arial", "Lucida Grande", "Kohinoor Devanagari", sans-serif;
  font-weight: normal;
  color: var(--primary-title);
  font-size: 0.9rem;
}

kbd {
  display: inline-block;
  padding: 4px 8px !important;
  color: var(--primary-strong);
  background-color: rgba(var(--primary-rgb), 0.12);
  border: 1px solid rgba(var(--primary-rgb), 0.24) !important;
  border-radius: 4px;
  box-shadow: 0 1px 1px rgba(var(--shadow-rgb), 0.08);
  font-size: 0.75rem;
}

.x1wkzo03 {
  background: rgb(11, 20, 26) !important;
}
.x1wkzo03 kbd {
  color: #e9edef;
  background-color: rgba(209, 215, 219, 0.12);
  border: 1px solid rgba(209, 215, 219, 0.24) !important;
  box-shadow: 0 1px 1px rgba(11, 20, 26, 0.08);
}

.reminderChatItem .reminderBtn {
  display: inline-block !important;
}

.reminderBtn,
.doneBtn {
  display: none;
}

.reminderBtn:hover,
.doneBtn:hover {
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  background-color: var(--button-primary-background);
  color: var(--button-primary);
}
.reminderBtn:hover .material-symbols-outlined,
.doneBtn:hover .material-symbols-outlined {
  font-variation-settings: normal !important;
}

.x10l6tqk.xh8yej3.x1g42fcv:hover .doneBtn,
.x10l6tqk.xh8yej3.x1g42fcv:hover .reminderBtn, .x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p) .doneBtn,
.x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p) .reminderBtn {
  display: inline-flex !important;
}
.x10l6tqk.xh8yej3.x1g42fcv:hover .doneBtn .material-symbols-outlined,
.x10l6tqk.xh8yej3.x1g42fcv:hover .reminderBtn .material-symbols-outlined, .x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p) .doneBtn .material-symbols-outlined,
.x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p) .reminderBtn .material-symbols-outlined {
  font-size: 22px;
}
.x10l6tqk.xh8yej3.x1g42fcv:hover div[role=gridcell]._ak8i > span:nth-child(-n+2), .x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p) div[role=gridcell]._ak8i > span:nth-child(-n+2) {
  display: none;
}
.x10l6tqk.xh8yej3.x1g42fcv:hover div[role=gridcell]._ak8i > span:last-child button, .x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p) div[role=gridcell]._ak8i > span:last-child button {
  margin-right: 6px;
}
.x10l6tqk.xh8yej3.x1g42fcv:hover div[role=gridcell]._ak8i > span:last-child button:last-child, .x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p) div[role=gridcell]._ak8i > span:last-child button:last-child {
  margin-right: 0;
}
.x10l6tqk.xh8yej3.x1g42fcv:hover div[role=gridcell]._ak8i > span:last-child button:first-child, .x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p) div[role=gridcell]._ak8i > span:last-child button:first-child {
  margin-left: 40px;
}
.x10l6tqk.xh8yej3.x1g42fcv:has(.x1n2onr6):hover::after, .x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p)::after {
  content: "";
  width: 4px;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
  background-color: var(--unread-marker-background);
}

@media (min-width: 1024px) {
  .modal .modal-md .xxbb1rq.xxbb1rq {
    width: 440px;
  }
}
@media (max-width: 1023px) {
  .modal .modal-md .xc530u0.xc530u0 {
    width: 440px;
  }
}
.modal .modal-title {
  color: var(--text-secondary) !important;
  font-size: 17px;
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}
.modal .modal-title .material-symbols-outlined {
  margin-right: 8px;
}
.modal .modal-header {
  margin-left: 36px;
  margin-right: 36px;
  padding-bottom: 12px;
  border-bottom: 1px solid var(--background-default-hover);
}
.modal .modal-body {
  padding-top: 12px;
}
.modal .modal-footer {
  margin-left: 36px;
  margin-right: 36px;
  padding-bottom: 12px;
  border-top: 1px solid var(--background-default-hover);
}
.modal .modal-footer .footer-option {
  margin-left: -36px;
  margin-right: -36px;
}
.modal .modal-footer .footer-option button.option {
  width: 100%;
}

.snooze-options {
  width: 100%;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
}
.snooze-options > .option:not(:last-child) {
  margin-bottom: 8px;
}

.snooze-options:has(#npl-suggestions .option) > .option {
  display: none;
}

.nlp-container {
  padding: 15px 36px;
  position: relative;
  display: flex;
  align-items: center;
}
.nlp-container::after {
  content: "";
  width: 4px;
  height: 100%;
  position: absolute;
  left: 0;
  top: 0;
  background-color: var(--unread-marker-background);
}
.nlp-container .npl-input {
  padding: 0px;
  font-size: 14px;
  color: var(--text-primary);
  background-color: transparent;
  border: none;
  outline: none;
  flex: 1;
}

.option {
  padding: 15px 36px;
  cursor: pointer;
  position: relative;
  display: flex;
  align-items: center;
  flex: 1;
  font-size: 14px;
  color: var(--text-primary);
}
.option.selected-option {
  border-color: var(--background-default-hover);
  background: rgba(var(--primary-rgb), 0.12);
}
.option input[type=radio] {
  position: absolute;
  opacity: 0;
  pointer-events: none;
}
.option input[type=radio] {
  margin-right: 12px;
  accent-color: #009688;
}
.option input[type=date]::-webkit-calendar-picker-indicator,
.option input[type=time]::-webkit-calendar-picker-indicator {
  display: none;
}
.option input[type=date]::-webkit-inner-spin-button,
.option input[type=date]::-webkit-clear-button,
.option input[type=time]::-webkit-inner-spin-button,
.option input[type=time]::-webkit-clear-button {
  display: none;
}
.option input[type=date],
.option input[type=time] {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  border: none;
  background: none;
  padding: 0;
  color: inherit;
  font: inherit;
}
.option input[type=date]:focus,
.option input[type=time]:focus {
  outline: none;
}

.snoozeConditionSelect {
  width: auto;
  -webkit-appearance: menulist;
  -moz-appearance: menulist;
  appearance: menulist;
  border: none;
}

.material-symbols-outlined.fill {
  font-variation-settings: "FILL" 1, "wght" 400, "GRAD" 0, "opsz" 24;
}

.customNavBarItem {
  background-color: inherit;
}
.customNavBarItem.active {
  background-color: var(--menu-bar-item-background-active);
}
.customNavBarItem.active .material-symbols-outlined {
  font-variation-settings: "FILL" 1, "wght" 400, "GRAD" 0, "opsz" 24;
}

[data-js-navbar=true]:has(._ajv7._ajv8._ajvb) .customNavBarItem.active {
  background-color: inherit !important;
}
[data-js-navbar=true]:has(._ajv7._ajv8._ajvb) .customNavBarItem.active .material-symbols-outlined {
  font-variation-settings: "FILL" 0, "wght" 400, "GRAD" 0, "opsz" 24;
}

.form-group {
  padding: 15px 36px;
}
.form-group .form-input label {
  margin-bottom: 14px;
  display: block;
}
.form-group .form-input input {
  width: 100%;
  position: relative;
  display: flex;
  align-items: flex-start;
  border: none;
  border-bottom: 2px solid var(--input-border);
  background-color: transparent;
  color: var(--text-primary);
  padding-top: 8px;
  padding-bottom: 5px;
  min-height: 1.47em;
  user-select: text;
  white-space: pre-wrap;
  word-break: break-word;
  font-size: 1.0625rem;
  line-height: 1.47em;
}
.form-group .form-input input:focus {
  outline: none;
  border: none;
  border-bottom: 2px solid var(--input-border-active);
}

.folders-list {
  padding: 0 36px;
}
.folders-list .folder-item {
  padding: 15px 0;
  display: flex;
  align-items: center;
}
.folders-list .folder-item .folder-name {
  display: flex;
  flex: 1;
  align-items: center;
  color: var(--text-primary);
  cursor: grab;
}
.folders-list .folder-item .folder-name .material-symbols-outlined {
  color: var(--icon-fixed);
  margin-right: 8px;
}
.folders-list .folder-item .folder-actions {
  display: flex;
  align-items: center;
  column-gap: 8px;
}

.tooltip {
  position: absolute;
  bottom: 50%;
  right: 125%;
  transform: translateY(50%);
  padding: 8px 16px;
  white-space: nowrap;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.2s ease-in-out;
  z-index: 10000;
  font-size: 0.8125rem;
  text-shadow: 0 0 1px rgba(var(--shadow-rgb), 0.36);
  color: var(--primary);
  background-color: var(--dropdown-background);
  border-radius: var(--radius-app);
  box-shadow: 0 2px 5px 0 rgba(var(--shadow-rgb), 0.26), 0 2px 10px 0 rgba(var(--shadow-rgb), 0.16);
}

button:hover .tooltip {
  opacity: 1;
}

.tooltip kbd {
  margin-left: 8px;
}

.shrinked {
  flex: 0 0 0 !important;
  overflow: hidden !important;
}

.closeChatsContainer {
  display: none;
}

#app:has(._aigv._aigw.shrinked) .closeChatsContainer {
  display: block;
}

.x1ky8ojb.x78zum5.x1q0g3np.x1a02dak.x2lah0s.x3pnbk8.xfex06f.xeuugli.x2lwn1j.x1nn3v0j.x1ykpatu.x1swvt13.x1pi30zi button:not(.volt) {
  display: none;
}

._ajv6.x1y1aw1k.x1sxyh0.xwib8y2.xurb0ha .x10l6tqk {
  display: none;
}

#app:has(._aigv._aigw.shrinked) .two ._aigw {
  flex: 0 0 0%;
  max-width: 0%;
}
#app:has(._aigv._aigw.shrinked) .three ._aigw,
#app:has(._aigv._aigw.shrinked) .three ._aig- {
  flex: 0 0 100%;
  width: 100%;
  max-width: calc(100% - var(--navbar-width));
}`, "",{"version":3,"sources":["webpack://./src/main.scss"],"names":[],"mappings":"AAAA;EACE,6JAAA;EAGA,mBAAA;EACA,2BAAA;EACA,iBAAA;AADF;;AAIA;EACE,qBAAA;EACA,2BAAA;EACA,4BAAA;EACA,gDAAA;EACA,2DAAA;EACA,kBAAA;EACA,mDAAA;EACA,kBAAA;AADF;;AAIA;EACE,sCAAA;AADF;AAGE;EACE,cAAA;EACA,2CAAA;EACA,sDAAA;EACA,4CAAA;AADJ;;AAOE;EACE,gCAAA;AAJJ;;AAQA;;EAEE,aAAA;AALF;;AAQA;;EAEE,mBAAA;EACA,uBAAA;EACA,kBAAA;EACA,kDAAA;EACA,4BAAA;AALF;AAOE;;EACE,0CAAA;AAJJ;;AAWI;;;EAEE,+BAAA;AAPN;AASM;;;EACE,eAAA;AALR;AAUI;EACE,aAAA;AARN;AAaM;EACE,iBAAA;AAXR;AAYQ;EACE,eAAA;AAVV;AAYQ;EACE,iBAAA;AAVV;AAgBE;EAEE,WAAA;EACA,UAAA;EACA,YAAA;EACA,kBAAA;EACA,OAAA;EACA,MAAA;EACA,iDAAA;AAfJ;;AAmBA;EAGM;IACE,YAAA;EAlBN;AACF;AAuBA;EAGM;IACE,YAAA;EAvBN;AACF;AA6BE;EACE,uCAAA;EACA,eAAA;EACA,aAAA;EACA,mBAAA;EACA,mBAAA;AA3BJ;AA6BI;EACE,iBAAA;AA3BN;AA+BE;EACE,iBAAA;EACA,kBAAA;EACA,oBAAA;EACA,wDAAA;AA7BJ;AAgCE;EACE,iBAAA;AA9BJ;AAiCE;EACE,iBAAA;EACA,kBAAA;EACA,oBAAA;EACA,qDAAA;AA/BJ;AAiCI;EACE,kBAAA;EACA,mBAAA;AA/BN;AAiCM;EACE,WAAA;AA/BR;;AAsCA;EACE,WAAA;EACA,uGAAA;AAnCF;AAuCE;EACE,kBAAA;AArCJ;;AAyCA;EACE,aAAA;AAtCF;;AAyCA;EACE,kBAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;AAtCF;AAwCE;EACE,WAAA;EACA,UAAA;EACA,YAAA;EACA,kBAAA;EACA,OAAA;EACA,MAAA;EACA,iDAAA;AAtCJ;AAyCE;EACE,YAAA;EACA,eAAA;EACA,0BAAA;EACA,6BAAA;EACA,YAAA;EACA,aAAA;EACA,OAAA;AAvCJ;;AA4CA;EACE,kBAAA;EACA,eAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;EACA,OAAA;EACA,eAAA;EACA,0BAAA;AAzCF;AA2CE;EACE,6CAAA;EACA,0CAAA;AAzCJ;AA6CE;EACE,kBAAA;EACA,UAAA;EACA,oBAAA;AA3CJ;AAqDE;EACE,kBAAA;EACA,qBAAA;AAnDJ;AAuDE;;EAEE,aAAA;AArDJ;AAwDE;;;;EAIE,aAAA;AAtDJ;AA0DE;;EAEE,gBAAA;EACA,wBAAA;EACA,qBAAA;EACA,YAAA;EACA,gBAAA;EACA,UAAA;EACA,cAAA;EACA,aAAA;AAxDJ;AA4DE;;EAEE,aAAA;AA1DJ;;AA8DA;EACE,WAAA;EACA,4BAAA;EACA,yBAAA;EACA,oBAAA;EACA,YAAA;AA3DF;;AA+DE;EACE,kEAAA;AA5DJ;;AAiEA;EACE,yBAAA;AA9DF;AAgEE;EACE,wDAAA;AA9DJ;AAgEI;EACE,kEAAA;AA9DN;;AAuEM;EACE,oCAAA;AApER;AAsEQ;EACE,kEAAA;AApEV;;AA2EA;EACE,kBAAA;AAxEF;AA0EE;EACE,mBAAA;EACA,cAAA;AAxEJ;AA2EE;EACE,WAAA;EACA,kBAAA;EACA,aAAA;EACA,uBAAA;EACA,YAAA;EACA,4CAAA;EACA,6BAAA;EACA,0BAAA;EACA,gBAAA;EACA,mBAAA;EAEA,kBAAA;EACA,iBAAA;EACA,qBAAA;EACA,sBAAA;EAEA,oBAAA;EACA,mBAAA;AA3EJ;AA6EI;EACE,aAAA;EACA,YAAA;EACA,mDAAA;AA3EN;;AAgFA;EACE,eAAA;AA7EF;AA+EE;EACE,eAAA;EACA,aAAA;EACA,mBAAA;AA7EJ;AA+EI;EACE,aAAA;EACA,OAAA;EACA,mBAAA;EACA,0BAAA;EACA,YAAA;AA7EN;AA+EM;EACE,wBAAA;EACA,iBAAA;AA7ER;AAiFI;EACE,aAAA;EACA,mBAAA;EACA,eAAA;AA/EN;;AAoFA;EACE,kBAAA;EACA,WAAA;EACA,WAAA;EACA,0BAAA;EACA,iBAAA;EACA,mBAAA;EACA,oBAAA;EACA,UAAA;EACA,oCAAA;EACA,cAAA;EACA,oBAAA;EACA,kDAAA;EACA,qBAAA;EACA,4CAAA;EACA,gCAAA;EACA,iGAAA;AAjFF;;AAqFA;EACE,UAAA;AAlFF;;AAqFA;EACE,gBAAA;AAlFF;;AAqFA;EACE,sBAAA;EACA,2BAAA;AAlFF;;AAqFA;EACE,aAAA;AAlFF;;AAqFA;EACE,cAAA;AAlFF;;AAqFA;EAEE,aAAA;AAnFF;;AAsFA;EACE,aAAA;AAnFF;;AAuFE;EACE,YAAA;EACA,aAAA;AApFJ;AAuFE;;EAEE,cAAA;EACA,WAAA;EACA,2CAAA;AArFJ","sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = [];

  // return the list of modules as css string
  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  };

  // import a list of modules into the list
  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    return [content].concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/dayjs/dayjs.min.js":
/*!*****************************************!*\
  !*** ./node_modules/dayjs/dayjs.min.js ***!
  \*****************************************/
/***/ (function(module) {

!function(t,e){ true?module.exports=e():0}(this,(function(){"use strict";var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",c="month",f="quarter",h="year",d="date",l="Invalid Date",$=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,y=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return"["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p="$isDayjsObject",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f="set"+(this.$u?"UTC":""),l=(n={},n[a]=f+"Date",n[d]=f+"Date",n[c]=f+"Month",n[h]=f+"FullYear",n[u]=f+"Hours",n[s]=f+"Minutes",n[i]=f+"Seconds",n[r]=f+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,"0")},$=f||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return b.s(e.$y,4,"0");case"M":return a+1;case"MM":return b.s(a+1,2,"0");case"MMM":return h(n.monthsShort,a,c,3);case"MMMM":return h(c,a);case"D":return e.$D;case"DD":return b.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return h(n.weekdaysMin,e.$W,o,2);case"ddd":return h(n.weekdaysShort,e.$W,o,3);case"dddd":return o[e.$W];case"H":return String(s);case"HH":return b.s(s,2,"0");case"h":return d(1);case"hh":return d(2);case"a":return $(s,u,!0);case"A":return $(s,u,!1);case"m":return String(u);case"mm":return b.s(u,2,"0");case"s":return String(e.$s);case"ss":return b.s(e.$s,2,"0");case"SSS":return b.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",c],["$y",h],["$D",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));

/***/ }),

/***/ "./node_modules/dayjs/plugin/quarterOfYear.js":
/*!****************************************************!*\
  !*** ./node_modules/dayjs/plugin/quarterOfYear.js ***!
  \****************************************************/
/***/ (function(module) {

!function(t,n){ true?module.exports=n():0}(this,(function(){"use strict";var t="month",n="quarter";return function(e,i){var r=i.prototype;r.quarter=function(t){return this.$utils().u(t)?Math.ceil((this.month()+1)/3):this.month(this.month()%3+3*(t-1))};var s=r.add;r.add=function(e,i){return e=Number(e),this.$utils().p(i)===n?this.add(3*e,t):s.bind(this)(e,i)};var u=r.startOf;r.startOf=function(e,i){var r=this.$utils(),s=!!r.u(i)||i;if(r.p(e)===n){var o=this.quarter()-1;return s?this.month(3*o).startOf(t).startOf("day"):this.month(3*o+2).endOf(t).endOf("day")}return u.bind(this)(e,i)}}}));

/***/ }),

/***/ "./src/main.scss":
/*!***********************!*\
  !*** ./src/main.scss ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/sass-loader/dist/cjs.js!./main.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/main.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());
options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];
function getIndexByIdentifier(identifier) {
  var result = -1;
  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }
  return result;
}
function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];
  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };
    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }
    identifiers.push(identifier);
  }
  return identifiers;
}
function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);
  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }
      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };
  return updater;
}
module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];
    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }
    var newLastIdentifiers = modulesToDom(newList, options);
    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];
      var _index = getIndexByIdentifier(_identifier);
      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();
        stylesInDOM.splice(_index, 1);
      }
    }
    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};

/* istanbul ignore next  */
function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target);

    // Special case to return head of iframe instead of iframe itself
    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }
    memo[target] = styleTarget;
  }
  return memo[target];
}

/* istanbul ignore next  */
function insertBySelector(insert, style) {
  var target = getTarget(insert);
  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }
  target.appendChild(style);
}
module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}
module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;
  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}
module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";
  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }
  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }
  var needLayer = typeof obj.layer !== "undefined";
  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }
  css += obj.css;
  if (needLayer) {
    css += "}";
  }
  if (obj.media) {
    css += "}";
  }
  if (obj.supports) {
    css += "}";
  }
  var sourceMap = obj.sourceMap;
  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  }

  // For old IE
  /* istanbul ignore if  */
  options.styleTagTransform(css, styleElement, options.options);
}
function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }
  styleElement.parentNode.removeChild(styleElement);
}

/* istanbul ignore next  */
function domAPI(options) {
  if (typeof document === "undefined") {
    return {
      update: function update() {},
      remove: function remove() {}
    };
  }
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}
module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }
    styleElement.appendChild(document.createTextNode(css));
  }
}
module.exports = styleTagTransform;

/***/ }),

/***/ "./src/components/chatActionButton.js":
/*!********************************************!*\
  !*** ./src/components/chatActionButton.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chatActionButton: () => (/* binding */ chatActionButton)
/* harmony export */ });
function chatActionButton(
  icon,
  onClick = {},
  classList = "",
  actionName = "",
  shortcutHint = "",
  active = false
) {
  // Create button element
  const button = document.createElement("button");
  button.className = `xn6xy2s x1qx5ct2 xsgj6o6 xq22nx5 x16dsc37 ${classList}`;
  button.style.width = "20px";
  button.style.opacity = "1";
  button.style.position = "relative"; // Ensure the button is positioned

  // Create span element for icon
  const iconSpan = document.createElement("span");
  iconSpan.className = `material-symbols-outlined ${active ? "fill" : ""}`;
  iconSpan.textContent = icon;

  // Append the span to the button
  button.appendChild(iconSpan);

  // Set the data-tooltip attribute if actionName or shortcutHint is provided
  if (actionName || shortcutHint) {
    const tooltipContent = `${actionName}${
      shortcutHint ? ` <kbd>${shortcutHint}</kbd>` : ""
    }`;
    const tooltip = document.createElement("div");
    tooltip.className = "tooltip";
    tooltip.innerHTML = tooltipContent;
    button.appendChild(tooltip);
  }

  // Add event listeners
  if (typeof onClick === "function") {
    button.addEventListener(
      "click",
      () => {
        onClick();
      },
      true
    );
  }

  // Add mousedown and mouseup listeners to stop propagation
  button.addEventListener(
    "mousedown",
    (event) => event.stopPropagation(),
    true
  );
  button.addEventListener("mouseup", (event) => event.stopPropagation(), true);

  // Return the button element
  return button;
}


/***/ }),

/***/ "./src/components/chatMenuItem.js":
/*!****************************************!*\
  !*** ./src/components/chatMenuItem.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chatMenuItem: () => (/* binding */ chatMenuItem)
/* harmony export */ });
/* harmony import */ var _utils_eventHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/eventHelpers */ "./src/utils/eventHelpers.js");


/**
 * Creates an <li> element with a given text and click callback.
 *
 * @param {string} text - The text content to be added to the <li> element.
 * @param {Function} onClickCallback - The callback function to be executed when the <li> element is clicked.
 * @returns {HTMLElement} The created <li> element.
 */
function chatMenuItem(
  text,
  shortcut = "",
  callback = {},
  active = false
) {
  // Create the <li> element
  const liElement = document.createElement("li");
  liElement.tabIndex = 0;
  liElement.className = "_aj-r _aj-q _aj-_";
  liElement.setAttribute("data-animate-dropdown-item", "true");
  liElement.style.opacity = "1";

  // Handle hover state
  liElement.addEventListener("mouseover", () => {
    liElement.className = "_aj-s _aj-r _aj-q _aj-_";
  });
  liElement.addEventListener("mouseout", () => {
    liElement.className = "_aj-r _aj-q _aj-_";
  });

  // Create the <div> element inside <li>
  const divElement = document.createElement("div");
  divElement.className = "_aj-z _aj-t _alxo";
  divElement.setAttribute("role", "button");
  divElement.style.display = "flex";
  divElement.style.alignItems = "center";
  divElement.style.paddingRight = "24px";

  // Create a span for the chat name
  const chatNameSpan = document.createElement("span");
  chatNameSpan.textContent = text;
  chatNameSpan.style.flex = "1";

  // Add the chat name span to the <div>
  divElement.appendChild(chatNameSpan);

  // Create and add the check icon if active
  if (active) {
    const checkIconSpan = document.createElement("span");
    checkIconSpan.className = "material-symbols-outlined";
    checkIconSpan.textContent = "check"; // Material Icons check mark
    checkIconSpan.style.color = "var(--unread-marker-background)";
    divElement.appendChild(checkIconSpan);
  }

  if (shortcut) {
    const shortcutIconSpan = document.createElement("kbd");
    shortcutIconSpan.textContent = shortcut;
    divElement.appendChild(shortcutIconSpan);
  }

  // Append the <div> to the <li>
  liElement.appendChild(divElement);

  // Attach the click event listener
  liElement.addEventListener("click", () => {
    callback();
    (0,_utils_eventHelpers__WEBPACK_IMPORTED_MODULE_0__.simulateKeyPress)(document.body, 27);
  });

  return liElement;
}


/***/ }),

/***/ "./src/components/drawer.js":
/*!**********************************!*\
  !*** ./src/components/drawer.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   drawer: () => (/* binding */ drawer)
/* harmony export */ });
function drawer(title, content) {
  return `
    <span class="x5yr21d x17qophe x6ikm8r x10wlt62 x10l6tqk x13vifvy xh8yej3">
      <div tabindex="-1" aria-label="Snooze tab drawer" id="snoozedChatsDrawer">
        <div class="x78zum5 xdt5ytf x5yr21d x17qophe x6ikm8r x10wlt62 x67bb7w x10l6tqk x13vifvy xh8yej3 x150wa6m xnpuxes copyable-area">
          <header class="x9f619 x78zum5 x1okw0bk x6s0dn4 x7j6532 xc73u3c x9mfa4r xzwifym x150wa6m">
            <div class="x78zum5 x1okw0bk x6s0dn4 xh8yej3 x14wi4xw xexx8yu x4uap5 x18d9i69 xkhd6sd">
              <div title="Snoozed" class="x104kibb x1iyjqo2 x4osyxg x6ikm8r x10wlt62 x1mzt3pk xo442l1 x1ua5tub x1y332i5 x117nqv4 x1aueamr x1wm35g xj8l9r2">
                <h1 class="x1qlqyl8 x1pd3egz xcgk4ki" aria-label="">
                  ${title}
                </h1>
              </div>
              <span class="x1okw0bk">
                <div class="_ajv2 _ajv1"><span class=""></span></div>
              </span>
            </div>
          </header>
          <div class="x5yr21d x78zum5 xdt5ytf x6ikm8r x10wlt62" style="overflow-y: auto;">
            <div class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j x1nhvcw1 xdt5ytf x6s0dn4" style="flex-shrink: 0;">
              <div class="xh8yej3">
                ${content}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
}


/***/ }),

/***/ "./src/components/folderButton.js":
/*!****************************************!*\
  !*** ./src/components/folderButton.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   folderButton: () => (/* binding */ folderButton)
/* harmony export */ });
function folderButton(
  id = 0,
  isActive = false,
  text = "",
  onClick = {},
  onDoubleClick = {},
  unreadCount = 0
) {
  // Create button element
  const button = document.createElement("button");
  button.className = isActive
    ? "xjb2p0i x1ypdohk x972fbf xcfux6l x1qhh985 xm0m39n xzqyx8i xqa96yk xvwobac x1h2y310 x6prxxf xo1l8bm x1btupbp xdxn8r xmuu9lm x1690sq9 x1yrsyyn x10b6aqq x1ye3gou xn6708d volt"
    : "xjb2p0i x1ypdohk x972fbf xcfux6l x1qhh985 xm0m39n xzqyx8i xqa96yk xvwobac x1h2y310 x1mvgj39 x1yky6xw x6prxxf xo1l8bm x1btupbp xf573un x1yrsyyn x10b6aqq x1ye3gou xn6708d volt";

  button.tabIndex = 0;
  button.setAttribute("type", "button");
  button.setAttribute("id", `folder-${id}`); // Set ID for reference

  // Create inner div
  const innerDiv1 = document.createElement("div");
  innerDiv1.className =
    "x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j x1nhvcw1 x1q0g3np x6s0dn4 align-items-center"; // Add align-items-center class

  // Create inner div text
  const innerDiv2 = document.createElement("div");
  innerDiv2.textContent = text;

  if (unreadCount) {
    innerDiv2.innerHTML += `<span
      class="x1rg5ohu x1xaadd7 xo5v014 x2b8uid x1tsellj x9bpaai xk50ysn"
      style="font-size: .75rem"
    >
      ${unreadCount}
    </span>`;
  }

  // Append inner divs to button
  innerDiv1.appendChild(innerDiv2);
  button.appendChild(innerDiv1);

  if (typeof onClick === "function") {
    button.addEventListener("click", () => {
      onClick();
    });
  }

  if (typeof onDoubleClick === "function") {
    button.addEventListener("dblclick", () => {
      onDoubleClick();
    });
  }

  // Return the button element
  return button;
}


/***/ }),

/***/ "./src/components/modal.js":
/*!*********************************!*\
  !*** ./src/components/modal.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Modal)
/* harmony export */ });
class Modal {
  constructor(options) {
    this.modalContent = options.modalContent || "";
    this.formHandler = options.formHandler || null;
    this.shortcutHandler = options.shortcutHandler || null; // Custom shortcut handler
    this.keyHandler = options.keyHandler || null; // Custom key handler

    this.modalElement = this.createModalElement();

    this.handleEscKey = this.handleEscKey.bind(this);
    this.handleOutsideClick = this.handleOutsideClick.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);

    this.initialize();
  }

  createModalElement() {
    const modalDiv = document.createElement("div");
    modalDiv.classList.add(
      "x10l6tqk",
      "x13vifvy",
      "xds687c",
      "x1ey2m1c",
      "x17qophe"
    );
    modalDiv.setAttribute("tabindex", "-1");
    modalDiv.innerHTML = `
      <div tabindex="-1" class="modal">
        <div data-animate-modal-backdrop="true"
          class="xixxii4 x13vifvy x17qophe x9f619 xh8yej3 x5yr21d x1bpt9pm xw2csxc x1odjw0f xa03szm xnpuxes copyable-area">
          <div class="x9f619 x78zum5 xdt5ytf x6s0dn4 xl56j7k xh8yej3 xpb48g7 x1jn0hjm x1us19tq"
            role="dialog">
            <div class="x9f619 x78zum5 x1c4vz4f x2lah0s xdl72j9 xdt5ytf xkwfhqy x17e6fzg x15dh256 x1t7u3xy x1shw4ur x6ikm8r x10wlt62 x14atkfc xexx8yu x4uap5 x18d9i69 xkhd6sd x1iek97a"
              data-animate-modal-popup="true">
              <div class="x1n2onr6 x1iyjqo2 xs83m0k x1l7klhg x1mzt3pk xeaf4i8" data-animate-modal-body="true">
                ${this.modalContent}
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    return modalDiv;
  }

  initialize() {
    const formElement = this.modalElement.querySelector("form");
    if (formElement && this.formHandler) {
      formElement.addEventListener("submit", async (e) => {
        e.preventDefault();

        // Find the submit button that was clicked
        const submitter =
          e.submitter || formElement.querySelector('button[type="submit"]');

        // Create FormData from the form
        const formData = new FormData(formElement);

        // Manually add the action from the clicked button, if available
        if (submitter && submitter.getAttribute("data-action")) {
          formData.append("formAction", submitter.getAttribute("data-action"));
          formData.append("objectId", submitter.getAttribute("data-object-id"));
        }

        const success = await this.formHandler(formData);
        if (success) {
          this.closeModal();
        }
      });
    }

    document.addEventListener("keydown", this.handleEscKey);
    const backdrop = this.modalElement.querySelector(
      "[data-animate-modal-backdrop]"
    );

    if (backdrop) {
      backdrop.addEventListener("click", this.handleOutsideClick);
    }
  }

  handleEscKey(e) {
    if (e.key === "Escape") {
      this.closeModal();
    }
  }

  handleOutsideClick(e) {
    const popup = this.modalElement.querySelector("[data-animate-modal-popup]");
    if (!popup.contains(e.target)) {
      this.closeModal();
    }
  }

  openModal() {
    document.body.appendChild(this.modalElement);
    document.addEventListener("keydown", this.handleKeyDown, true); // Capture keydown events
    if (this.keyHandler) {
      document.addEventListener("keydown", this.keyHandler, true); // Add custom key handler
    }
  }

  closeModal() {
    document.body.removeChild(this.modalElement);
    document.removeEventListener("keydown", this.handleKeyDown, true); // Remove keydown event listener
    document.removeEventListener("keydown", this.handleEscKey);
    if (this.keyHandler) {
      document.removeEventListener("keydown", this.keyHandler, true); // Remove custom key handler
    }
    const backdrop = this.modalElement.querySelector(
      "[data-animate-modal-backdrop]"
    );
    if (backdrop) {
      backdrop.removeEventListener("click", this.handleOutsideClick);
    }
  }

  handleKeyDown(e) {
    if (e.key === "Escape") {
      this.closeModal();
    } else if (this.shortcutHandler) {
      this.shortcutHandler(e); // Call custom shortcut handler
    } else {
      // Prevent default action for all other keys
      e.stopPropagation();
    }
  }
}


/***/ }),

/***/ "./src/components/navBarItem.js":
/*!**************************************!*\
  !*** ./src/components/navBarItem.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   navBarItem: () => (/* binding */ navBarItem)
/* harmony export */ });
function navBarItem(drawerId, title, icon, onClick = {}) {
  // Create the main div for the nav item
  const navDiv = document.createElement("div");
  navDiv.className = "_ajv7 _ajvb customNavBarItem";
  navDiv.dataset.drawerId = drawerId;

  // Create the button div
  const buttonDiv = document.createElement("div");
  buttonDiv.setAttribute("aria-disabled", "false");
  buttonDiv.setAttribute("role", "button");
  buttonDiv.setAttribute("tabindex", "0");
  buttonDiv.className = "_ajv6 x1y1aw1k x1sxyh0 xwib8y2 xurb0ha";
  buttonDiv.setAttribute("aria-label", title);
  buttonDiv.setAttribute("title", title);
  buttonDiv.setAttribute("aria-expanded", "false");

  // Create the icon span
  const iconSpan = document.createElement("span");
  iconSpan.setAttribute("data-icon", icon);

  // Use Material Icons font for the icon
  const iconElement = document.createElement("span");
  iconElement.className = "material-symbols-outlined";
  iconElement.textContent = icon;

  iconSpan.appendChild(iconElement);

  // Append the icon span to the button div
  buttonDiv.appendChild(iconSpan);

  // Create inner div and append to button div
  const innerDiv = document.createElement("div");
  innerDiv.className = "x1n2onr6";
  buttonDiv.appendChild(innerDiv);

  // Append button div to main nav item div
  navDiv.appendChild(buttonDiv);

  if (typeof onClick === "function") {
    buttonDiv.addEventListener("click", () => {
      let previouslyActive = document.querySelector(".customNavBarItem.active");
      if (previouslyActive) {
        previouslyActive.classList.remove("active");
      }

      navDiv.classList.add("active");

      onClick();
    });
  }

  return navDiv;
}


/***/ }),

/***/ "./src/components/reminderChatItem.js":
/*!********************************************!*\
  !*** ./src/components/reminderChatItem.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   reminderChatItem: () => (/* binding */ reminderChatItem)
/* harmony export */ });
function reminderChatItem(chatId, userName, timestamp) {
  return `
    <div
      class="x10l6tqk xh8yej3 x1g42fcv unloadedChat reminderChatItem"
      role="listitem"
      style="
        transform: none !important;
        position: relative !important;
        display: block;
      "
      data-chat-id=${chatId}
      data-chat-username="${userName}"
    >
      <div class="x1n2onr6">
        <div tabindex="-1" class="">
          <div class="_ak72 _ak73">
            <div class="_ak8n">
              <div class="_ak8h">
                <div>
                  <div
                    class="x1n2onr6 x14yjl9h xudhj91 x18nykt9 xww2gxu profilePic"
                    style="height: 49px; width: 49px"
                  >
                    <div class="x10l6tqk x13vifvy x17qophe x78zum5 x6s0dn4 xl56j7k xh8yej3 x5yr21d x705qin xsp8fsz">
                      <span aria-hidden="true" data-icon="default-user">
                        <svg viewBox="0 0 212 212" height="212" width="212" preserveAspectRatio="xMidYMid meet" class="xh8yej3 x5yr21d" version="1.1" x="0px" y="0px" enable-background="new 0 0 212 212">
                          <title>default-user</title>
                          <path fill="#DFE5E7" class="background" d="M106.251,0.5C164.653,0.5,212,47.846,212,106.25S164.653,212,106.25,212C47.846,212,0.5,164.654,0.5,106.25 S47.846,0.5,106.251,0.5z"></path>
                          <g>
                            <path fill="#FFFFFF" class="primary" d="M173.561,171.615c-0.601-0.915-1.287-1.907-2.065-2.955c-0.777-1.049-1.645-2.155-2.608-3.299 c-0.964-1.144-2.024-2.326-3.184-3.527c-1.741-1.802-3.71-3.646-5.924-5.47c-2.952-2.431-6.339-4.824-10.204-7.026 c-1.877-1.07-3.873-2.092-5.98-3.055c-0.062-0.028-0.118-0.059-0.18-0.087c-9.792-4.44-22.106-7.529-37.416-7.529 s-27.624,3.089-37.416,7.529c-0.338,0.153-0.653,0.318-0.985,0.474c-1.431,0.674-2.806,1.376-4.128,2.101 c-0.716,0.393-1.417,0.792-2.101,1.197c-3.421,2.027-6.475,4.191-9.15,6.395c-2.213,1.823-4.182,3.668-5.924,5.47 c-1.161,1.201-2.22,2.384-3.184,3.527c-0.964,1.144-1.832,2.25-2.609,3.299c-0.778,1.049-1.464,2.04-2.065,2.955 c-0.557,0.848-1.033,1.622-1.447,2.324c-0.033,0.056-0.073,0.119-0.104,0.174c-0.435,0.744-0.79,1.392-1.07,1.926 c-0.559,1.068-0.818,1.678-0.818,1.678v0.398c18.285,17.927,43.322,28.985,70.945,28.985c27.678,0,52.761-11.103,71.055-29.095 v-0.289c0,0-0.619-1.45-1.992-3.778C174.594,173.238,174.117,172.463,173.561,171.615z"></path><path fill="#FFFFFF" class="primary" d="M106.002,125.5c2.645,0,5.212-0.253,7.68-0.737c1.234-0.242,2.443-0.542,3.624-0.896 c1.772-0.532,3.482-1.188,5.12-1.958c2.184-1.027,4.242-2.258,6.15-3.67c2.863-2.119,5.39-4.646,7.509-7.509 c0.706-0.954,1.367-1.945,1.98-2.971c0.919-1.539,1.729-3.155,2.422-4.84c0.462-1.123,0.872-2.277,1.226-3.458 c0.177-0.591,0.341-1.188,0.49-1.792c0.299-1.208,0.542-2.443,0.725-3.701c0.275-1.887,0.417-3.827,0.417-5.811 c0-1.984-0.142-3.925-0.417-5.811c-0.184-1.258-0.426-2.493-0.725-3.701c-0.15-0.604-0.313-1.202-0.49-1.793 c-0.354-1.181-0.764-2.335-1.226-3.458c-0.693-1.685-1.504-3.301-2.422-4.84c-0.613-1.026-1.274-2.017-1.98-2.971 c-2.119-2.863-4.646-5.39-7.509-7.509c-1.909-1.412-3.966-2.643-6.15-3.67c-1.638-0.77-3.348-1.426-5.12-1.958 c-1.181-0.355-2.39-0.655-3.624-0.896c-2.468-0.484-5.035-0.737-7.68-0.737c-21.162,0-37.345,16.183-37.345,37.345 C68.657,109.317,84.84,125.5,106.002,125.5z"></path>
                          </g>
                        </svg>
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="_ak8l">
              <div role="gridcell" aria-colindex="2" class="_ak8o">
                <div class="_ak8q">
                  <div class="_aou8 _aj_h">
                    <span
                      dir="auto"
                      class="x1iyjqo2 x6ikm8r x10wlt62 x1n2onr6 xlyipyv xuxw1ft x1rg5ohu _ao3e userName"
                      style="min-height: 0px"
                    >
                      ${userName}
                    </span>
                  </div>
                </div>
                <div class="_ak8i">
                  ${timestamp}
                </div>
              </div>
              <div class="_ak8j">
                <div class="_ak8k">
                  <span class="x78zum5 x1cy8zhl">
                    <span
                      dir="ltr"
                      aria-label=""
                      class="x1iyjqo2 x6ikm8r x10wlt62 x1n2onr6 xlyipyv xuxw1ft x1rg5ohu _ao3e lastMsg"
                      style="min-height: 0px"
                    >
                    </span>
                  </span>
                </div>
                <div role="gridcell" aria-colindex="1" class="_ak8i">
                  <span class=""></span>
                  <span class=""></span>
                  <span class="">
                    <button
                      class="xn6xy2s x1qx5ct2 xsgj6o6 xq22nx5 x16dsc37 reminderBtn"
                      style="width: 20px; opacity: 1; position: relative"
                    >
                      <span class="material-symbols-outlined fill">schedule</span>
                      <div class="tooltip">
                        Remind Me
                        <kbd>H</kbd>
                      </div>
                    </button>
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `;
}


/***/ }),

/***/ "./src/features/done/index.js":
/*!************************************!*\
  !*** ./src/features/done/index.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initializeDone: () => (/* binding */ initializeDone)
/* harmony export */ });
/* harmony import */ var _components_chatActionButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/chatActionButton */ "./src/components/chatActionButton.js");
/* harmony import */ var _components_navBarItem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/navBarItem */ "./src/components/navBarItem.js");
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _whatsappStore_markChatDone__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../whatsappStore/markChatDone */ "./src/whatsappStore/markChatDone.js");
/* harmony import */ var _whatsappStore_openArchivedChatsDrawer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../whatsappStore/openArchivedChatsDrawer */ "./src/whatsappStore/openArchivedChatsDrawer.js");






function initializeDone() {
  // Wait until WhatsApp builds up the interface
  document.addEventListener("whatsappInitialized", () => {
    (0,_whatsappStore_openArchivedChatsDrawer__WEBPACK_IMPORTED_MODULE_4__.openArchivedChatsDrawerListener)();

    document.addEventListener("chatOnHover", (event) => {
      const { chat, chatElement } = event.detail;

      // Setup a MutationObserver that adds Chat action buttons while hovering.
      const chatButtons = chatElement.querySelector(
        "[role='gridcell']._ak8i > span:nth-child(3)"
      );
      if (chatButtons) {
        const existingDoneBtn = chatButtons.querySelector(".doneBtn");
        const newDoneBtn = (0,_components_chatActionButton__WEBPACK_IMPORTED_MODULE_0__.chatActionButton)(
          `check${!!chat.chatArchived ? "_circle" : ""}`,
          () => (0,_whatsappStore_markChatDone__WEBPACK_IMPORTED_MODULE_3__.markChatDone)(chat.chatId),
          "doneBtn",
          !!chat.chatArchived ? "Mark not Done" : "Mark Done",
          "E",
          !!chat.chatArchived
        );

        if (existingDoneBtn) {
          chatButtons.replaceChild(newDoneBtn, existingDoneBtn);
        } else {
          chatButtons.insertChildAtIndex(newDoneBtn, 0);
        }
      }
    });

    // Add the Snoozed icon at WhatsApp sidenav navigation.
    const sidenav = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_2__.getElementByXpath)(
      `//*[@id="app"]/div/div[2]/header/div/div/div/div/span/div/div[1]`
    );

    sidenav.insertChildAtIndex(
      (0,_components_navBarItem__WEBPACK_IMPORTED_MODULE_1__.navBarItem)("archivedChats", "Done", "check_circle", () =>
        (0,_whatsappStore_openArchivedChatsDrawer__WEBPACK_IMPORTED_MODULE_4__.openArchivedChatsDrawer)()
      ),
      1
    );
  });
}


/***/ }),

/***/ "./src/features/folders/actions.js":
/*!*****************************************!*\
  !*** ./src/features/folders/actions.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   removeFolder: () => (/* binding */ removeFolder),
/* harmony export */   switchFolder: () => (/* binding */ switchFolder),
/* harmony export */   updateArchiveStatus: () => (/* binding */ updateArchiveStatus),
/* harmony export */   updateContactsInFolder: () => (/* binding */ updateContactsInFolder),
/* harmony export */   updateUnreadCount: () => (/* binding */ updateUnreadCount)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/features/folders/utils.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage */ "./src/features/folders/storage.js");
/* harmony import */ var _whatsappStore_filterChats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../whatsappStore/filterChats */ "./src/whatsappStore/filterChats.js");
/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui */ "./src/features/folders/ui.js");
/* harmony import */ var _whatsappStore_customToasts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../whatsappStore/customToasts */ "./src/whatsappStore/customToasts.js");






function updateContactsInFolder(folderId, contactId, archived) {
  const targetFolder = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.find((f) => f.id === folderId);
  if (!targetFolder) {
    console.log(`Folder with ID ${folderId} not found.`);
    return;
  }

  // Remove contact from all other folders
  _storage__WEBPACK_IMPORTED_MODULE_1__.folders.forEach((folder) => {
    if (folder.id !== folderId) {
      const contactIndex = folder.contacts.findIndex((c) => c.id === contactId);
      if (contactIndex !== -1) {
        folder.contacts.splice(contactIndex, 1);
      }
    }
  });

  // Add contact to target folder
  const existingContact = targetFolder.contacts.find((c) => c.id === contactId);
  if (!existingContact) {
    targetFolder.contacts.push({
      id: contactId,
      unreadCount: 0,
      archived: archived,
    });
  }

  (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);

  // Update UI
  _storage__WEBPACK_IMPORTED_MODULE_1__.folders.forEach((folder) => {
    if (folder.id === _storage__WEBPACK_IMPORTED_MODULE_1__.currentActiveFolder) {
      const updatedChats = folder.contacts.map((c) => c.id);
      (0,_whatsappStore_filterChats__WEBPACK_IMPORTED_MODULE_2__.filterChats)(updatedChats);
    }

    const totalChatsCount = folder.contacts.reduce(
      (sum, contact) => sum + (!contact.archived ? 1 : 0),
      0
    );
    (0,_utils__WEBPACK_IMPORTED_MODULE_0__.updateUIWithUpdatedFolderName)(folder.id, folder.name, totalChatsCount);
  });

  (0,_whatsappStore_customToasts__WEBPACK_IMPORTED_MODULE_4__.triggerCustomToast)("Moved to Folder", "V");
}

function switchFolder(folderId) {
  const folder = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.find((f) => f.id === folderId);
  const chats = folder.contacts.map((c) => c.id);

  // Deactivate previous folder
  if (_storage__WEBPACK_IMPORTED_MODULE_1__.currentActiveFolder) {
    const previousButton = document.getElementById(
      `folder-${_storage__WEBPACK_IMPORTED_MODULE_1__.currentActiveFolder}`
    );
    if (previousButton) {
      previousButton.className =
        "xjb2p0i x1ypdohk x972fbf xcfux6l x1qhh985 xm0m39n xzqyx8i xqa96yk xvwobac x1h2y310 x1mvgj39 x1yky6xw x6prxxf xo1l8bm x1btupbp xf573un x1yrsyyn x10b6aqq x1ye3gou xn6708d volt";
      previousButton.setAttribute("aria-pressed", "false");
    }
  }

  // Activate selected folder
  const activeButton = document.getElementById(`folder-${folderId}`);
  if (activeButton) {
    activeButton.className =
      "xjb2p0i x1ypdohk x972fbf xcfux6l x1qhh985 xm0m39n xzqyx8i xqa96yk xvwobac x1h2y310 x6prxxf xo1l8bm x1btupbp xdxn8r xmuu9lm x1690sq9 x1yrsyyn x10b6aqq x1ye3gou xn6708d volt";
    activeButton.setAttribute("aria-pressed", "true");
  }

  (0,_storage__WEBPACK_IMPORTED_MODULE_1__.setCurrentActiveFolder)(folderId);
  (0,_whatsappStore_filterChats__WEBPACK_IMPORTED_MODULE_2__.filterChats)(chats);
}

// Add this new function to update unread count
function updateUnreadCount(chatId, unreadCount) {
  _storage__WEBPACK_IMPORTED_MODULE_1__.folders.forEach((folder) => {
    const contact = folder.contacts.find((c) => c.id === chatId);
    if (contact) {
      contact.unreadCount = unreadCount;
    }
  });
  (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);
}

function removeFolder(folderId) {
  if (_storage__WEBPACK_IMPORTED_MODULE_1__.folders.find((f) => f.id === folderId).inbox) return;
  const index = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.findIndex((f) => f.id === folderId);
  if (index !== -1) {
    const inboxFolder = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.find((f) => f.inbox === true);

    if (inboxFolder) {
      // Add contacts of the folder to be removed to the inbox folder
      inboxFolder.contacts.push(..._storage__WEBPACK_IMPORTED_MODULE_1__.folders[index].contacts);
    }

    _storage__WEBPACK_IMPORTED_MODULE_1__.folders.splice(index, 1);

    (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);
    (0,_utils__WEBPACK_IMPORTED_MODULE_0__.removeFolderFromUI)(folderId);

    const totalChatsCount = inboxFolder.contacts.reduce(
      (sum, contact) => sum + (!contact.archived ? 1 : 0),
      0
    );
    (0,_utils__WEBPACK_IMPORTED_MODULE_0__.updateUIWithUpdatedFolderName)(
      inboxFolder.id,
      inboxFolder.name,
      totalChatsCount
    );

    switchFolder(1);
  }
}

// Set up listener for UNREAD_COUNT_CHANGE
window.addEventListener("message", function (event) {
  if (
    event.source === window &&
    event.data &&
    event.data.type === "UNREAD_COUNT_CHANGE"
  ) {
    const { chatId, unreadCount } = event.data;
    updateUnreadCount(chatId, unreadCount);
  }
});

// Add this new function to update archive status
function updateArchiveStatus(chatId, archived) {
  let updatedFolder = null;
  _storage__WEBPACK_IMPORTED_MODULE_1__.folders.forEach((folder) => {
    const contact = folder.contacts.find((c) => c.id === chatId);
    if (contact) {
      contact.archived = archived;
      updatedFolder = folder;
    }
  });
  (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);

  if (updatedFolder !== null) {
    const totalChatsCount = updatedFolder.contacts.reduce(
      (sum, contact) => sum + (!contact.archived ? 1 : 0),
      0
    );
    (0,_utils__WEBPACK_IMPORTED_MODULE_0__.updateUIWithUpdatedFolderName)(
      updatedFolder.id,
      updatedFolder.name,
      totalChatsCount
    );
  }
}

// Set up listener for ARCHIVE_CHAT_EVENT
window.addEventListener("message", function (event) {
  if (
    event.source === window &&
    event.data &&
    event.data.type === "ARCHIVE_CHAT_EVENT"
  ) {
    const { chatId, archived } = event.data;
    updateArchiveStatus(chatId, archived);
  }
});

// Set up listener for CHATS_SYNC
window.addEventListener("message", function (event) {
  if (
    event.source === window &&
    event.data &&
    event.data.type === "CHATS_SYNC"
  ) {
    const chats = event.data.chats;

    _storage__WEBPACK_IMPORTED_MODULE_1__.folders.forEach((folder) => {
      folder.contacts = folder.contacts.map((contact) => {
        const updatedContact = chats.find((chat) => chat.id === contact.id);
        return updatedContact ? updatedContact : contact;
      });
    });

    // Handle inbox folder separately
    const inboxFolder = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.find((folder) => folder.inbox);
    if (inboxFolder) {
      const allContacts = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.flatMap((folder) =>
        folder.contacts.map((c) => c.id)
      );
      const newContacts = chats.filter(
        (chat) => !allContacts.includes(chat.id)
      );
      inboxFolder.contacts.push(...newContacts);
    }

    (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);
    (0,_ui__WEBPACK_IMPORTED_MODULE_3__.initializeUI)();
    switchFolder(1);
  }
});

// Set up listener for CHAT_ADDED
window.addEventListener("message", function (event) {
  if (
    event.source === window &&
    event.data &&
    event.data.type === "CHAT_ADDED"
  ) {
    const chatId = event.data.chatId;
    const inboxFolder = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.find((folder) => folder.inbox);
    if (inboxFolder) {
      inboxFolder.contacts.push({
        id: chatId,
        archived: false,
      });
      (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);

      const totalChatsCount = inboxFolder.contacts.reduce(
        (sum, contact) => sum + (!contact.archived ? 1 : 0),
        0
      );
      (0,_utils__WEBPACK_IMPORTED_MODULE_0__.updateUIWithUpdatedFolderName)(
        inboxFolder.id,
        inboxFolder.name,
        totalChatsCount
      );
    }
  }
});

// Set up listener for CHAT_REMOVED
window.addEventListener("message", function (event) {
  if (
    event.source === window &&
    event.data &&
    event.data.type === "CHAT_REMOVED"
  ) {
    const chatId = event.data.chatId;
    let targetFolder = null;

    // Find the folder containing the contact
    _storage__WEBPACK_IMPORTED_MODULE_1__.folders.forEach((folder) => {
      const index = folder.contacts.findIndex((c) => c.id === chatId);
      if (index !== -1) {
        targetFolder = folder;
        folder.contacts.splice(index, 1);
      }
    });

    if (targetFolder) {
      (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);

      const totalChatsCount = targetFolder.contacts.reduce(
        (sum, contact) => sum + (!contact.archived ? 1 : 0),
        0
      );
      (0,_utils__WEBPACK_IMPORTED_MODULE_0__.updateUIWithUpdatedFolderName)(
        targetFolder.id,
        targetFolder.name,
        totalChatsCount
      );
    }
  }
});

// Set up listener for FILTER_CHATS_BY_ACTIVE_FOLDER
window.addEventListener("message", function (event) {
  if (
    event.source === window &&
    event.data &&
    event.data.type === "FILTER_CHATS_BY_ACTIVE_FOLDER"
  ) {
    const activeFolder = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.find(
      (folder) => folder.id === _storage__WEBPACK_IMPORTED_MODULE_1__.currentActiveFolder
    );
    (0,_whatsappStore_filterChats__WEBPACK_IMPORTED_MODULE_2__.filterChats)(activeFolder.contacts.map((c) => c.id));
  }
});


/***/ }),

/***/ "./src/features/folders/folderForm.js":
/*!********************************************!*\
  !*** ./src/features/folders/folderForm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   folderForm: () => (/* binding */ folderForm)
/* harmony export */ });
/* harmony import */ var _components_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/modal */ "./src/components/modal.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage */ "./src/features/folders/storage.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ "./src/features/folders/utils.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./actions */ "./src/features/folders/actions.js");





function folderForm(folderId = null) {
  const isEditMode = folderId !== null;
  const folder = isEditMode ? _storage__WEBPACK_IMPORTED_MODULE_1__.folders.find((f) => f.id === folderId) : null;

  const folderFormContent = `
    <form id="folderForm">
      <div class="x12lqup9 x1o1kx08">
        <div class="modal-md x9f619 x1p5oq8j">
          <div class="modal-header">
            <p class="modal-title x1w7sdjq x1fcty0u">
              <span class="material-symbols-outlined">${
                isEditMode ? "folder" : "create_new_folder"
              }</span>
              ${isEditMode ? "Edit folder" : "New folder"}
            </p>
          </div>
          <div class="modal-body xdt5ytf xubnuyq xw2csxc x1odjw0f xo6wm36 x1iegka5 xc530u0 x8zx4qv x1gcmwly x17sy6yu xwsakjw x1vz1ssi xxbb1rq xwxc41k">
            <div class="form-group">
              <div class="form-input">
                <label class="x1f6kntn x1u7k74 x1n68mz9 x1fcty0u">Folder name</label>
                <input type="text" name="folderName" value="${
                  isEditMode ? folder.name : ""
                }" required placeholder="🤑 Leads" class="selectable-text copyable-text">
              </div>
            </div>
          </div>
        </div>
      </div>
      <div
        class="x78zum5 x8hhl5t xp4054r xuxw1ft x123j3cw x1gtfrk1 x156go17 x1sqk8ge"
      >
        <div style="flex: 1;"></div>
        <div
          class="x13a6bvl x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j x1nhvcw1 x1q0g3np xuk3077 x40hh3e"
        >
          ${
            isEditMode && !folder.inbox
              ? `
          <button
            data-action="remove"
            type="submit"
            class="x1sr8853 x889kno x1a8lsjc x1n2onr6 xk50ysn x1f6kntn xyesn5m x1z11no5 xjy5m1g x1mnwbp6 x4pb5v6 x178xt8z xm81vs4 xso031l xy80clv x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x1v8p93f xogb00i x16stqrj x1ftr3km x1hl8ikr xfagghw x9dyr19 x9lcvmn xcjl5na x1k3x3db xuxw1ft"
          >
            <div
              class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j xl56j7k x1q0g3np x6s0dn4"
            >
              <div
                class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 x3pnbk8 xfex06f xeuugli x2lwn1j xl56j7k x1q0g3np x6s0dn4"
                style="flex-grow: 1"
              >
                Remove
              </div>
            </div>
          </button> `
              : ""
          }
          <button
            data-action="submit"
            type="submit"
            class="x889kno x1a8lsjc xbbxn1n xxbr6pl x1n2onr6 x1rg5ohu xk50ysn x1f6kntn xyesn5m x1z11no5 xjy5m1g x1mnwbp6 x4pb5v6 x178xt8z xm81vs4 xso031l xy80clv x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x1v8p93f xogb00i x16stqrj x1ftr3km x1hl8ikr xfagghw x9dyr19 x9lcvmn xbtce8p x14v0smp xo8ufso xcjl5na x1k3x3db xuxw1ft xv52azi"
          >
            <div
              class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j xl56j7k x1q0g3np x6s0dn4"
            >
              <div
                class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 x3pnbk8 xfex06f xeuugli x2lwn1j xl56j7k x1q0g3np x6s0dn4"
                style="flex-grow: 1"
              >
                OK
              </div>
            </div>
          </button>
        </div>
      </div>
    </form>
  `;

  const modal = new _components_modal__WEBPACK_IMPORTED_MODULE_0__["default"]({
    modalContent: folderFormContent,
    formHandler: async (formData) => {
      const folderName = formData.get("folderName");
      const action = formData.get("formAction");

      if (action === "submit") {
        if (isEditMode) {
          folder.name = folderName;
          (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);
          (0,_utils__WEBPACK_IMPORTED_MODULE_2__.updateUIWithUpdatedFolderName)(folderId, folderName);
        } else {
          const highestId = _storage__WEBPACK_IMPORTED_MODULE_1__.folders.reduce(
            (max, folder) => Math.max(max, folder.id),
            0
          );
          const newId = highestId + 1;
          const newFolder = { id: newId, name: folderName, contacts: [] };
          _storage__WEBPACK_IMPORTED_MODULE_1__.folders.push(newFolder);
          (0,_storage__WEBPACK_IMPORTED_MODULE_1__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_1__.folders);
          (0,_utils__WEBPACK_IMPORTED_MODULE_2__.updateUIWithNewFolder)(newId, folderName);
          (0,_actions__WEBPACK_IMPORTED_MODULE_3__.switchFolder)(newId);
        }
        return true;
      } else if (action === "remove" && isEditMode) {
        (0,_actions__WEBPACK_IMPORTED_MODULE_3__.removeFolder)(folderId);
        return true;
      }
      return false;
    },
  });

  modal.openModal();

  // Add event listener for the Enter key
  document.getElementById("folderForm").addEventListener("keydown", (event) => {
    if (event.key === "Enter") {
      event.preventDefault();
      const submitButton = document.querySelector(
        'button[data-action="submit"]'
      );
      submitButton.click();
    }
  });
}


/***/ }),

/***/ "./src/features/folders/foldersForm.js":
/*!*********************************************!*\
  !*** ./src/features/folders/foldersForm.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   foldersForm: () => (/* binding */ foldersForm)
/* harmony export */ });
/* harmony import */ var _components_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/modal */ "./src/components/modal.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions */ "./src/features/folders/actions.js");
/* harmony import */ var _folderForm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./folderForm */ "./src/features/folders/folderForm.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage */ "./src/features/folders/storage.js");
/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! sortablejs */ "./node_modules/sortablejs/modular/sortable.esm.js");
/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui */ "./src/features/folders/ui.js");







function foldersForm() {
  const foldersList = _storage__WEBPACK_IMPORTED_MODULE_3__.folders
    .map(
      (folder) => `
    <div class="folder-item" data-folder-id="${folder.id}">
      <div class="folder-name">
        <span class="material-symbols-outlined">drag_indicator</span>
        ${folder.name}
      </div>
      <div class="folder-actions">
        <button type="submit" class="xjb2p0i xk390pu x1heor9g x1ypdohk xjbqb8w x972fbf xcfux6l x1qhh985 xm0m39n xexx8yu x4uap5 x18d9i69 xkhd6sd _ald6" data-action="edit" data-object-id="${
          folder.id
        }">
          <span class="material-symbols-outlined _ald7">edit</span>
        </button>
        ${
          folder.inbox
            ? ""
            : `<button type="submit" class="xjb2p0i xk390pu x1heor9g x1ypdohk xjbqb8w x972fbf xcfux6l x1qhh985 xm0m39n xexx8yu x4uap5 x18d9i69 xkhd6sd _ald6" data-action="remove" data-object-id="${folder.id}">
          <span class="material-symbols-outlined _ald7">delete</span>
        </button>`
        }
      </div>
    </div>
  `
    )
    .join("");

  const foldersFormContent = `
    <form id="foldersForm">
      <div class="x12lqup9 x1o1kx08">
        <div class="modal-md x9f619 x1p5oq8j">
          <div class="modal-header">
            <p class="modal-title x1w7sdjq x1fcty0u">
              <span class="material-symbols-outlined">folder_managed</span>
              Your folders
            </p>
          </div>
          <div class="modal-body xdt5ytf xubnuyq xw2csxc x1odjw0f xo6wm36 x1iegka5 xc530u0 x8zx4qv x1gcmwly x17sy6yu xwsakjw x1vz1ssi xxbb1rq xwxc41k">
            <div id="folders-list" class="folders-list">
              ${foldersList}
            </div>
          </div>
        </div>
      </div>
      <div
        class="x78zum5 x8hhl5t xp4054r xuxw1ft x123j3cw x1gtfrk1 x156go17 x1sqk8ge"
      >
        <div class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j x1nhvcw1 x1q0g3np xuk3077 x40hh3e" style="flex: 1;">
          <button
            data-action="create"
            type="submit"
            class="x1n68mz9 x889kno x1a8lsjc x1n2onr6 xk50ysn x1f6kntn xyesn5m x1z11no5 xjy5m1g x1mnwbp6 x4pb5v6 x178xt8z xm81vs4 xso031l xy80clv x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x1v8p93f xogb00i x16stqrj x1ftr3km x1hl8ikr xfagghw x9dyr19 x9lcvmn xcjl5na x1k3x3db xuxw1ft"
          >
            <div
              class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j xl56j7k x1q0g3np x6s0dn4"
            >
              <div
                class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 x3pnbk8 xfex06f xeuugli x2lwn1j xl56j7k x1q0g3np x6s0dn4"
                style="flex-grow: 1"
              >
                Create folder
              </div>
            </div>
          </button>
        </div>
        <div
          class="x13a6bvl x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j x1nhvcw1 x1q0g3np xuk3077 x40hh3e"
        >
          <button
            data-action="submit"
            type="submit"
            class="x889kno x1a8lsjc xbbxn1n xxbr6pl x1n2onr6 x1rg5ohu xk50ysn x1f6kntn xyesn5m x1z11no5 xjy5m1g x1mnwbp6 x4pb5v6 x178xt8z xm81vs4 xso031l xy80clv x13fuv20 xu3j5b3 x1q0q8m5 x26u7qi x1v8p93f xogb00i x16stqrj x1ftr3km x1hl8ikr xfagghw x9dyr19 x9lcvmn xbtce8p x14v0smp xo8ufso xcjl5na x1k3x3db xuxw1ft xv52azi"
          >
            <div
              class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j xl56j7k x1q0g3np x6s0dn4"
            >
              <div
                class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 x3pnbk8 xfex06f xeuugli x2lwn1j xl56j7k x1q0g3np x6s0dn4"
                style="flex-grow: 1"
              >
                OK
              </div>
            </div>
          </button>
        </div>
      </div>
    </form>
  `;

  const modal = new _components_modal__WEBPACK_IMPORTED_MODULE_0__["default"]({
    modalContent: foldersFormContent,
    formHandler: async (formData) => {
      const action = formData.get("formAction");
      const objectId = parseInt(formData.get("objectId"));

      switch (action) {
        case "edit":
          (0,_folderForm__WEBPACK_IMPORTED_MODULE_2__.folderForm)(objectId);
          return true;
        case "remove":
          (0,_actions__WEBPACK_IMPORTED_MODULE_1__.removeFolder)(objectId);
          return true;
        case "create":
          (0,_folderForm__WEBPACK_IMPORTED_MODULE_2__.folderForm)();
          return true;
        case "submit":
          updateFolderPositions();
          return true;
      }
    },
  });

  modal.openModal();

  initializeDragAndDrop();
}

function initializeDragAndDrop() {
  const foldersList = document.getElementById("folders-list");

  new sortablejs__WEBPACK_IMPORTED_MODULE_4__["default"](foldersList, {
    animation: 150,
    handle: ".folder-item",
    onEnd: (evt) => {
      // This event is triggered when a drag operation ends
      // You can use it for immediate updates if needed
    },
  });
}

function updateFolderPositions() {
  const folderItems = document.querySelectorAll(".folder-item");
  const updatedFolders = Array.from(folderItems).map((item, index) => {
    const folderId = parseInt(item.dataset.folderId);
    const folder = _storage__WEBPACK_IMPORTED_MODULE_3__.folders.find((f) => f.id === folderId);
    return { ...folder, position: index };
  });
  // Update the folders array with new positions
  _storage__WEBPACK_IMPORTED_MODULE_3__.folders.length = 0;
  _storage__WEBPACK_IMPORTED_MODULE_3__.folders.push(...updatedFolders);
  // Save the updated folders to storage
  (0,_storage__WEBPACK_IMPORTED_MODULE_3__.saveFoldersToStorage)(_storage__WEBPACK_IMPORTED_MODULE_3__.folders);

  // Update the UI to reflect the new order
  (0,_ui__WEBPACK_IMPORTED_MODULE_5__.updateFoldersUI)();
}


/***/ }),

/***/ "./src/features/folders/index.js":
/*!***************************************!*\
  !*** ./src/features/folders/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initializeFolders: () => (/* binding */ initializeFolders)
/* harmony export */ });
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./storage */ "./src/features/folders/storage.js");
/* harmony import */ var _shortcuts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shortcuts */ "./src/features/folders/shortcuts.js");
/* harmony import */ var _whatsappStore_filterChats__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../whatsappStore/filterChats */ "./src/whatsappStore/filterChats.js");
/* harmony import */ var _whatsappStore_messagesListener__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../whatsappStore/messagesListener */ "./src/whatsappStore/messagesListener.js");
/* harmony import */ var _whatsappStore_archiveChatEventListener__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../whatsappStore/archiveChatEventListener */ "./src/whatsappStore/archiveChatEventListener.js");
/* harmony import */ var _whatsappStore_requestMoveToForm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../whatsappStore/requestMoveToForm */ "./src/whatsappStore/requestMoveToForm.js");
/* harmony import */ var _whatsappStore_chatsSync__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../whatsappStore/chatsSync */ "./src/whatsappStore/chatsSync.js");
/* harmony import */ var _moveToForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./moveToForm */ "./src/features/folders/moveToForm.js");
/* harmony import */ var _whatsappStore_forwardFilterHandler__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../whatsappStore/forwardFilterHandler */ "./src/whatsappStore/forwardFilterHandler.js");










function initializeFolders() {
  (0,_storage__WEBPACK_IMPORTED_MODULE_0__.loadFoldersFromStorage)((loadedFolders) => {});

  // Listen for custom event and initialize features
  document.addEventListener("whatsappInitialized", () => {
    (0,_whatsappStore_chatsSync__WEBPACK_IMPORTED_MODULE_6__.chatsSync)();

    (0,_shortcuts__WEBPACK_IMPORTED_MODULE_1__.setupKeyboardListeners)();
    (0,_whatsappStore_requestMoveToForm__WEBPACK_IMPORTED_MODULE_5__.requestMoveToFormListener)();

    (0,_whatsappStore_filterChats__WEBPACK_IMPORTED_MODULE_2__.filterChatsListener)();
    (0,_whatsappStore_messagesListener__WEBPACK_IMPORTED_MODULE_3__.messagesListener)();
    (0,_whatsappStore_archiveChatEventListener__WEBPACK_IMPORTED_MODULE_4__.archiveChatEventListener)();
    (0,_whatsappStore_forwardFilterHandler__WEBPACK_IMPORTED_MODULE_8__.forwardFilterHandlerListener)();

    // Listen for the response from the injected script
    window.addEventListener("message", (event) => {
      if (
        event.data &&
        event.data.type === "OPEN_MOVE_TO_FORM" &&
        event.data.chatId
      ) {
        const chatId = event.data.chatId;
        (0,_moveToForm__WEBPACK_IMPORTED_MODULE_7__.moveToForm)(chatId);
      }
    });
  });
}


/***/ }),

/***/ "./src/features/folders/moveToForm.js":
/*!********************************************!*\
  !*** ./src/features/folders/moveToForm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   moveToForm: () => (/* binding */ moveToForm)
/* harmony export */ });
/* harmony import */ var _components_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/modal */ "./src/components/modal.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage */ "./src/features/folders/storage.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./actions */ "./src/features/folders/actions.js");




function moveToForm(chatId, archived) {
  const foldersOptions = _storage__WEBPACK_IMPORTED_MODULE_1__.folders
    .map((folder, index) => {
      const isSelected = folder.id === _storage__WEBPACK_IMPORTED_MODULE_1__.currentActiveFolder;
      return `
        <label class="option">
          <span style="flex: 1;">
            <input type="radio" name="folder" value="${folder.id}" ${
        isSelected ? "checked" : ""
      }>
            ${folder.name}
          </span>
          <span>
            ${index < 9 ? `<kbd>${index + 1}</kbd>` : ""}
          </span>
        </label>
      `;
    })
    .join("");

  const moveToFormContent = `
    <form id="moveToForm">
      <div class="x12lqup9 x1o1kx08">
        <div class="modal-md x9f619 x1p5oq8j">
          <div class="modal-header">
            <p class="modal-title x1w7sdjq x1fcty0u">
              <span class="material-symbols-outlined">folder</span>
              Move to
            </p>
          </div>
          <div class="modal-body xdt5ytf xubnuyq xw2csxc x1odjw0f xo6wm36 x1iegka5 xc530u0 x8zx4qv x1gcmwly x17sy6yu xwsakjw x1vz1ssi xxbb1rq xwxc41k">
            <div class="snooze-options">
              ${foldersOptions}
            </div>
          </div>
        </div>
      </div>
    </form>
  `;

  const modal = new _components_modal__WEBPACK_IMPORTED_MODULE_0__["default"]({
    modalContent: moveToFormContent,
    formHandler: async (formData) => {
      const selectedFolderId = parseInt(formData.get("folder"));
      if (selectedFolderId) {
        (0,_actions__WEBPACK_IMPORTED_MODULE_2__.updateContactsInFolder)(selectedFolderId, chatId, archived);
        return true; // Indicates successful handling
      }
      return false; // Indicates unsuccessful handling
    },
    shortcutHandler: (e) => {
      const form = document.getElementById("moveToForm");
      const key = e.key;
      if (/^[1-9]$/.test(key)) {
        e.preventDefault();
        const index = parseInt(key) - 1;
        const radioInputs = form.querySelectorAll('input[type="radio"]');
        if (index < radioInputs.length) {
          radioInputs[index].checked = true;
          radioInputs[index].focus();
          form.dispatchEvent(new Event("submit"));
        }
      } else if (key === "Enter") {
        e.preventDefault();
        form.dispatchEvent(new Event("submit"));
      }
    },
  });

  modal.openModal();

  // Add event listeners
  const form = document.getElementById("moveToForm");

  form.addEventListener("click", (e) => {
    if (e.target.closest("label.option")) {
      e.preventDefault();
      const radio = e.target
        .closest("label.option")
        .querySelector('input[type="radio"]');
      radio.checked = true;
      form.dispatchEvent(new Event("submit"));
    }
  });

  form.querySelector('input[type="radio"]').focus();
}


/***/ }),

/***/ "./src/features/folders/shortcuts.js":
/*!*******************************************!*\
  !*** ./src/features/folders/shortcuts.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setupKeyboardListeners: () => (/* binding */ setupKeyboardListeners)
/* harmony export */ });
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./actions */ "./src/features/folders/actions.js");
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage */ "./src/features/folders/storage.js");




function setupKeyboardListeners() {
  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__.isUserTyping)()) return;

      const currentIndex = _storage__WEBPACK_IMPORTED_MODULE_2__.folders.findIndex(
        (folder) => folder.id === _storage__WEBPACK_IMPORTED_MODULE_2__.currentActiveFolder
      );
      const totalFolders = _storage__WEBPACK_IMPORTED_MODULE_2__.folders.length;

      if (
        event.key === "Tab" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        const nextIndex = (currentIndex + 1) % totalFolders;
        (0,_actions__WEBPACK_IMPORTED_MODULE_0__.switchFolder)(_storage__WEBPACK_IMPORTED_MODULE_2__.folders[nextIndex].id);
        document
          .getElementById(`folder-${_storage__WEBPACK_IMPORTED_MODULE_2__.folders[nextIndex].id}`)
          .scrollIntoView({ behavior: "smooth", inline: "center" });
      }

      if (
        event.key === "Tab" &&
        event.shiftKey &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        const prevIndex = (currentIndex - 1 + totalFolders) % totalFolders;
        (0,_actions__WEBPACK_IMPORTED_MODULE_0__.switchFolder)(_storage__WEBPACK_IMPORTED_MODULE_2__.folders[prevIndex].id);
        document
          .getElementById(`folder-${_storage__WEBPACK_IMPORTED_MODULE_2__.folders[prevIndex].id}`)
          .scrollIntoView({ behavior: "smooth", inline: "center" });
      }
    },
    true
  );
}


/***/ }),

/***/ "./src/features/folders/storage.js":
/*!*****************************************!*\
  !*** ./src/features/folders/storage.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   currentActiveFolder: () => (/* binding */ currentActiveFolder),
/* harmony export */   folders: () => (/* binding */ folders),
/* harmony export */   loadFoldersFromStorage: () => (/* binding */ loadFoldersFromStorage),
/* harmony export */   loadSettingsFromStorage: () => (/* binding */ loadSettingsFromStorage),
/* harmony export */   resetFolders: () => (/* binding */ resetFolders),
/* harmony export */   saveFoldersToStorage: () => (/* binding */ saveFoldersToStorage),
/* harmony export */   setCurrentActiveFolder: () => (/* binding */ setCurrentActiveFolder),
/* harmony export */   setFolders: () => (/* binding */ setFolders)
/* harmony export */ });
const initialFolders = [
  {
    id: 1,
    name: "Important",
    contacts: [],
    inbox: true,
  },
  {
    id: 2,
    name: "Others",
    contacts: [],
  },
];

let folders = [];
function setFolders(val) {
  folders = val;
}

let currentActiveFolder = 1;
function setCurrentActiveFolder(val) {
  currentActiveFolder = val;
}

// Load folders from storage and execute callback
function loadFoldersFromStorage(callback) {
  loadSettingsFromStorage((loadedFolders, _) => {
    setFolders(loadedFolders);
    callback(loadedFolders);
  });
}

// Save folders to storage
function saveFoldersToStorage(folders) {
  chrome.storage.local.set({ folders: folders });
}

// Load folders from storage
function loadSettingsFromStorage(callback) {
  chrome.storage.local.get(["folders"], (result) => {
    const loadedFolders = result.folders || initialFolders; // Use initial folders if no folders are found
    callback(loadedFolders);
  });
}

function resetFolders() {
  folders = initialFolders;
  saveFoldersToStorage(folders);
}


/***/ }),

/***/ "./src/features/folders/ui.js":
/*!************************************!*\
  !*** ./src/features/folders/ui.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initializeUI: () => (/* binding */ initializeUI),
/* harmony export */   updateFoldersUI: () => (/* binding */ updateFoldersUI)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _components_folderButton__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/folderButton */ "./src/components/folderButton.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./actions */ "./src/features/folders/actions.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage */ "./src/features/folders/storage.js");
/* harmony import */ var _components_chatMenuItem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/chatMenuItem */ "./src/components/chatMenuItem.js");
/* harmony import */ var _moveToForm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./moveToForm */ "./src/features/folders/moveToForm.js");
/* harmony import */ var _folderForm__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./folderForm */ "./src/features/folders/folderForm.js");
/* harmony import */ var _foldersForm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./foldersForm */ "./src/features/folders/foldersForm.js");









function initializeUI() {
  let foldersSection = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(`//*[@id="side"]/div[2]`);

  if (foldersSection.id !== "pane-side") {
    foldersSection.style.overflowX = "auto";
    foldersSection.style.flexWrap = "nowrap";
    foldersSection.style.whiteSpace = "nowrap";
    foldersSection.style.display = "flex";
    (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.hideAllChildren)(foldersSection); // this hides Unread and Groups tabs
  } else {
    foldersSection = document.createElement("div");
    foldersSection.className =
      "x1ky8ojb x78zum5 x1q0g3np x1a02dak x2lah0s x3pnbk8 xfex06f xeuugli x2lwn1j x1nn3v0j x1ykpatu x1swvt13 x1pi30zi ";
    foldersSection.style =
      "overflow-x: auto; flex-wrap: nowrap; white-space: nowrap; display: flex;";
    document.querySelector("#side").insertChildAtIndex(foldersSection, 2);
  }

  // Create a container for folders
  const foldersContainer = document.createElement("div");
  foldersContainer.id = "folders-container";
  foldersContainer.style.display = "flex";
  foldersContainer.style.flex = "1";
  foldersContainer.style.overflowX = "auto";
  foldersContainer.className = "xfex06f x3pnbk8";

  // Sort folders based on their position attribute
  const sortedFolders = [..._storage__WEBPACK_IMPORTED_MODULE_3__.folders].sort((a, b) => a.position - b.position);

  for (const folder of sortedFolders) {
    const totalChatsCount = folder.contacts.reduce(
      (sum, contact) => sum + (!contact.archived ? 1 : 0),
      0
    );

    foldersContainer.append(
      (0,_components_folderButton__WEBPACK_IMPORTED_MODULE_1__.folderButton)(
        folder.id,
        folder.id === _storage__WEBPACK_IMPORTED_MODULE_3__.currentActiveFolder,
        folder.name,
        () => (0,_actions__WEBPACK_IMPORTED_MODULE_2__.switchFolder)(folder.id),
        () => (0,_folderForm__WEBPACK_IMPORTED_MODULE_6__.folderForm)(folder.id),
        totalChatsCount
      )
    );
  }

  // Add the folders container to the main section
  foldersSection.appendChild(foldersContainer);

  // Add settings button after folders
  const settingsButton = document.createElement("button");
  settingsButton.className =
    "xjb2p0i x1ypdohk x972fbf xcfux6l x1qhh985 xm0m39n x1mvgj39 x6prxxf xo1l8bm x1btupbp x1yrsyyn x10b6aqq volt";
  settingsButton.style.background = "inherit";
  settingsButton.style.paddingLeft = "8px";
  settingsButton.innerHTML = `
    <div class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 x78zum5 xozqiw3 x1oa3qoh x12fk4p8 xeuugli x2lwn1j x1nhvcw1 x1q0g3np x6s0dn4 align-items-center">
      <span class="material-symbols-outlined">
        folder_managed
      </span>
    </div>
  `;
  settingsButton.addEventListener("click", () => (0,_foldersForm__WEBPACK_IMPORTED_MODULE_7__.foldersForm)());
  foldersSection.appendChild(settingsButton);

  window.addEventListener("message", function (event) {
    if (
      event.source === window &&
      event.data &&
      event.data.type === "OPEN_CONTEXT_MENU"
    ) {
      const { chatId, archived } = event.data;

      const chatMenu = document.querySelector(
        `#app > div > span:nth-child(6) > div > ul > div`
      );

      chatMenu.children[0].remove(); // Remove archive button since we have custom actions and we need space here

      chatMenu.insertChildAtIndex(
        (0,_components_chatMenuItem__WEBPACK_IMPORTED_MODULE_4__.chatMenuItem)("Move to", "V", () => (0,_moveToForm__WEBPACK_IMPORTED_MODULE_5__.moveToForm)(chatId, archived)),
        0
      );
    }
  });
}

function updateFoldersUI() {
  const foldersContainer = document.getElementById("folders-container");
  if (!foldersContainer) return;

  // Sort folders based on their position attribute
  const sortedFolders = [..._storage__WEBPACK_IMPORTED_MODULE_3__.folders].sort((a, b) => a.position - b.position);

  // Remove all existing folder buttons
  foldersContainer.innerHTML = "";

  // Re-add folder buttons in the new order
  for (const folder of sortedFolders) {
    const totalChatsCount = folder.contacts.reduce(
      (sum, contact) => sum + (!contact.archived ? 1 : 0),
      0
    );

    foldersContainer.appendChild(
      (0,_components_folderButton__WEBPACK_IMPORTED_MODULE_1__.folderButton)(
        folder.id,
        folder.id === _storage__WEBPACK_IMPORTED_MODULE_3__.currentActiveFolder,
        folder.name,
        () => (0,_actions__WEBPACK_IMPORTED_MODULE_2__.switchFolder)(folder.id),
        () => (0,_folderForm__WEBPACK_IMPORTED_MODULE_6__.folderForm)(folder.id),
        totalChatsCount
      )
    );
  }
}


/***/ }),

/***/ "./src/features/folders/utils.js":
/*!***************************************!*\
  !*** ./src/features/folders/utils.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getChatItemUnderMenu: () => (/* binding */ getChatItemUnderMenu),
/* harmony export */   removeFolderFromUI: () => (/* binding */ removeFolderFromUI),
/* harmony export */   updateUIWithNewFolder: () => (/* binding */ updateUIWithNewFolder),
/* harmony export */   updateUIWithUpdatedFolderName: () => (/* binding */ updateUIWithUpdatedFolderName)
/* harmony export */ });
/* harmony import */ var _components_folderButton__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/folderButton */ "./src/components/folderButton.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./storage */ "./src/features/folders/storage.js");
/* harmony import */ var _actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./actions */ "./src/features/folders/actions.js");
/* harmony import */ var _folderForm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./folderForm */ "./src/features/folders/folderForm.js");





// Function to update the UI with the new folder
function updateUIWithNewFolder(folderId, folderName) {
  const foldersSection = document.getElementById("folders-container");

  foldersSection.insertChildAtIndex(
    (0,_components_folderButton__WEBPACK_IMPORTED_MODULE_0__.folderButton)(
      folderId,
      folderId === _storage__WEBPACK_IMPORTED_MODULE_1__.currentActiveFolder,
      folderName,
      () => (0,_actions__WEBPACK_IMPORTED_MODULE_2__.switchFolder)(folderId),
      () => (0,_folderForm__WEBPACK_IMPORTED_MODULE_3__.folderForm)(folderId)
    ),
    foldersSection.childNodes.length
  );
}

// Function to update the UI when a folder name is changed
function updateUIWithUpdatedFolderName(
  folderId,
  newFolderName,
  unreadCount = 0
) {
  const foldersSection = document.getElementById("folders-container");
  const oldButton = document.querySelector(`button[id='folder-${folderId}']`);

  if (oldButton) {
    const index = Array.prototype.indexOf.call(
      foldersSection.children,
      oldButton
    );

    // Remove the old button
    foldersSection.removeChild(oldButton);

    // Create a new button
    const newButton = (0,_components_folderButton__WEBPACK_IMPORTED_MODULE_0__.folderButton)(
      folderId,
      folderId === _storage__WEBPACK_IMPORTED_MODULE_1__.currentActiveFolder,
      newFolderName,
      () => (0,_actions__WEBPACK_IMPORTED_MODULE_2__.switchFolder)(folderId),
      () => (0,_folderForm__WEBPACK_IMPORTED_MODULE_3__.folderForm)(folderId),
      unreadCount
    );

    // Insert the new button at the same index
    foldersSection.insertBefore(newButton, foldersSection.children[index]);
  }
}

// Function to remove the folder from the UI
function removeFolderFromUI(folderId) {
  const foldersSection = document.getElementById("folders-container");
  const oldButton = document.querySelector(`button[id='folder-${folderId}']`);

  if (oldButton) {
    foldersSection.removeChild(oldButton);
  }
}

function getChatItemUnderMenu(menuElement) {
  // Get the position of the menu element
  const rect = menuElement.getBoundingClientRect();

  // Find the element at the center of the menu
  const chatItem = document.elementFromPoint(
    rect.left + rect.width / 2,
    rect.top + rect.height / 2
  );

  // Define the required classes for the chat item
  const requiredClasses = ["x10l6tqk", "xh8yej3", "x1g42fcv"];

  // Function to find the parent with all the required classes
  function findParentWithClasses(element, classes) {
    let currentElement = element;
    while (currentElement) {
      if (classes.every((cls) => currentElement.classList.contains(cls))) {
        return currentElement;
      }
      currentElement = currentElement.parentElement; // Move up the DOM tree
    }
    return null; // No parent with all the specified classes was found
  }

  // Find the parent with the required classes
  const chatItemParent = findParentWithClasses(chatItem, requiredClasses);

  return [chatItemParent, chatItem];
}


/***/ }),

/***/ "./src/features/scheduled/index.js":
/*!*****************************************!*\
  !*** ./src/features/scheduled/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initializeScheduled: () => (/* binding */ initializeScheduled)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _components_navBarItem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/navBarItem */ "./src/components/navBarItem.js");



function initializeScheduled() {
  // Listen for custom event and initialize features
  document.addEventListener("whatsappInitialized", () => {
    // Smart stuff here
  });
}


/***/ }),

/***/ "./src/features/shortcuts/index.js":
/*!*****************************************!*\
  !*** ./src/features/shortcuts/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initializeShortcuts: () => (/* binding */ initializeShortcuts)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _keyboardListeners__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyboardListeners */ "./src/features/shortcuts/keyboardListeners.js");



function initializeShortcuts() {
  // Wait util WhatsApp build up the interface
  document.addEventListener("whatsappInitialized", () => {
    (0,_keyboardListeners__WEBPACK_IMPORTED_MODULE_1__.setupKeyboardListeners)();

    window.addEventListener("message", (event) => {
      if (event.data.type === "OPEN_CHAT") {
        const header = document.querySelector("._amid._aqbz");
        const backButton = document.createElement("button");
        backButton.classList.add(
          "_ajv6",
          "x1y1aw1k",
          "x1sxyh0",
          "xwib8y2",
          "xurb0ha",
          "_ajv2",
          "closeChatsContainer"
        );
        backButton.style.marginRight = "10px";

        backButton.innerHTML =
          '<span class="material-symbols-outlined">arrow_back</span>';
        backButton.addEventListener("click", () => {
          const chatsContainer = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(
            `//*[@id="app"]/div/div[2]/div[3]`
          );
          chatsContainer.classList.remove("shrinked");
        });

        header.insertChildAtIndex(backButton, 0);
      }
    });
  });
}


/***/ }),

/***/ "./src/features/shortcuts/keyboardListeners.js":
/*!*****************************************************!*\
  !*** ./src/features/shortcuts/keyboardListeners.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   setupKeyboardListeners: () => (/* binding */ setupKeyboardListeners)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _utils_eventHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/eventHelpers */ "./src/utils/eventHelpers.js");
/* harmony import */ var _whatsappStore_requestSnoozeForm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../whatsappStore/requestSnoozeForm */ "./src/whatsappStore/requestSnoozeForm.js");
/* harmony import */ var _whatsappStore_requestMoveToForm__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../whatsappStore/requestMoveToForm */ "./src/whatsappStore/requestMoveToForm.js");
/* harmony import */ var _whatsappStore_focusNextChat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../whatsappStore/focusNextChat */ "./src/whatsappStore/focusNextChat.js");
/* harmony import */ var _whatsappStore_focusPreviousChat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../whatsappStore/focusPreviousChat */ "./src/whatsappStore/focusPreviousChat.js");
/* harmony import */ var _whatsappStore_composeFocus__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../whatsappStore/composeFocus */ "./src/whatsappStore/composeFocus.js");
/* harmony import */ var _whatsappStore_focusLastMessage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../whatsappStore/focusLastMessage */ "./src/whatsappStore/focusLastMessage.js");
/* harmony import */ var _whatsappStore_composeBoxEmitter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../whatsappStore/composeBoxEmitter */ "./src/whatsappStore/composeBoxEmitter.js");










const isMac = navigator.platform.toLowerCase().includes("mac");

function setupKeyboardListeners() {
  (0,_whatsappStore_focusNextChat__WEBPACK_IMPORTED_MODULE_4__.focusNextChatListener)();
  (0,_whatsappStore_focusPreviousChat__WEBPACK_IMPORTED_MODULE_5__.focusPreviousChatListener)();
  (0,_whatsappStore_composeFocus__WEBPACK_IMPORTED_MODULE_6__.composeFocusListener)();
  (0,_whatsappStore_focusLastMessage__WEBPACK_IMPORTED_MODULE_7__.focusLastMessageListener)();
  (0,_whatsappStore_composeBoxEmitter__WEBPACK_IMPORTED_MODULE_8__.composeBoxEmitter)();

  window.addEventListener("message", (event) => {
    if (event.data.type === "COMPOSEBOX_FOCUSED") {
      const chatsContainer = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(
        `//*[@id="app"]/div/div[2]/div[3]`
      );

      if (chatsContainer.dataset.archived === "true") {
        chatsContainer.dataset.archived = false;
      } else {
        chatsContainer.classList.add("shrinked");
      }
    }

    if (event.data.type === "ARCHIVE_CHAT_EVENT") {
      const chatsContainer = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(
        `//*[@id="app"]/div/div[2]/div[3]`
      );
      chatsContainer.classList.remove("shrinked");
      chatsContainer.dataset.archived = true;
    }
  });

  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserTyping)()) return;

      if (
        (event.key === "ArrowDown" || event.key === "j") &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        (0,_whatsappStore_focusNextChat__WEBPACK_IMPORTED_MODULE_4__.focusNextChat)();
      }

      if (
        (event.key === "ArrowUp" || event.key === "k") &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        (0,_whatsappStore_focusPreviousChat__WEBPACK_IMPORTED_MODULE_5__.focusPreviousChat)();
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if (
        event.key === "Escape" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        const chatsContainer = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(
          `//*[@id="app"]/div/div[2]/div[3]`
        );
        chatsContainer.classList.remove("shrinked");

        const activeElement = document.activeElement;
        if (
          activeElement &&
          activeElement.tagName === "DIV" &&
          activeElement.getAttribute("contenteditable") === "true"
        ) {
          event.preventDefault();
          event.stopPropagation();
          (0,_whatsappStore_focusLastMessage__WEBPACK_IMPORTED_MODULE_7__.focusLastMessage)();
        }
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserTyping)()) return;
      if (
        event.key === "Enter" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        const messageInput = document.querySelector(
          'div[contenteditable="true"].x1hx0egp.x6ikm8r.x1odjw0f.x1k6rcq7.x6prxxf:not(.x1whj5v)'
        );
        if (messageInput) {
          const chatsContainer = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(
            `//*[@id="app"]/div/div[2]/div[3]`
          );
          chatsContainer.classList.add("shrinked");
          // Removed console.log(".shrinked added by ENTER");

          messageInput.focus();

          event.preventDefault();
          event.stopPropagation();
        }
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserTyping)()) return;

      if (
        event.key === "c" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        (0,_utils_eventHelpers__WEBPACK_IMPORTED_MODULE_1__.triggerNativeShortcut)({
          key: "n",
          code: "KeyN",
          ctrlKey: true,
          altKey: !isMac,
          shiftKey: false,
          metaKey: isMac,
        });
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserTyping)()) return;

      if (
        event.key === "/" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        (0,_utils_eventHelpers__WEBPACK_IMPORTED_MODULE_1__.triggerNativeShortcut)({
          key: "k",
          code: "KeyK",
          ctrlKey: false,
          altKey: !isMac,
          shiftKey: false,
          metaKey: isMac,
        });
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserTyping)()) return;

      if (
        event.key === "e" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        (0,_utils_eventHelpers__WEBPACK_IMPORTED_MODULE_1__.triggerNativeShortcut)({
          key: "e",
          code: "KeyE",
          ctrlKey: true,
          altKey: !isMac,
          shiftKey: true,
          metaKey: isMac,
        });
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if (
        event.key === "Enter" &&
        event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();

        // Get the message input element
        const messageInput = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(
          `//*[@id="main"]/footer/div[1]/div/span[2]/div/div[2]/div[1]/div/div`
        );
        if (messageInput) {
          // Simulate Enter key press to send the message
          (0,_utils_eventHelpers__WEBPACK_IMPORTED_MODULE_1__.simulateKeyPress)(messageInput, "Enter");

          setTimeout(() => {
            // Archive the chat
            (0,_utils_eventHelpers__WEBPACK_IMPORTED_MODULE_1__.triggerNativeShortcut)({
              key: "e",
              code: "KeyE",
              ctrlKey: true,
              altKey: !isMac,
              shiftKey: true,
              metaKey: isMac,
            });

            (0,_utils_eventHelpers__WEBPACK_IMPORTED_MODULE_1__.triggerNativeShortcut)({
              key: "Escape",
              code: "KeyEscape",
              ctrlKey: false,
              altKey: false,
              shiftKey: false,
              metaKey: false,
            });
          }, 100);
        }
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserTyping)()) return;

      if (
        event.key === "u" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();

        // Mark read/unread
        (0,_utils_eventHelpers__WEBPACK_IMPORTED_MODULE_1__.triggerNativeShortcut)({
          key: "u",
          code: "KeyU",
          ctrlKey: true,
          altKey: !isMac,
          shiftKey: true,
          metaKey: isMac,
        });
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserTyping)()) return;

      if (
        event.key === "h" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        (0,_whatsappStore_requestSnoozeForm__WEBPACK_IMPORTED_MODULE_2__.requestSnoozeForm)();
      }
    },
    true
  );

  document.addEventListener(
    "keydown",
    (event) => {
      if ((0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.isUserTyping)()) return;

      if (
        event.key === "v" &&
        !event.metaKey &&
        !event.ctrlKey &&
        !event.altKey &&
        !event.shiftKey
      ) {
        event.preventDefault();
        event.stopPropagation();
        (0,_whatsappStore_requestMoveToForm__WEBPACK_IMPORTED_MODULE_3__.requestMoveToForm)();
      }
    },
    true
  );
}


/***/ }),

/***/ "./src/features/snoozed/clues.js":
/*!***************************************!*\
  !*** ./src/features/snoozed/clues.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   generateSnoozedChatsCSS: () => (/* binding */ generateSnoozedChatsCSS)
/* harmony export */ });
function generateSnoozedChatsCSS(snoozedChats) {
  let css = "";

  if (snoozedChats) {
    snoozedChats.forEach((snoozedChat) => {
      css += `
      .x10l6tqk.xh8yej3.x1g42fcv:has(span[title*="${snoozedChat.chatUsername}"]) div._ak8l div._ak8j div._ak8i span:nth-child(3)::after {
        content: 'schedule';
        display: inline-block;
        cursor: pointer;
        font-size: 24px;
        opacity: 1;
        font-family: 'Material Symbols Outlined';
        font-variation-settings:
          "FILL" 1,
          "wght" 400,
          "GRAD" 0,
          "opsz" 24;
        color: var(--icon-lighter);
        margin-left: 6px;
      }

      .x10l6tqk.xh8yej3.x1g42fcv:has(span[title*="${snoozedChat.chatUsername}"]):hover div._ak8l div._ak8j div._ak8i span:nth-child(3)::after,
      .x10l6tqk.xh8yej3.x1g42fcv:has(span[title*="${snoozedChat.chatUsername}"]):has(._ak72._ak73._ak7p) div._ak8l div._ak8j div._ak8i span:nth-child(3)::after {
        display: none; /* Hides the pseudo-element when the parent is hovered or has specified classes */
      }

      .x10l6tqk.xh8yej3.x1g42fcv:has(span[title*="${snoozedChat.chatUsername}"]) div._ak8l div._ak8j div._ak8i span:nth-child(3) > .reminderBtn > .material-symbols-outlined {
        font-variation-settings:
          "FILL" 1,
          "wght" 400,
          "GRAD" 0,
          "opsz" 24;
      }
    `;
    });
  }

  let style = document.getElementById("snoozedChatsClues");
  if (!style) {
    style = document.createElement("style");
    style.id = "snoozedChatsClues";
    document.head.appendChild(style);
  }

  style.innerHTML = css;
}


/***/ }),

/***/ "./src/features/snoozed/index.js":
/*!***************************************!*\
  !*** ./src/features/snoozed/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initializeSnoozed: () => (/* binding */ initializeSnoozed)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _components_navBarItem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../components/navBarItem */ "./src/components/navBarItem.js");
/* harmony import */ var _components_chatActionButton__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../components/chatActionButton */ "./src/components/chatActionButton.js");
/* harmony import */ var _unsnoozeChat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./unsnoozeChat */ "./src/features/snoozed/unsnoozeChat.js");
/* harmony import */ var _snoozeForm__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./snoozeForm */ "./src/features/snoozed/snoozeForm.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage */ "./src/features/snoozed/storage.js");
/* harmony import */ var _snoozedChatsDrawer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./snoozedChatsDrawer */ "./src/features/snoozed/snoozedChatsDrawer.js");
/* harmony import */ var _clues__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./clues */ "./src/features/snoozed/clues.js");
/* harmony import */ var _whatsappStore_requestSnoozeForm__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../whatsappStore/requestSnoozeForm */ "./src/whatsappStore/requestSnoozeForm.js");










function initializeSnoozed() {
  chrome.runtime.sendMessage({
    action: "checkDueAlarms",
  });
  (0,_storage__WEBPACK_IMPORTED_MODULE_5__.loadSnoozedChatsFromStorage)((loadedSnoozedChats) => {
    (0,_clues__WEBPACK_IMPORTED_MODULE_7__.generateSnoozedChatsCSS)(loadedSnoozedChats);
  });

  // Wait until WhatsApp builds up the interface
  document.addEventListener("whatsappInitialized", () => {
    (0,_unsnoozeChat__WEBPACK_IMPORTED_MODULE_3__.initializeUnsnoozed)();

    // Add the Snoozed icon at WhatsApp sidenav navigation.
    const sidenav = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(
      `//*[@id="app"]/div/div[2]/header/div/div/div/div/span/div/div[1]`
    );

    sidenav.insertChildAtIndex(
      (0,_components_navBarItem__WEBPACK_IMPORTED_MODULE_1__.navBarItem)("snoozedChats", "Snoozed", "schedule", () =>
        (0,_snoozedChatsDrawer__WEBPACK_IMPORTED_MODULE_6__.snoozedChatsDrawer)()
      ),
      1
    );

    document.addEventListener("chatOnHover", (event) => {
      const { chat, chatElement } = event.detail;

      // Setup a MutationObserver that adds Chat action buttons while hovering.
      const chatButtons = chatElement.querySelector(
        "[role='gridcell']._ak8i > span:nth-child(3)"
      );
      if (chatButtons) {
        const existingReminderBtn = chatButtons.querySelector(".reminderBtn");
        const newReminderBtn = (0,_components_chatActionButton__WEBPACK_IMPORTED_MODULE_2__.chatActionButton)(
          "schedule",
          () => (0,_snoozeForm__WEBPACK_IMPORTED_MODULE_4__.snoozeForm)(chat),
          "reminderBtn",
          "Remind Me",
          "H"
        );

        if (existingReminderBtn) {
          chatButtons.replaceChild(newReminderBtn, existingReminderBtn);
        } else {
          chatButtons.insertChildAtIndex(newReminderBtn, 0);
        }
      }
    });

    (0,_whatsappStore_requestSnoozeForm__WEBPACK_IMPORTED_MODULE_8__.requestSnoozeFormListener)();

    // Listen for the response from the injected script
    window.addEventListener("message", (event) => {
      if (
        event.data &&
        event.data.type === "OPEN_SNOOZE_FORM" &&
        event.data.chatId
      ) {
        const chatId = event.data.chatId;
        const userName = event.data.userName;
        const archived = event.data.archived;

        (0,_snoozeForm__WEBPACK_IMPORTED_MODULE_4__.snoozeForm)({
          chatId: chatId,
          chatUsername: userName,
          archived: archived,
        });
      }
    });
  });
}


/***/ }),

/***/ "./src/features/snoozed/snoozeChat.js":
/*!********************************************!*\
  !*** ./src/features/snoozed/snoozeChat.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   requestSnooze: () => (/* binding */ requestSnooze)
/* harmony export */ });
/* harmony import */ var _components_reminderChatItem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/reminderChatItem */ "./src/components/reminderChatItem.js");
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _whatsappStore_archiveChat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../whatsappStore/archiveChat */ "./src/whatsappStore/archiveChat.js");
/* harmony import */ var _whatsappStore_getChatDetails__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../whatsappStore/getChatDetails */ "./src/whatsappStore/getChatDetails.js");
/* harmony import */ var _clues__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./clues */ "./src/features/snoozed/clues.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage */ "./src/features/snoozed/storage.js");
/* harmony import */ var _whatsappStore_customToasts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../whatsappStore/customToasts */ "./src/whatsappStore/customToasts.js");








// Function to send the snooze request to the background script
// The background script in in charge of setting up the chrome alarm that fires events
// so content-script gets noticed and do stuff then
function requestSnooze(chat, snoozeTime, snoozeCondition) {
  chrome.runtime.sendMessage(
    {
      action: "snoozeChat",
      chatId: chat.chatId,
      chatUsername: chat.chatUsername,
      snoozeTime: snoozeTime,
      snoozeCondition: snoozeCondition,
    },
    (response) => {
      if (response && response.status === "success") {
        (0,_whatsappStore_archiveChat__WEBPACK_IMPORTED_MODULE_2__.archiveChat)(chat.chatId);

        // Update visual clue of active reminder
        (0,_storage__WEBPACK_IMPORTED_MODULE_5__.loadSnoozedChatsFromStorage)((loadedSnoozedChats) => {
          (0,_clues__WEBPACK_IMPORTED_MODULE_4__.generateSnoozedChatsCSS)(loadedSnoozedChats);
        });

        const snoozedChatsDrawerFocused = document.querySelector(
          `.customNavBarItem.active[data-drawer-id="snoozedChats"]`
        );

        if (snoozedChatsDrawerFocused) {
          const existingReminderElement = document.querySelector(
            `.reminderChatItem[data-chat-id="${chat.chatId}"]`
          );

          if (existingReminderElement) {
            // Assuming reminderChatItem is a function that returns an HTML string
            const newElementHTML = (0,_components_reminderChatItem__WEBPACK_IMPORTED_MODULE_0__.reminderChatItem)(
              chat.chatId,
              chat.chatUsername,
              `Remind me: ${(0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__.formatTimestamp)(snoozeTime)}`
            );

            // Create a temporary container to parse the HTML string
            const tempContainer = document.createElement("div");
            tempContainer.innerHTML = newElementHTML;

            // Replace the existing element with the new one
            existingReminderElement.replaceWith(
              tempContainer.firstElementChild
            );

            (0,_whatsappStore_getChatDetails__WEBPACK_IMPORTED_MODULE_3__.getChatDetails)(chat.chatId);
          }
        }

        const formattedSnoozeTime = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__.formatTimestamp)(snoozeTime);
        const toastMessage = `Reminder set: ${formattedSnoozeTime} ${snoozeCondition}`;
        (0,_whatsappStore_customToasts__WEBPACK_IMPORTED_MODULE_6__.triggerCustomToast)(toastMessage, "H");
      } else {
        console.error("Failed to snooze chat.");
      }
    }
  );
}


/***/ }),

/***/ "./src/features/snoozed/snoozeForm.js":
/*!********************************************!*\
  !*** ./src/features/snoozed/snoozeForm.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   snoozeForm: () => (/* binding */ snoozeForm)
/* harmony export */ });
/* harmony import */ var _components_modal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../components/modal */ "./src/components/modal.js");
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _snoozeChat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./snoozeChat */ "./src/features/snoozed/snoozeChat.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage */ "./src/features/snoozed/storage.js");
/* harmony import */ var _unsnoozeChat__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./unsnoozeChat */ "./src/features/snoozed/unsnoozeChat.js");
/* harmony import */ var chrono_node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! chrono-node */ "./node_modules/chrono-node/dist/esm/index.js");
/* harmony import */ var date_fns__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns */ "./node_modules/date-fns/formatDistanceToNow.js");








function snoozeForm(chat) {
  // Find existing reminder for the chat
  const existingReminder =
    _storage__WEBPACK_IMPORTED_MODULE_3__.snoozedChats &&
    _storage__WEBPACK_IMPORTED_MODULE_3__.snoozedChats.find((reminder) => reminder.chatId === chat.chatId);

  // Get the most recent reminder if available
  const lastUsedReminder =
    _storage__WEBPACK_IMPORTED_MODULE_3__.snoozedChats && _storage__WEBPACK_IMPORTED_MODULE_3__.snoozedChats[_storage__WEBPACK_IMPORTED_MODULE_3__.snoozedChats.length - 1];

  const now = new Date();

  let snoozeCondition = "ifNoReply"; // Default condition

  if (existingReminder && existingReminder.until) {
    snoozeCondition = existingReminder.snoozeCondition;
  }

  let laterTodayTime;
  let hasLaterTodayOption = true;

  // Determine "Later today" time, setting to 18:00 if before 18:00
  if (now.getHours() < 18) {
    laterTodayTime = new Date();
    laterTodayTime.setHours(18, 0, 0, 0); // Set to 18:00
  } else {
    hasLaterTodayOption = false;
  }

  // Function to format time as "6:00 PM"
  function formatTime(date) {
    return date.toLocaleTimeString([], { hour: "numeric", minute: "2-digit" });
  }

  // Function to format tomorrow's date as "THU, 8:00 AM"
  function getFormattedTomorrow() {
    const days = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
    const tomorrow = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate() + 1,
      8,
      0,
      0
    );
    return `${days[tomorrow.getDay()]}, 8:00 AM`;
  }

  // Function to format a future date as "DAY, TIME"
  function getFormattedFutureDate(daysAhead, hour = 8, minute = 0) {
    const days = ["SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"];
    const futureDate = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate() + daysAhead,
      hour,
      minute,
      0
    );
    return `${days[futureDate.getDay()]}, ${hour}:00 AM`;
  }

  // Determine if "Last Used" should be displayed
  const shouldDisplayLastUsed =
    lastUsedReminder && Number(lastUsedReminder.until) > now.getTime();

  const lastUsedOptionHTML = shouldDisplayLastUsed
    ? `
    <label class="option">
      <span style="flex: 1;">
        <input type="radio" name="snoozeOption" value="lastUsed">
        Last Used
      </span>
      <span class="custom">
        <span>
          ${(0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__.formatTimestamp)(lastUsedReminder.until)}
        </span>
      </span>
    </label>
  `
    : "";

  const laterTodayOptionHTML = laterTodayTime
    ? `
    <label class="option">
      <span style="flex: 1;">
        <input type="radio" name="snoozeOption" value="laterToday">
        Later today
      </span>
      <span>
        ${formatTime(laterTodayTime)}
      </span>
    </label>
  `
    : "";

  const inTwoDaysOptionHTML = `
    <label class="option">
      <span style="flex: 1;">
        <input type="radio" name="snoozeOption" value="inTwoDays">
        In 2 Days
      </span>
      <span>
        ${getFormattedFutureDate(2)}
      </span>
    </label>
  `;

  const inAWeekOptionHTML = `
    <label class="option">
      <span style="flex: 1;">
        <input type="radio" name="snoozeOption" value="inAWeek">
        In a Week
      </span>
      <span>
        ${getFormattedFutureDate(7)}
      </span>
    </label>
  `;

  const snoozeFormContent = `
    <form id="snoozeForm">
      <div class="x12lqup9 x1o1kx08">
        <div class="modal-md x9f619 x1p5oq8j">
          <div class="modal-header">
            <p class="modal-title x1w7sdjq x1fcty0u">
              <span class="material-symbols-outlined">
                schedule
              </span>
              Remind me
            </p>
          </div>
          <div class="modal-body xdt5ytf xubnuyq xw2csxc x1odjw0f xo6wm36 x1iegka5 xc530u0 x8zx4qv x1gcmwly x17sy6yu xwsakjw x1vz1ssi xxbb1rq xwxc41k">
            <div class="nlp-container">
              <input type="text" name="nplDate" id="nplDate" placeholder="Try: 8 am, 3 days, aug 7" class="npl-input">
              <select class="x1c4vz4f xs83m0k xdl72j9 x1g77sc7 snoozeConditionSelect" name="snoozeCondition">
                <option value="regardless" ${
                  snoozeCondition === "regardless" ? "selected" : ""
                }>Regardless</option>
                <option value="ifNoReply" ${
                  snoozeCondition === "ifNoReply" ? "selected" : ""
                }>If no reply</option>
              </select>
            </div>
            <div class="snooze-options" id="snoozeOptions">
              <div id="npl-suggestions"></div>
              ${lastUsedOptionHTML}
              ${laterTodayOptionHTML}
              <label class="option">
                <span style="flex: 1;">
                  <input type="radio" name="snoozeOption" value="tomorrowMorning">
                  Tomorrow
                </span>
                <span>
                  ${getFormattedTomorrow()}
                </span>
              </label>
              ${inTwoDaysOptionHTML}
              ${inAWeekOptionHTML}
            </div>
          </div>
        </div>
      </div>
      ${
        existingReminder
          ? `
            <div
              class="modal-footer"
            >
              <div class="footer-option">
                <button
                  data-action="remove"
                type="submit"
                class="option"
              >
                Remove Reminder${chat.archived ? " & Move to Inbox" : ""} 
                </button>
              </div>
            </div>
            `
          : ""
      }
    </form>
  `;

  const modal = new _components_modal__WEBPACK_IMPORTED_MODULE_0__["default"]({
    modalContent: snoozeFormContent,
    formHandler: async (formData) => {
      const action = formData.get("formAction");

      if (action == "submit") {
        const snoozeOption = formData.get("snoozeOption");
        snoozeCondition = formData.get("snoozeCondition");
        let snoozeTime;

        if (snoozeOption === "lastUsed" && lastUsedReminder) {
          snoozeTime = Number(lastUsedReminder.until);
        } else if (snoozeOption === "laterToday" && hasLaterTodayOption) {
          snoozeTime = laterTodayTime.getTime();
        } else if (snoozeOption === "tomorrowMorning") {
          const tomorrowMorning = new Date(
            now.getFullYear(),
            now.getMonth(),
            now.getDate() + 1,
            8,
            0,
            0,
            0
          );
          snoozeTime = tomorrowMorning.getTime();
        } else if (snoozeOption === "inTwoDays") {
          const inTwoDays = new Date(
            now.getFullYear(),
            now.getMonth(),
            now.getDate() + 2,
            8,
            0,
            0,
            0
          );
          snoozeTime = inTwoDays.getTime();
        } else if (snoozeOption === "inAWeek") {
          const inAWeek = new Date(
            now.getFullYear(),
            now.getMonth(),
            now.getDate() + 7,
            8,
            0,
            0,
            0
          );
          snoozeTime = inAWeek.getTime();
        } else if (snoozeOption === "npl") {
          const nplFormattedDate = formData.get("formattedDate");
          snoozeTime = new Date(nplFormattedDate).getTime();
        } else {
          alert("Invalid selection. Snooze canceled.");
          return false;
        }

        // Add validation to check if snoozeTime is in the past
        if (snoozeTime <= Date.now()) {
          alert(
            "Cannot set a reminder in the past. Please choose a future time."
          );
          return false;
        }

        // Proceed to request snooze with the chosen timestamp
        (0,_snoozeChat__WEBPACK_IMPORTED_MODULE_2__.requestSnooze)(chat, snoozeTime, snoozeCondition);
      } else if (action == "remove") {
        (0,_unsnoozeChat__WEBPACK_IMPORTED_MODULE_4__.requestUnsnooze)(chat.chatId);
      }

      return true; // Indicates successful handling
    },
    keyHandler: handleArrowKeys, // Pass the custom key handler
  });

  modal.openModal();

  const nplSuggestions = document.getElementById("npl-suggestions");

  // Add event listener for natural language date input
  document
    .getElementById("nplDate")
    .addEventListener("input", function (event) {
      const inputText = event.target.value;
      const parsedDate = chrono_node__WEBPACK_IMPORTED_MODULE_5__.parseDate(inputText, new Date(), {
        forwardDate: true,
      });

      if (parsedDate) {
        const options = {
          weekday: "short",
          year: "numeric",
          month: "short",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        };

        const formattedDate = new Intl.DateTimeFormat("en-US", options).format(
          parsedDate
        );

        // Use date-fns to get the distance to now
        const relativeTime = (0,date_fns__WEBPACK_IMPORTED_MODULE_6__.formatDistanceToNow)(parsedDate, {
          addSuffix: true,
        });

        // Append the parsed date as an option to snooze conditions
        const newOptionHTML = `
        <label class="option">
          <span style="flex: 1;">
            <input type="radio" name="snoozeOption" value="npl">
            <input type="hidden" name="formattedDate" value="${formattedDate}">
            ${relativeTime}
          </span>
          <span>
            ${formattedDate}
          </span>
        </label>
      `;
        nplSuggestions.innerHTML = newOptionHTML;
      } else if (inputText) {
        nplSuggestions.innerHTML = "<label class='option'></label>";
      } else {
        nplSuggestions.innerHTML = "";
      }
    });

  document.getElementById("nplDate").focus();

  const snoozeOptionsContainer = document.getElementById("snoozeForm");

  // Use event delegation to handle clicks on radio buttons
  snoozeOptionsContainer.addEventListener("click", (event) => {
    if (event.target.matches("input[type='radio']")) {
      const form = document.getElementById("snoozeForm");
      const formData = new FormData(form);

      // Determine the action based on the selected option
      const selectedOption = event.target.closest(".option");
      const action =
        selectedOption && selectedOption.dataset.action === "remove"
          ? "remove"
          : "submit";
      formData.set("formAction", action);

      modal.formHandler(formData).then((success) => {
        if (success) {
          modal.closeModal(); // Close the modal on success
        }
      });
    }
  });

  let currentIndex = -1;

  function updateSelection(index) {
    const snoozeOptions = snoozeOptionsContainer.querySelectorAll(".option");
    if (currentIndex >= 0 && currentIndex < snoozeOptions.length) {
      snoozeOptions[currentIndex].classList.remove("selected-option");
      snoozeOptions[currentIndex].querySelector(
        "input[type='radio']"
      ).checked = false;
    }
    currentIndex = index;
    if (currentIndex >= 0 && currentIndex < snoozeOptions.length) {
      snoozeOptions[currentIndex].classList.add("selected-option");
      snoozeOptions[currentIndex].querySelector(
        "input[type='radio']"
      ).checked = true;
    }
  }

  function isVisible(element) {
    return element.offsetParent !== null;
  }

  function findNextVisibleOption(startIndex, direction) {
    const snoozeOptions = snoozeOptionsContainer.querySelectorAll(".option");
    let index = startIndex;
    do {
      index = (index + direction + snoozeOptions.length) % snoozeOptions.length;
    } while (!isVisible(snoozeOptions[index]));
    return index;
  }

  function handleArrowKeys(event) {
    if (event.key === "ArrowDown") {
      const nextIndex = findNextVisibleOption(currentIndex, 1);
      updateSelection(nextIndex);
    } else if (event.key === "ArrowUp") {
      const prevIndex = findNextVisibleOption(currentIndex, -1);
      updateSelection(prevIndex);
    } else if (event.key === "Enter") {
      event.preventDefault(); // Prevent default form submission
      const form = document.getElementById("snoozeForm");
      const formData = new FormData(form);

      // Determine the action based on the selected option
      const selectedOption = form.querySelector(".selected-option");
      const action =
        selectedOption && selectedOption.dataset.action === "remove"
          ? "remove"
          : "submit";
      formData.set("formAction", action);

      modal.formHandler(formData).then((success) => {
        if (success) {
          modal.closeModal(); // Close the modal on success
        }
      });
    }
  }

  // Attach the key handler to the snooze form
  snoozeOptionsContainer.addEventListener("keydown", handleArrowKeys);

  document.getElementById("nplDate").focus();
}


/***/ }),

/***/ "./src/features/snoozed/snoozedChatsDrawer.js":
/*!****************************************************!*\
  !*** ./src/features/snoozed/snoozedChatsDrawer.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   snoozedChatsDrawer: () => (/* binding */ snoozedChatsDrawer)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _whatsappStore_openDrawerLeft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../whatsappStore/openDrawerLeft */ "./src/whatsappStore/openDrawerLeft.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./storage */ "./src/features/snoozed/storage.js");
/* harmony import */ var _whatsappStore_getChatDetails__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../whatsappStore/getChatDetails */ "./src/whatsappStore/getChatDetails.js");
/* harmony import */ var _components_drawer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../components/drawer */ "./src/components/drawer.js");
/* harmony import */ var _components_reminderChatItem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../components/reminderChatItem */ "./src/components/reminderChatItem.js");
/* harmony import */ var _clues__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./clues */ "./src/features/snoozed/clues.js");








function snoozedChatsDrawer() {
  chrome.runtime.sendMessage({
    action: "checkDueAlarms",
  });
  (0,_storage__WEBPACK_IMPORTED_MODULE_2__.loadSnoozedChatsFromStorage)((loadedSnoozedChats) => {
    (0,_clues__WEBPACK_IMPORTED_MODULE_6__.generateSnoozedChatsCSS)(loadedSnoozedChats);
  });

  const chatElements = _storage__WEBPACK_IMPORTED_MODULE_2__.snoozedChats
    ? _storage__WEBPACK_IMPORTED_MODULE_2__.snoozedChats
        .sort((a, b) => a.until - b.until)
        .map((chat) =>
          (0,_components_reminderChatItem__WEBPACK_IMPORTED_MODULE_5__.reminderChatItem)(
            chat.chatId,
            chat.chatUsername,
            `Remind me: ${(0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.formatTimestamp)(chat.until)}`
          )
        )
        .join("")
    : "";

  (0,_whatsappStore_openDrawerLeft__WEBPACK_IMPORTED_MODULE_1__.openDrawerLeft)(
    (0,_components_drawer__WEBPACK_IMPORTED_MODULE_4__.drawer)("Reminders", chatElements),
    `snoozedChats ${_storage__WEBPACK_IMPORTED_MODULE_2__.snoozedChats ? _storage__WEBPACK_IMPORTED_MODULE_2__.snoozedChats.length : 0}`
  );

  // This make a request to WhatsApp through injected scripts
  // asks for chat details and prints to the unloaded chat element.
  if (_storage__WEBPACK_IMPORTED_MODULE_2__.snoozedChats) {
    _storage__WEBPACK_IMPORTED_MODULE_2__.snoozedChats.forEach((chat) => (0,_whatsappStore_getChatDetails__WEBPACK_IMPORTED_MODULE_3__.getChatDetails)(chat.chatId));
  }
}


/***/ }),

/***/ "./src/features/snoozed/storage.js":
/*!*****************************************!*\
  !*** ./src/features/snoozed/storage.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   loadSnoozedChatsFromStorage: () => (/* binding */ loadSnoozedChatsFromStorage),
/* harmony export */   resetSnoozedChatsFromStorage: () => (/* binding */ resetSnoozedChatsFromStorage),
/* harmony export */   saveSnoozedChatsToStorage: () => (/* binding */ saveSnoozedChatsToStorage),
/* harmony export */   setSnoozedChats: () => (/* binding */ setSnoozedChats),
/* harmony export */   snoozedChats: () => (/* binding */ snoozedChats)
/* harmony export */ });
let snoozedChats = [];
function setSnoozedChats(val) {
  snoozedChats = val;
}

// Save snoozedChats to storage
function saveSnoozedChatsToStorage(snoozedChats) {
  chrome.storage.local.set({ snoozedChats: snoozedChats });
}

// Load snoozedChats from storage
function loadSnoozedChatsFromStorage(callback) {
  chrome.storage.local.get(["snoozedChats"], (result) => {
    const loadedSnoozedChats = result.snoozedChats;
    setSnoozedChats(loadedSnoozedChats);
    callback(loadedSnoozedChats);
  });
}

function resetSnoozedChatsFromStorage() {
  chrome.storage.local.set({ snoozedChats: [] });
}


/***/ }),

/***/ "./src/features/snoozed/unsnoozeChat.js":
/*!**********************************************!*\
  !*** ./src/features/snoozed/unsnoozeChat.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   initializeUnsnoozed: () => (/* binding */ initializeUnsnoozed),
/* harmony export */   requestUnsnooze: () => (/* binding */ requestUnsnooze)
/* harmony export */ });
/* harmony import */ var _whatsappStore_customToasts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../whatsappStore/customToasts */ "./src/whatsappStore/customToasts.js");
/* harmony import */ var _whatsappStore_unarchiveChat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../whatsappStore/unarchiveChat */ "./src/whatsappStore/unarchiveChat.js");
/* harmony import */ var _clues__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./clues */ "./src/features/snoozed/clues.js");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./storage */ "./src/features/snoozed/storage.js");





// Function to check and handle due snoozed chats
function checkDueSnoozedChats() {
  chrome.storage.local.get("snoozedChats", function (result) {
    const now = Number(Date.now()); // Get the current time in milliseconds
    const snoozedChats = result.snoozedChats || [];

    snoozedChats.forEach(function (chat) {
      // Check if the chat's snooze time has passed
      if (chat.until <= now) {
        requestUnsnooze(chat.chatId);
      }
    });
  });
}

function initializeUnsnoozed() {
  // Check and handle snoozed chats from local storage
  checkDueSnoozedChats();

  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.action === "chatUnsnoozed") {
      const chatId = message.chatId;
      (0,_whatsappStore_unarchiveChat__WEBPACK_IMPORTED_MODULE_1__.unarchiveChat)(chatId);

      // Remove visual clue of active reminder
      (0,_storage__WEBPACK_IMPORTED_MODULE_3__.loadSnoozedChatsFromStorage)((loadedSnoozedChats) => {
        (0,_clues__WEBPACK_IMPORTED_MODULE_2__.generateSnoozedChatsCSS)(loadedSnoozedChats);
      });

      const snoozedChatsDrawerFocused = document.querySelector(
        `.customNavBarItem.active[data-drawer-id="snoozedChats"]`
      );

      if (snoozedChatsDrawerFocused) {
        const existingReminderElement = document.querySelector(
          `.reminderChatItem[data-chat-id="${chatId}"]`
        );

        if (existingReminderElement) {
          existingReminderElement.remove();
        }
      }

      (0,_whatsappStore_customToasts__WEBPACK_IMPORTED_MODULE_0__.triggerCustomToast)("Reminder removed", "H");
    }
  });

  // Set up listener for UNREAD_COUNT_CHANGE
  window.addEventListener("message", function (event) {
    if (
      event.source === window &&
      event.data &&
      event.data.type === "UNREAD_COUNT_CHANGE"
    ) {
      const { chatId, unreadCount } = event.data;

      if (unreadCount) {
        chrome.storage.local.get("snoozedChats", function (result) {
          const snoozedChats = result.snoozedChats || [];
          if (snoozedChats) {
            const chat = snoozedChats.find(
              (reminder) =>
                reminder.chatId === chatId &&
                reminder.snoozeCondition === "ifNoReply"
            );
            if (chat) {
              requestUnsnooze(chatId);
            }
          }
        });
      }
    }
  });
}

function requestUnsnooze(chatId) {
  chrome.runtime.sendMessage({ action: "unsnoozeChat", chatId: chatId });
}


/***/ }),

/***/ "./src/observers/chatOnHoverObserver.js":
/*!**********************************************!*\
  !*** ./src/observers/chatOnHoverObserver.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chatOnHoverObserver: () => (/* binding */ chatOnHoverObserver)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _whatsappStore_getChatFiberFromDOM__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../whatsappStore/getChatFiberFromDOM */ "./src/whatsappStore/getChatFiberFromDOM.js");



function chatOnHoverEvent(chat, chatElement) {
  // Dispatch a custom event to signal that a chat is being hovered
  const event = new CustomEvent("chatOnHover", {
    detail: { chat: chat, chatElement: chatElement },
  });
  document.dispatchEvent(event);
}

function handleChatHover(event) {
  const chatElement = event.target.closest(
    ".x10l6tqk.xh8yej3.x1g42fcv:not(.reminderChatItem)"
  );

  if (chatElement) {
    const selector = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getUniqueSelector)(chatElement);
    (0,_whatsappStore_getChatFiberFromDOM__WEBPACK_IMPORTED_MODULE_1__.getChatFiberFromDOM)(selector);
  }
}

window.addEventListener("message", (event) => {
  if (event.data.type === "CHAT_FIBER_RESULT") {
    const chatElement = document.querySelector(event.data.selector);
    const chat = event.data.chat;

    // Check if the data attributes are already set and match the current chat
    if (
      chatElement &&
      (chatElement.dataset.chatId !== chat.chatId.toString() ||
        chatElement.dataset.chatUsername !==
          (chat.chatUsername ?? "undefined").toString() ||
        chatElement.dataset.chatPhone !==
          (chat.chatPhone ?? "undefined").toString() ||
        chatElement.dataset.chatArchived !==
          (chat.chatArchived ?? "undefined").toString())
    ) {
      chatElement.dataset.chatId = chat.chatId;
      chatElement.dataset.chatUsername = chat.chatUsername;
      chatElement.dataset.chatPhone = chat.chatPhone;
      chatElement.dataset.chatArchived = chat.chatArchived;

      chatOnHoverEvent(chat, chatElement);
    }
  }
});

function handleActiveChatChange(chatElement) {
  if (chatElement) {
    const selector = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getUniqueSelector)(chatElement);
    (0,_whatsappStore_getChatFiberFromDOM__WEBPACK_IMPORTED_MODULE_1__.getChatFiberFromDOM)(selector);
  }
}

function chatOnHoverObserver() {
  const chatsContainer = (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)('//*[@id="app"]');

  // Add mouseenter event listener to the chats container
  chatsContainer.addEventListener("mouseenter", handleChatHover, true);

  // Observe changes to identify active chats
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (
        mutation.type === "attributes" &&
        mutation.attributeName === "class"
      ) {
        const activeChat = chatsContainer.querySelector(
          ".x10l6tqk.xh8yej3.x1g42fcv:has(._ak72._ak73._ak7p):not(.reminderChatItem)"
        );
        if (activeChat) {
          handleActiveChatChange(activeChat);
        }
      }
    });
  });

  observer.observe(chatsContainer, {
    attributes: true,
    subtree: true,
    attributeFilter: ["class"],
  });
}


/***/ }),

/***/ "./src/utils/domHelpers.js":
/*!*********************************!*\
  !*** ./src/utils/domHelpers.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatTimestamp: () => (/* binding */ formatTimestamp),
/* harmony export */   getElementByXpath: () => (/* binding */ getElementByXpath),
/* harmony export */   getElementCoordinates: () => (/* binding */ getElementCoordinates),
/* harmony export */   getUniqueSelector: () => (/* binding */ getUniqueSelector),
/* harmony export */   hideAllChildren: () => (/* binding */ hideAllChildren),
/* harmony export */   injectScript: () => (/* binding */ injectScript),
/* harmony export */   isUserTyping: () => (/* binding */ isUserTyping),
/* harmony export */   observeAndAct: () => (/* binding */ observeAndAct),
/* harmony export */   removeIfExists: () => (/* binding */ removeIfExists)
/* harmony export */ });
function getElementByXpath(path) {
  return document.evaluate(
    path,
    document,
    null,
    XPathResult.FIRST_ORDERED_NODE_TYPE,
    null
  ).singleNodeValue;
}

function getElementCoordinates(element) {
  const rect = element.getBoundingClientRect();
  const x = rect.left + rect.width / 2;
  const y = rect.top + rect.height / 2;
  return { x, y };
}

function isUserTyping() {
  const activeElement = document.activeElement;
  return (
    activeElement.tagName === "INPUT" ||
    activeElement.tagName === "TEXTAREA" ||
    activeElement.isContentEditable ||
    document.querySelector(".modal")
  );
}

// Function to hide all children of a given element
function hideAllChildren(element) {
  // Loop through each child of the element
  Array.from(element.children).forEach((child) => {
    child.style.display = "none";
  });
}

// Utility function to remove an element if it exists
function removeIfExists(xpath) {
  const element = getElementByXpath(xpath);
  if (element) {
    element.remove();
  }
}

// Function to observe the DOM and perform an action based on XPath when it appears
function observeAndAct(xpath, callback) {
  const observer = new MutationObserver((mutations) => {
    mutations.forEach(() => {
      const element = getElementByXpath(xpath);
      if (element) {
        callback(element);
      }
    });
  });

  // Start observing the entire document for changes
  observer.observe(document.body, {
    childList: true, // Observe direct children
    subtree: true, // Observe all descendants
  });

  // Optionally, disconnect observer once the element is removed (for performance)
  // observer.disconnect();
}

function injectScript(file, callback) {
  const script = document.createElement("script");
  script.src = chrome.runtime.getURL(file);
  script.onload = function () {
    this.remove();
    if (typeof callback === "function") {
      callback();
    }
  };
  (document.head || document.documentElement).appendChild(script);
}

function formatTimestamp(timestamp) {
  const date = new Date(timestamp);
  const currentYear = new Date().getFullYear();
  const formatOptions = {
    weekday: "long", // "Saturday"
    month: "short", // "Aug"
    day: "numeric", // "30"
    hour: "numeric", // "10"
    minute: "2-digit", // "00"
    hour12: true, // for AM/PM format
  };

  // Add year only if it's different from the current year
  if (date.getFullYear() !== currentYear) {
    formatOptions.year = "numeric"; // "2024"
  }

  return date.toLocaleString("en-US", formatOptions);
}

function getUniqueSelector(element) {
  if (!(element instanceof Element)) return;
  const path = [];
  while (element.nodeType === Node.ELEMENT_NODE) {
    let selector = element.nodeName.toLowerCase();
    if (element.id) {
      selector += "#" + element.id;
      path.unshift(selector);
      break;
    } else {
      let sibling = element;
      let nth = 1;
      while ((sibling = sibling.previousElementSibling)) {
        if (sibling.nodeName.toLowerCase() === selector) nth++;
      }
      if (nth !== 1) selector += ":nth-of-type(" + nth + ")";
    }
    path.unshift(selector);
    element = element.parentNode;
  }
  return path.join(" > ");
}


/***/ }),

/***/ "./src/utils/enhanceUi.js":
/*!********************************!*\
  !*** ./src/utils/enhanceUi.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addStartupMessage: () => (/* binding */ addStartupMessage),
/* harmony export */   removeWhatsAppSpam: () => (/* binding */ removeWhatsAppSpam)
/* harmony export */ });
/* harmony import */ var _domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./domHelpers */ "./src/utils/domHelpers.js");


// Remove WhatsApp spam
function removeWhatsAppSpam() {
  (0,_domHelpers__WEBPACK_IMPORTED_MODULE_0__.observeAndAct)(`//*[@id="side"]/div[4]`, (element) => {
    element.remove();
  });
  (0,_domHelpers__WEBPACK_IMPORTED_MODULE_0__.observeAndAct)(
    `//*[@id="app"]/div/div[2]/div[3]/header/header/div/span/div/span/div[3]/span/div/ul/li[7]`,
    (element) => {
      element.remove();
    }
  );
  (0,_domHelpers__WEBPACK_IMPORTED_MODULE_0__.observeAndAct)(
    `//*[@id="app"]/div/div[2]/div[3]/header/header/div/span/div/span/div[3]/span/div/ul/hr`,
    (element) => {
      element.remove();
    }
  );
}

function addStartupMessage() {
  (0,_domHelpers__WEBPACK_IMPORTED_MODULE_0__.observeAndAct)('//*[@id="app"]/div/div[2]/div[4]/div/div', (element) => {
    // Check if the message already exists
    if (!element.querySelector(".start-messaging")) {
      (0,_domHelpers__WEBPACK_IMPORTED_MODULE_0__.getElementByXpath)(`//*[@id="app"]/div/div[2]/div[4]/div/div`).innerHTML =
        "";
      // Create a message element
      const message = document.createElement("div");
      message.innerHTML = `<p>👋 Use <kbd>↑</kbd> and <kbd>↓</kbd> to move between chats.</p>`;
      message.className = "start-messaging";

      // Append the message to the target element
      element.appendChild(message);
    }
  });
}


/***/ }),

/***/ "./src/utils/eventHelpers.js":
/*!***********************************!*\
  !*** ./src/utils/eventHelpers.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   simulateKeyPress: () => (/* binding */ simulateKeyPress),
/* harmony export */   triggerNativeShortcut: () => (/* binding */ triggerNativeShortcut)
/* harmony export */ });
function simulateKeyPress(element, key) {
  const keyboardEvent = new KeyboardEvent("keydown", {
    key: key,
    code: key,
    keyCode: key,
    which: key,
    bubbles: true,
    cancelable: true,
  });
  element.dispatchEvent(keyboardEvent);
}

function triggerNativeShortcut(keys) {
  const event = new KeyboardEvent("keydown", {
    bubbles: true,
    cancelable: true,
    key: keys.key,
    code: keys.code,
    location: KeyboardEvent.DOM_KEY_LOCATION_STANDARD,
    ctrlKey: keys.ctrlKey,
    altKey: keys.altKey,
    shiftKey: keys.shiftKey,
    metaKey: keys.metaKey,
  });
  document.dispatchEvent(event);
}


/***/ }),

/***/ "./src/whatsappStore/archiveChat.js":
/*!******************************************!*\
  !*** ./src/whatsappStore/archiveChat.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   archiveChat: () => (/* binding */ archiveChat),
/* harmony export */   archiveChatListener: () => (/* binding */ archiveChatListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function archiveChatListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/archiveChat.js");
}

function archiveChat(chatId) {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "ARCHIVE_CHAT", chatId: chatId }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/archiveChatEventListener.js":
/*!*******************************************************!*\
  !*** ./src/whatsappStore/archiveChatEventListener.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   archiveChatEventListener: () => (/* binding */ archiveChatEventListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function archiveChatEventListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/archiveChatEventListener.js");
}


/***/ }),

/***/ "./src/whatsappStore/chatEventEmitter.js":
/*!***********************************************!*\
  !*** ./src/whatsappStore/chatEventEmitter.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chatEventEmitter: () => (/* binding */ chatEventEmitter)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function chatEventEmitter() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/chatEventEmitter.js");
}


/***/ }),

/***/ "./src/whatsappStore/chatsSync.js":
/*!****************************************!*\
  !*** ./src/whatsappStore/chatsSync.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chatsSync: () => (/* binding */ chatsSync)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function chatsSync() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/chatsSync.js");
}


/***/ }),

/***/ "./src/whatsappStore/composeBoxEmitter.js":
/*!************************************************!*\
  !*** ./src/whatsappStore/composeBoxEmitter.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   composeBoxEmitter: () => (/* binding */ composeBoxEmitter)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function composeBoxEmitter() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/composeBoxEmitter.js");
}


/***/ }),

/***/ "./src/whatsappStore/composeFocus.js":
/*!*******************************************!*\
  !*** ./src/whatsappStore/composeFocus.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   composeFocusListener: () => (/* binding */ composeFocusListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function composeFocusListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/composeFocus.js");
}


/***/ }),

/***/ "./src/whatsappStore/customToasts.js":
/*!*******************************************!*\
  !*** ./src/whatsappStore/customToasts.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   customToasts: () => (/* binding */ customToasts),
/* harmony export */   triggerCustomToast: () => (/* binding */ triggerCustomToast)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function customToasts() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/customToasts.js");
}

function triggerCustomToast(msg, shortcut) {
  window.postMessage({ type: "TRIGGER_CUSTOM_TOAST", msg, shortcut }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/filterChats.js":
/*!******************************************!*\
  !*** ./src/whatsappStore/filterChats.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   filterChats: () => (/* binding */ filterChats),
/* harmony export */   filterChatsListener: () => (/* binding */ filterChatsListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function filterChatsListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/filterChats.js");
}

function filterChats(chats) {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "FILTER_CHATS", chats: chats }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/focusLastMessage.js":
/*!***********************************************!*\
  !*** ./src/whatsappStore/focusLastMessage.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   focusLastMessage: () => (/* binding */ focusLastMessage),
/* harmony export */   focusLastMessageListener: () => (/* binding */ focusLastMessageListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function focusLastMessageListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/focusLastMessage.js");
}

function focusLastMessage() {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "FOCUS_LAST_MESSAGE" }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/focusNextChat.js":
/*!********************************************!*\
  !*** ./src/whatsappStore/focusNextChat.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   focusNextChat: () => (/* binding */ focusNextChat),
/* harmony export */   focusNextChatListener: () => (/* binding */ focusNextChatListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function focusNextChatListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/focusNextChat.js");
}

function focusNextChat() {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "FOCUS_NEXT_CHAT" }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/focusPreviousChat.js":
/*!************************************************!*\
  !*** ./src/whatsappStore/focusPreviousChat.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   focusPreviousChat: () => (/* binding */ focusPreviousChat),
/* harmony export */   focusPreviousChatListener: () => (/* binding */ focusPreviousChatListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function focusPreviousChatListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/focusPreviousChat.js");
}

function focusPreviousChat() {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "FOCUS_PREVIOUS_CHAT" }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/forwardFilterHandler.js":
/*!***************************************************!*\
  !*** ./src/whatsappStore/forwardFilterHandler.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   forwardFilterHandlerListener: () => (/* binding */ forwardFilterHandlerListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function forwardFilterHandlerListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/forwardFilterHandler.js");
}


/***/ }),

/***/ "./src/whatsappStore/getChatDetails.js":
/*!*********************************************!*\
  !*** ./src/whatsappStore/getChatDetails.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getChatDetails: () => (/* binding */ getChatDetails),
/* harmony export */   getChatDetailsListener: () => (/* binding */ getChatDetailsListener)
/* harmony export */ });
/* harmony import */ var _features_snoozed_snoozeForm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/snoozed/snoozeForm */ "./src/features/snoozed/snoozeForm.js");
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");



function getChatDetailsListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__.injectScript)("src/whatsappStore/scripts/getChatDetails.js");

  // Listen for the response from the injected script
  window.addEventListener("message", (event) => {
    if (
      event.data &&
      event.data.type === "CHAT_DETAILS_RESPONSE" &&
      event.data.chat
    ) {
      const { chatId, userName, lastMsg, profilePic, archived } =
        event.data.chat;
      const chatContainer = document.querySelector(
        `.unloadedChat[data-chat-id="${chatId}"]`
      );

      if (profilePic) {
        chatContainer.querySelector(".profilePic").innerHTML = `
          <img
            alt=""
            draggable="false"
            class="x1n2onr6 x1lliihq xh8yej3 x5yr21d x6ikm8r x10wlt62 x14yjl9h xudhj91 x18nykt9 xww2gxu xl1xv1r x115dhu7 x17vty23 x1hc1fzr _ao3e"
            tabindex="-1"
            src=${profilePic}
            style="visibility: visible"
          />
        `;
      }

      if (userName) {
        chatContainer.querySelector(".userName").innerHTML = userName;
      }

      if (lastMsg) {
        chatContainer.querySelector(".lastMsg").innerHTML = lastMsg;
      }

      // Attach event listeners to the reminder buttons
      chatContainer
        .querySelector(".reminderBtn")
        .addEventListener("click", () => {
          (0,_features_snoozed_snoozeForm__WEBPACK_IMPORTED_MODULE_0__.snoozeForm)({
            chatId: chatId,
            chatUsername: userName,
            archived: archived,
          });
        });
    }
  });
}

function getChatDetails(chatId) {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "GET_CHAT_DETAILS", chatId: chatId }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/getChatFiberFromDOM.js":
/*!**************************************************!*\
  !*** ./src/whatsappStore/getChatFiberFromDOM.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getChatFiberFromDOM: () => (/* binding */ getChatFiberFromDOM),
/* harmony export */   getChatFiberFromDOMListener: () => (/* binding */ getChatFiberFromDOMListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function getChatFiberFromDOMListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/getChatFiberFromDOM.js");
}

function getChatFiberFromDOM(selector) {
  window.postMessage({ type: "GET_CHAT_FIBER", selector }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/markChatDone.js":
/*!*******************************************!*\
  !*** ./src/whatsappStore/markChatDone.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   markChatDone: () => (/* binding */ markChatDone),
/* harmony export */   markChatDoneListener: () => (/* binding */ markChatDoneListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function markChatDoneListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/markChatDone.js");
}

function markChatDone(chatId) {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "MARK_CHAT_DONE", chatId: chatId }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/messagesListener.js":
/*!***********************************************!*\
  !*** ./src/whatsappStore/messagesListener.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   messagesListener: () => (/* binding */ messagesListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function messagesListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/messagesListener.js");
}

/***/ }),

/***/ "./src/whatsappStore/openArchivedChatsDrawer.js":
/*!******************************************************!*\
  !*** ./src/whatsappStore/openArchivedChatsDrawer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   openArchivedChatsDrawer: () => (/* binding */ openArchivedChatsDrawer),
/* harmony export */   openArchivedChatsDrawerListener: () => (/* binding */ openArchivedChatsDrawerListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function openArchivedChatsDrawerListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/openArchivedChatsDrawer.js");
}

function openArchivedChatsDrawer() {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "OPEN_ARCHIVED_CHATS_DRAWER" }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/openContextMenu.js":
/*!**********************************************!*\
  !*** ./src/whatsappStore/openContextMenu.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   openContextMenuListener: () => (/* binding */ openContextMenuListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function openContextMenuListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/openContextMenu.js");
}


/***/ }),

/***/ "./src/whatsappStore/openDrawerLeft.js":
/*!*********************************************!*\
  !*** ./src/whatsappStore/openDrawerLeft.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   openDrawerLeft: () => (/* binding */ openDrawerLeft),
/* harmony export */   openDrawerLeftListener: () => (/* binding */ openDrawerLeftListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function openDrawerLeftListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/openDrawerLeft.js");
}

function openDrawerLeft(drawer, drawerId) {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage(
    { type: "OPEN_DRAWER_LEFT", drawer: drawer, drawerId: drawerId },
    "*",
  );
}


/***/ }),

/***/ "./src/whatsappStore/requestMoveToForm.js":
/*!************************************************!*\
  !*** ./src/whatsappStore/requestMoveToForm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   requestMoveToForm: () => (/* binding */ requestMoveToForm),
/* harmony export */   requestMoveToFormListener: () => (/* binding */ requestMoveToFormListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function requestMoveToFormListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/requestMoveToForm.js");
}

function requestMoveToForm() {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "REQUEST_MOVE_TO_FORM" }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/requestSnoozeForm.js":
/*!************************************************!*\
  !*** ./src/whatsappStore/requestSnoozeForm.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   requestSnoozeForm: () => (/* binding */ requestSnoozeForm),
/* harmony export */   requestSnoozeFormListener: () => (/* binding */ requestSnoozeFormListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function requestSnoozeFormListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/requestSnoozeForm.js");
}

function requestSnoozeForm() {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "REQUEST_SNOOZE_FORM" }, "*");
}


/***/ }),

/***/ "./src/whatsappStore/unarchiveChat.js":
/*!********************************************!*\
  !*** ./src/whatsappStore/unarchiveChat.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   unarchiveChat: () => (/* binding */ unarchiveChat),
/* harmony export */   unarchiveChatListener: () => (/* binding */ unarchiveChatListener)
/* harmony export */ });
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/domHelpers */ "./src/utils/domHelpers.js");


function unarchiveChatListener() {
  (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_0__.injectScript)("src/whatsappStore/scripts/unarchiveChat.js");
}

function unarchiveChat(chatId) {
  // After injecting the script, send the chat ID using postMessage
  window.postMessage({ type: "UNARCHIVE_CHAT", chatId: chatId }, "*");
}


/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/calculation/mergingCalculation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/calculation/mergingCalculation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   mergeDateTimeComponent: () => (/* binding */ mergeDateTimeComponent),
/* harmony export */   mergeDateTimeResult: () => (/* binding */ mergeDateTimeResult)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");


function mergeDateTimeResult(dateResult, timeResult) {
    const result = dateResult.clone();
    const beginDate = dateResult.start;
    const beginTime = timeResult.start;
    result.start = mergeDateTimeComponent(beginDate, beginTime);
    if (dateResult.end != null || timeResult.end != null) {
        const endDate = dateResult.end == null ? dateResult.start : dateResult.end;
        const endTime = timeResult.end == null ? timeResult.start : timeResult.end;
        const endDateTime = mergeDateTimeComponent(endDate, endTime);
        if (dateResult.end == null && endDateTime.date().getTime() < result.start.date().getTime()) {
            const nextDayJs = endDateTime.dayjs().add(1, "day");
            if (endDateTime.isCertain("day")) {
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_0__.assignSimilarDate)(endDateTime, nextDayJs);
            }
            else {
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_0__.implySimilarDate)(endDateTime, nextDayJs);
            }
        }
        result.end = endDateTime;
    }
    return result;
}
function mergeDateTimeComponent(dateComponent, timeComponent) {
    const dateTimeComponent = dateComponent.clone();
    if (timeComponent.isCertain("hour")) {
        dateTimeComponent.assign("hour", timeComponent.get("hour"));
        dateTimeComponent.assign("minute", timeComponent.get("minute"));
        if (timeComponent.isCertain("second")) {
            dateTimeComponent.assign("second", timeComponent.get("second"));
            if (timeComponent.isCertain("millisecond")) {
                dateTimeComponent.assign("millisecond", timeComponent.get("millisecond"));
            }
            else {
                dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
            }
        }
        else {
            dateTimeComponent.imply("second", timeComponent.get("second"));
            dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
        }
    }
    else {
        dateTimeComponent.imply("hour", timeComponent.get("hour"));
        dateTimeComponent.imply("minute", timeComponent.get("minute"));
        dateTimeComponent.imply("second", timeComponent.get("second"));
        dateTimeComponent.imply("millisecond", timeComponent.get("millisecond"));
    }
    if (timeComponent.isCertain("timezoneOffset")) {
        dateTimeComponent.assign("timezoneOffset", timeComponent.get("timezoneOffset"));
    }
    if (timeComponent.isCertain("meridiem")) {
        dateTimeComponent.assign("meridiem", timeComponent.get("meridiem"));
    }
    else if (timeComponent.get("meridiem") != null && dateTimeComponent.get("meridiem") == null) {
        dateTimeComponent.imply("meridiem", timeComponent.get("meridiem"));
    }
    if (dateTimeComponent.get("meridiem") == _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.PM && dateTimeComponent.get("hour") < 12) {
        if (timeComponent.isCertain("hour")) {
            dateTimeComponent.assign("hour", dateTimeComponent.get("hour") + 12);
        }
        else {
            dateTimeComponent.imply("hour", dateTimeComponent.get("hour") + 12);
        }
    }
    dateTimeComponent.addTags(dateComponent.tags());
    dateTimeComponent.addTags(timeComponent.tags());
    return dateTimeComponent;
}
//# sourceMappingURL=mergingCalculation.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/calculation/years.js":
/*!****************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/calculation/years.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findMostLikelyADYear: () => (/* binding */ findMostLikelyADYear),
/* harmony export */   findYearClosestToRef: () => (/* binding */ findYearClosestToRef)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");

function findMostLikelyADYear(yearNumber) {
    if (yearNumber < 100) {
        if (yearNumber > 50) {
            yearNumber = yearNumber + 1900;
        }
        else {
            yearNumber = yearNumber + 2000;
        }
    }
    return yearNumber;
}
function findYearClosestToRef(refDate, day, month) {
    const refMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(refDate);
    let dateMoment = refMoment;
    dateMoment = dateMoment.month(month - 1);
    dateMoment = dateMoment.date(day);
    dateMoment = dateMoment.year(refMoment.year());
    const nextYear = dateMoment.add(1, "y");
    const lastYear = dateMoment.add(-1, "y");
    if (Math.abs(nextYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {
        dateMoment = nextYear;
    }
    else if (Math.abs(lastYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {
        dateMoment = lastYear;
    }
    return dateMoment.year();
}
//# sourceMappingURL=years.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/chrono.js":
/*!*****************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/chrono.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* binding */ Chrono),
/* harmony export */   ParsingContext: () => (/* binding */ ParsingContext)
/* harmony export */ });
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _locales_en_configuration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales/en/configuration.js */ "./node_modules/chrono-node/dist/esm/locales/en/configuration.js");


class Chrono {
    constructor(configuration) {
        this.defaultConfig = new _locales_en_configuration_js__WEBPACK_IMPORTED_MODULE_0__["default"]();
        configuration = configuration || this.defaultConfig.createCasualConfiguration();
        this.parsers = [...configuration.parsers];
        this.refiners = [...configuration.refiners];
    }
    clone() {
        return new Chrono({
            parsers: [...this.parsers],
            refiners: [...this.refiners],
        });
    }
    parseDate(text, referenceDate, option) {
        const results = this.parse(text, referenceDate, option);
        return results.length > 0 ? results[0].start.date() : null;
    }
    parse(text, referenceDate, option) {
        const context = new ParsingContext(text, referenceDate, option);
        let results = [];
        this.parsers.forEach((parser) => {
            const parsedResults = Chrono.executeParser(context, parser);
            results = results.concat(parsedResults);
        });
        results.sort((a, b) => {
            return a.index - b.index;
        });
        this.refiners.forEach(function (refiner) {
            results = refiner.refine(context, results);
        });
        return results;
    }
    static executeParser(context, parser) {
        const results = [];
        const pattern = parser.pattern(context);
        const originalText = context.text;
        let remainingText = context.text;
        let match = pattern.exec(remainingText);
        while (match) {
            const index = match.index + originalText.length - remainingText.length;
            match.index = index;
            const result = parser.extract(context, match);
            if (!result) {
                remainingText = originalText.substring(match.index + 1);
                match = pattern.exec(remainingText);
                continue;
            }
            let parsedResult = null;
            if (result instanceof _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult) {
                parsedResult = result;
            }
            else if (result instanceof _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents) {
                parsedResult = context.createParsingResult(match.index, match[0]);
                parsedResult.start = result;
            }
            else {
                parsedResult = context.createParsingResult(match.index, match[0], result);
            }
            const parsedIndex = parsedResult.index;
            const parsedText = parsedResult.text;
            context.debug(() => console.log(`${parser.constructor.name} extracted (at index=${parsedIndex}) '${parsedText}'`));
            results.push(parsedResult);
            remainingText = originalText.substring(parsedIndex + parsedText.length);
            match = pattern.exec(remainingText);
        }
        return results;
    }
}
class ParsingContext {
    constructor(text, refDate, option) {
        this.text = text;
        this.reference = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone(refDate);
        this.option = option ?? {};
        this.refDate = this.reference.instant;
    }
    createParsingComponents(components) {
        if (components instanceof _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents) {
            return components;
        }
        return new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(this.reference, components);
    }
    createParsingResult(index, textOrEndIndex, startComponents, endComponents) {
        const text = typeof textOrEndIndex === "string" ? textOrEndIndex : this.text.substring(index, textOrEndIndex);
        const start = startComponents ? this.createParsingComponents(startComponents) : null;
        const end = endComponents ? this.createParsingComponents(endComponents) : null;
        return new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult(this.reference, index, text, start, end);
    }
    debug(block) {
        if (this.option.debug) {
            if (this.option.debug instanceof Function) {
                this.option.debug(block);
            }
            else {
                const handler = this.option.debug;
                handler.debug(block);
            }
        }
    }
}
//# sourceMappingURL=chrono.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/abstractRefiners.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/abstractRefiners.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Filter: () => (/* binding */ Filter),
/* harmony export */   MergingRefiner: () => (/* binding */ MergingRefiner)
/* harmony export */ });
class Filter {
    refine(context, results) {
        return results.filter((r) => this.isValid(context, r));
    }
}
class MergingRefiner {
    refine(context, results) {
        if (results.length < 2) {
            return results;
        }
        const mergedResults = [];
        let curResult = results[0];
        let nextResult = null;
        for (let i = 1; i < results.length; i++) {
            nextResult = results[i];
            const textBetween = context.text.substring(curResult.index + curResult.text.length, nextResult.index);
            if (!this.shouldMergeResults(textBetween, curResult, nextResult, context)) {
                mergedResults.push(curResult);
                curResult = nextResult;
            }
            else {
                const left = curResult;
                const right = nextResult;
                const mergedResult = this.mergeResults(textBetween, left, right, context);
                context.debug(() => {
                    console.log(`${this.constructor.name} merged ${left} and ${right} into ${mergedResult}`);
                });
                curResult = mergedResult;
            }
        }
        if (curResult != null) {
            mergedResults.push(curResult);
        }
        return mergedResults;
    }
}
//# sourceMappingURL=abstractRefiners.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js":
/*!**************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createParsingComponentsAtWeekday: () => (/* binding */ createParsingComponentsAtWeekday),
/* harmony export */   getBackwardDaysToWeekday: () => (/* binding */ getBackwardDaysToWeekday),
/* harmony export */   getDaysForwardToWeekday: () => (/* binding */ getDaysForwardToWeekday),
/* harmony export */   getDaysToWeekday: () => (/* binding */ getDaysToWeekday),
/* harmony export */   getDaysToWeekdayClosest: () => (/* binding */ getDaysToWeekdayClosest)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");



function createParsingComponentsAtWeekday(reference, weekday, modifier) {
    const refDate = reference.getDateWithAdjustedTimezone();
    const daysToWeekday = getDaysToWeekday(refDate, weekday, modifier);
    let components = new _results_js__WEBPACK_IMPORTED_MODULE_0__.ParsingComponents(reference);
    components = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_1__.addImpliedTimeUnits)(components, { "day": daysToWeekday });
    components.assign("weekday", weekday);
    return components;
}
function getDaysToWeekday(refDate, weekday, modifier) {
    const refWeekday = refDate.getDay();
    switch (modifier) {
        case "this":
            return getDaysForwardToWeekday(refDate, weekday);
        case "last":
            return getBackwardDaysToWeekday(refDate, weekday);
        case "next":
            if (refWeekday == _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday.SUNDAY) {
                return weekday == _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday.SUNDAY ? 7 : weekday;
            }
            if (refWeekday == _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday.SATURDAY) {
                if (weekday == _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday.SATURDAY)
                    return 7;
                if (weekday == _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday.SUNDAY)
                    return 8;
                return 1 + weekday;
            }
            if (weekday < refWeekday && weekday != _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday.SUNDAY) {
                return getDaysForwardToWeekday(refDate, weekday);
            }
            else {
                return getDaysForwardToWeekday(refDate, weekday) + 7;
            }
    }
    return getDaysToWeekdayClosest(refDate, weekday);
}
function getDaysToWeekdayClosest(refDate, weekday) {
    const backward = getBackwardDaysToWeekday(refDate, weekday);
    const forward = getDaysForwardToWeekday(refDate, weekday);
    return forward < -backward ? forward : backward;
}
function getDaysForwardToWeekday(refDate, weekday) {
    const refWeekday = refDate.getDay();
    let forwardCount = weekday - refWeekday;
    if (forwardCount < 0) {
        forwardCount += 7;
    }
    return forwardCount;
}
function getBackwardDaysToWeekday(refDate, weekday) {
    const refWeekday = refDate.getDay();
    let backwardCount = weekday - refWeekday;
    if (backwardCount >= 0) {
        backwardCount -= 7;
    }
    return backwardCount;
}
//# sourceMappingURL=weekdays.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/casualReferences.js":
/*!**********************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/casualReferences.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   afternoon: () => (/* binding */ afternoon),
/* harmony export */   evening: () => (/* binding */ evening),
/* harmony export */   lastNight: () => (/* binding */ lastNight),
/* harmony export */   midnight: () => (/* binding */ midnight),
/* harmony export */   morning: () => (/* binding */ morning),
/* harmony export */   noon: () => (/* binding */ noon),
/* harmony export */   now: () => (/* binding */ now),
/* harmony export */   theDayAfter: () => (/* binding */ theDayAfter),
/* harmony export */   theDayBefore: () => (/* binding */ theDayBefore),
/* harmony export */   today: () => (/* binding */ today),
/* harmony export */   tomorrow: () => (/* binding */ tomorrow),
/* harmony export */   tonight: () => (/* binding */ tonight),
/* harmony export */   yesterday: () => (/* binding */ yesterday),
/* harmony export */   yesterdayEvening: () => (/* binding */ yesterdayEvening)
/* harmony export */ });
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types.js */ "./node_modules/chrono-node/dist/esm/types.js");




function now(reference) {
    const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(reference.instant);
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarDate)(component, targetDate);
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarTime)(component, targetDate);
    if (reference.timezoneOffset !== null) {
        component.assign("timezoneOffset", targetDate.utcOffset());
    }
    component.addTag("casualReference/now");
    return component;
}
function today(reference) {
    const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(reference.instant);
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarDate)(component, targetDate);
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.implySimilarTime)(component, targetDate);
    component.addTag("casualReference/today");
    return component;
}
function yesterday(reference) {
    return theDayBefore(reference, 1).addTag("casualReference/yesterday");
}
function theDayBefore(reference, numDay) {
    return theDayAfter(reference, -numDay);
}
function tomorrow(reference) {
    return theDayAfter(reference, 1).addTag("casualReference/tomorrow");
}
function theDayAfter(reference, nDays) {
    let targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(reference.instant);
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    targetDate = targetDate.add(nDays, "day");
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarDate)(component, targetDate);
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.implySimilarTime)(component, targetDate);
    return component;
}
function tonight(reference, implyHour = 22) {
    const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(reference.instant);
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarDate)(component, targetDate);
    component.imply("hour", implyHour);
    component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
    component.addTag("casualReference/tonight");
    return component;
}
function lastNight(reference, implyHour = 0) {
    let targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(reference.instant);
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    if (targetDate.hour() < 6) {
        targetDate = targetDate.add(-1, "day");
    }
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarDate)(component, targetDate);
    component.imply("hour", implyHour);
    return component;
}
function evening(reference, implyHour = 20) {
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
    component.imply("hour", implyHour);
    component.addTag("casualReference/evening");
    return component;
}
function yesterdayEvening(reference, implyHour = 20) {
    let targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(reference.instant);
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    targetDate = targetDate.add(-1, "day");
    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarDate)(component, targetDate);
    component.imply("hour", implyHour);
    component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
    component.addTag("casualReference/yesterday");
    component.addTag("casualReference/evening");
    return component;
}
function midnight(reference) {
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(reference.instant);
    if (targetDate.hour() > 2) {
        (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.implyTheNextDay)(component, targetDate);
    }
    component.assign("hour", 0);
    component.imply("minute", 0);
    component.imply("second", 0);
    component.imply("millisecond", 0);
    component.addTag("casualReference/midnight");
    return component;
}
function morning(reference, implyHour = 6) {
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.AM);
    component.imply("hour", implyHour);
    component.imply("minute", 0);
    component.imply("second", 0);
    component.imply("millisecond", 0);
    component.addTag("casualReference/morning");
    return component;
}
function afternoon(reference, implyHour = 15) {
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
    component.imply("hour", implyHour);
    component.imply("minute", 0);
    component.imply("second", 0);
    component.imply("millisecond", 0);
    component.addTag("casualReference/afternoon");
    return component;
}
function noon(reference) {
    const component = new _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents(reference, {});
    component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.AM);
    component.imply("hour", 12);
    component.imply("minute", 0);
    component.imply("second", 0);
    component.imply("millisecond", 0);
    component.addTag("casualReference/noon");
    return component;
}
//# sourceMappingURL=casualReferences.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractParserWithWordBoundaryChecking: () => (/* binding */ AbstractParserWithWordBoundaryChecking)
/* harmony export */ });
class AbstractParserWithWordBoundaryChecking {
    constructor() {
        this.cachedInnerPattern = null;
        this.cachedPattern = null;
    }
    innerPatternHasChange(context, currentInnerPattern) {
        return this.innerPattern(context) !== currentInnerPattern;
    }
    patternLeftBoundary() {
        return `(\\W|^)`;
    }
    pattern(context) {
        if (this.cachedInnerPattern) {
            if (!this.innerPatternHasChange(context, this.cachedInnerPattern)) {
                return this.cachedPattern;
            }
        }
        this.cachedInnerPattern = this.innerPattern(context);
        this.cachedPattern = new RegExp(`${this.patternLeftBoundary()}${this.cachedInnerPattern.source}`, this.cachedInnerPattern.flags);
        return this.cachedPattern;
    }
    extract(context, match) {
        const header = match[1] ?? "";
        match.index = match.index + header.length;
        match[0] = match[0].substring(header.length);
        for (let i = 2; i < match.length; i++) {
            match[i - 1] = match[i];
        }
        return this.innerExtract(context, match);
    }
}
//# sourceMappingURL=AbstractParserWithWordBoundary.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractTimeExpressionParser: () => (/* binding */ AbstractTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");

function primaryTimePattern(leftBoundary, primaryPrefix, primarySuffix, flags) {
    return new RegExp(`${leftBoundary}` +
        `${primaryPrefix}` +
        `(\\d{1,4})` +
        `(?:` +
        `(?:\\.|:|：)` +
        `(\\d{1,2})` +
        `(?:` +
        `(?::|：)` +
        `(\\d{2})` +
        `(?:\\.(\\d{1,6}))?` +
        `)?` +
        `)?` +
        `(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?))?` +
        `${primarySuffix}`, flags);
}
function followingTimePatten(followingPhase, followingSuffix) {
    return new RegExp(`^(${followingPhase})` +
        `(\\d{1,4})` +
        `(?:` +
        `(?:\\.|\\:|\\：)` +
        `(\\d{1,2})` +
        `(?:` +
        `(?:\\.|\\:|\\：)` +
        `(\\d{1,2})(?:\\.(\\d{1,6}))?` +
        `)?` +
        `)?` +
        `(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?))?` +
        `${followingSuffix}`, "i");
}
const HOUR_GROUP = 2;
const MINUTE_GROUP = 3;
const SECOND_GROUP = 4;
const MILLI_SECOND_GROUP = 5;
const AM_PM_HOUR_GROUP = 6;
class AbstractTimeExpressionParser {
    constructor(strictMode = false) {
        this.cachedPrimaryPrefix = null;
        this.cachedPrimarySuffix = null;
        this.cachedPrimaryTimePattern = null;
        this.cachedFollowingPhase = null;
        this.cachedFollowingSuffix = null;
        this.cachedFollowingTimePatten = null;
        this.strictMode = strictMode;
    }
    patternFlags() {
        return "i";
    }
    primaryPatternLeftBoundary() {
        return `(^|\\s|T|\\b)`;
    }
    primarySuffix() {
        return `(?!/)(?=\\W|$)`;
    }
    followingSuffix() {
        return `(?!/)(?=\\W|$)`;
    }
    pattern(context) {
        return this.getPrimaryTimePatternThroughCache();
    }
    extract(context, match) {
        const startComponents = this.extractPrimaryTimeComponents(context, match);
        if (!startComponents) {
            if (match[0].match(/^\d{4}/)) {
                match.index += 4;
                return null;
            }
            match.index += match[0].length;
            return null;
        }
        const index = match.index + match[1].length;
        const text = match[0].substring(match[1].length);
        const result = context.createParsingResult(index, text, startComponents);
        match.index += match[0].length;
        const remainingText = context.text.substring(match.index);
        const followingPattern = this.getFollowingTimePatternThroughCache();
        const followingMatch = followingPattern.exec(remainingText);
        if (text.match(/^\d{3,4}/) && followingMatch) {
            if (followingMatch[0].match(/^\s*([+-])\s*\d{2,4}$/)) {
                return null;
            }
            if (followingMatch[0].match(/^\s*([+-])\s*\d{2}\W\d{2}/)) {
                return null;
            }
        }
        if (!followingMatch ||
            followingMatch[0].match(/^\s*([+-])\s*\d{3,4}$/)) {
            return this.checkAndReturnWithoutFollowingPattern(result);
        }
        result.end = this.extractFollowingTimeComponents(context, followingMatch, result);
        if (result.end) {
            result.text += followingMatch[0];
        }
        return this.checkAndReturnWithFollowingPattern(result);
    }
    extractPrimaryTimeComponents(context, match, strict = false) {
        const components = context.createParsingComponents();
        let minute = 0;
        let meridiem = null;
        let hour = parseInt(match[HOUR_GROUP]);
        if (hour > 100) {
            if (this.strictMode || match[MINUTE_GROUP] != null) {
                return null;
            }
            minute = hour % 100;
            hour = Math.floor(hour / 100);
        }
        if (hour > 24) {
            return null;
        }
        if (match[MINUTE_GROUP] != null) {
            if (match[MINUTE_GROUP].length == 1 && !match[AM_PM_HOUR_GROUP]) {
                return null;
            }
            minute = parseInt(match[MINUTE_GROUP]);
        }
        if (minute >= 60) {
            return null;
        }
        if (hour > 12) {
            meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
            if (hour > 12)
                return null;
            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM;
                if (hour == 12) {
                    hour = 0;
                }
            }
            if (ampm == "p") {
                meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
                if (hour != 12) {
                    hour += 12;
                }
            }
        }
        components.assign("hour", hour);
        components.assign("minute", minute);
        if (meridiem !== null) {
            components.assign("meridiem", meridiem);
        }
        else {
            if (hour < 12) {
                components.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM);
            }
            else {
                components.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM);
            }
        }
        if (match[MILLI_SECOND_GROUP] != null) {
            const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));
            if (millisecond >= 1000)
                return null;
            components.assign("millisecond", millisecond);
        }
        if (match[SECOND_GROUP] != null) {
            const second = parseInt(match[SECOND_GROUP]);
            if (second >= 60)
                return null;
            components.assign("second", second);
        }
        return components;
    }
    extractFollowingTimeComponents(context, match, result) {
        const components = context.createParsingComponents();
        if (match[MILLI_SECOND_GROUP] != null) {
            const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));
            if (millisecond >= 1000)
                return null;
            components.assign("millisecond", millisecond);
        }
        if (match[SECOND_GROUP] != null) {
            const second = parseInt(match[SECOND_GROUP]);
            if (second >= 60)
                return null;
            components.assign("second", second);
        }
        let hour = parseInt(match[HOUR_GROUP]);
        let minute = 0;
        let meridiem = -1;
        if (match[MINUTE_GROUP] != null) {
            minute = parseInt(match[MINUTE_GROUP]);
        }
        else if (hour > 100) {
            minute = hour % 100;
            hour = Math.floor(hour / 100);
        }
        if (minute >= 60 || hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
            if (hour > 12) {
                return null;
            }
            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM;
                if (hour == 12) {
                    hour = 0;
                    if (!components.isCertain("day")) {
                        components.imply("day", components.get("day") + 1);
                    }
                }
            }
            if (ampm == "p") {
                meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
                if (hour != 12)
                    hour += 12;
            }
            if (!result.start.isCertain("meridiem")) {
                if (meridiem == _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM) {
                    result.start.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM);
                    if (result.start.get("hour") == 12) {
                        result.start.assign("hour", 0);
                    }
                }
                else {
                    result.start.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM);
                    if (result.start.get("hour") != 12) {
                        result.start.assign("hour", result.start.get("hour") + 12);
                    }
                }
            }
        }
        components.assign("hour", hour);
        components.assign("minute", minute);
        if (meridiem >= 0) {
            components.assign("meridiem", meridiem);
        }
        else {
            const startAtPM = result.start.isCertain("meridiem") && result.start.get("hour") > 12;
            if (startAtPM) {
                if (result.start.get("hour") - 12 > hour) {
                    components.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM);
                }
                else if (hour <= 12) {
                    components.assign("hour", hour + 12);
                    components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM);
                }
            }
            else if (hour > 12) {
                components.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM);
            }
            else if (hour <= 12) {
                components.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM);
            }
        }
        if (components.date().getTime() < result.start.date().getTime()) {
            components.imply("day", components.get("day") + 1);
        }
        return components;
    }
    checkAndReturnWithoutFollowingPattern(result) {
        if (result.text.match(/^\d$/)) {
            return null;
        }
        if (result.text.match(/^\d\d\d+$/)) {
            return null;
        }
        if (result.text.match(/\d[apAP]$/)) {
            return null;
        }
        const endingWithNumbers = result.text.match(/[^\d:.](\d[\d.]+)$/);
        if (endingWithNumbers) {
            const endingNumbers = endingWithNumbers[1];
            if (this.strictMode) {
                return null;
            }
            if (endingNumbers.includes(".") && !endingNumbers.match(/\d(\.\d{2})+$/)) {
                return null;
            }
            const endingNumberVal = parseInt(endingNumbers);
            if (endingNumberVal > 24) {
                return null;
            }
        }
        return result;
    }
    checkAndReturnWithFollowingPattern(result) {
        if (result.text.match(/^\d+-\d+$/)) {
            return null;
        }
        const endingWithNumbers = result.text.match(/[^\d:.](\d[\d.]+)\s*-\s*(\d[\d.]+)$/);
        if (endingWithNumbers) {
            if (this.strictMode) {
                return null;
            }
            const startingNumbers = endingWithNumbers[1];
            const endingNumbers = endingWithNumbers[2];
            if (endingNumbers.includes(".") && !endingNumbers.match(/\d(\.\d{2})+$/)) {
                return null;
            }
            const endingNumberVal = parseInt(endingNumbers);
            const startingNumberVal = parseInt(startingNumbers);
            if (endingNumberVal > 24 || startingNumberVal > 24) {
                return null;
            }
        }
        return result;
    }
    getPrimaryTimePatternThroughCache() {
        const primaryPrefix = this.primaryPrefix();
        const primarySuffix = this.primarySuffix();
        if (this.cachedPrimaryPrefix === primaryPrefix && this.cachedPrimarySuffix === primarySuffix) {
            return this.cachedPrimaryTimePattern;
        }
        this.cachedPrimaryTimePattern = primaryTimePattern(this.primaryPatternLeftBoundary(), primaryPrefix, primarySuffix, this.patternFlags());
        this.cachedPrimaryPrefix = primaryPrefix;
        this.cachedPrimarySuffix = primarySuffix;
        return this.cachedPrimaryTimePattern;
    }
    getFollowingTimePatternThroughCache() {
        const followingPhase = this.followingPhase();
        const followingSuffix = this.followingSuffix();
        if (this.cachedFollowingPhase === followingPhase && this.cachedFollowingSuffix === followingSuffix) {
            return this.cachedFollowingTimePatten;
        }
        this.cachedFollowingTimePatten = followingTimePatten(followingPhase, followingSuffix);
        this.cachedFollowingPhase = followingPhase;
        this.cachedFollowingSuffix = followingSuffix;
        return this.cachedFollowingTimePatten;
    }
}
//# sourceMappingURL=AbstractTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/parsers/ISOFormatParser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/parsers/ISOFormatParser.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ISOFormatParser)
/* harmony export */ });
/* harmony import */ var _AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");

const PATTERN = new RegExp("([0-9]{4})\\-([0-9]{1,2})\\-([0-9]{1,2})" +
    "(?:T" +
    "([0-9]{1,2}):([0-9]{1,2})" +
    "(?:" +
    ":([0-9]{1,2})(?:\\.(\\d{1,4}))?" +
    ")?" +
    "(" +
    "Z|([+-]\\d{2}):?(\\d{2})?" +
    ")?" +
    ")?" +
    "(?=\\W|$)", "i");
const YEAR_NUMBER_GROUP = 1;
const MONTH_NUMBER_GROUP = 2;
const DATE_NUMBER_GROUP = 3;
const HOUR_NUMBER_GROUP = 4;
const MINUTE_NUMBER_GROUP = 5;
const SECOND_NUMBER_GROUP = 6;
const MILLISECOND_NUMBER_GROUP = 7;
const TZD_GROUP = 8;
const TZD_HOUR_OFFSET_GROUP = 9;
const TZD_MINUTE_OFFSET_GROUP = 10;
class ISOFormatParser extends _AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const components = context.createParsingComponents({
            "year": parseInt(match[YEAR_NUMBER_GROUP]),
            "month": parseInt(match[MONTH_NUMBER_GROUP]),
            "day": parseInt(match[DATE_NUMBER_GROUP]),
        });
        if (match[HOUR_NUMBER_GROUP] != null) {
            components.assign("hour", parseInt(match[HOUR_NUMBER_GROUP]));
            components.assign("minute", parseInt(match[MINUTE_NUMBER_GROUP]));
            if (match[SECOND_NUMBER_GROUP] != null) {
                components.assign("second", parseInt(match[SECOND_NUMBER_GROUP]));
            }
            if (match[MILLISECOND_NUMBER_GROUP] != null) {
                components.assign("millisecond", parseInt(match[MILLISECOND_NUMBER_GROUP]));
            }
            if (match[TZD_GROUP] != null) {
                let offset = 0;
                if (match[TZD_HOUR_OFFSET_GROUP]) {
                    const hourOffset = parseInt(match[TZD_HOUR_OFFSET_GROUP]);
                    let minuteOffset = 0;
                    if (match[TZD_MINUTE_OFFSET_GROUP] != null) {
                        minuteOffset = parseInt(match[TZD_MINUTE_OFFSET_GROUP]);
                    }
                    offset = hourOffset * 60;
                    if (offset < 0) {
                        offset -= minuteOffset;
                    }
                    else {
                        offset += minuteOffset;
                    }
                }
                components.assign("timezoneOffset", offset);
            }
        }
        return components.addTag("parser/ISOFormatParser");
    }
}
//# sourceMappingURL=ISOFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SlashDateFormatParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");

const PATTERN = new RegExp("([^\\d]|^)" +
    "([0-3]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})" +
    "(?:[\\/\\.\\-]([0-9]{4}|[0-9]{2}))?" +
    "(\\W|$)", "i");
const OPENING_GROUP = 1;
const ENDING_GROUP = 5;
const FIRST_NUMBERS_GROUP = 2;
const SECOND_NUMBERS_GROUP = 3;
const YEAR_GROUP = 4;
class SlashDateFormatParser {
    constructor(littleEndian) {
        this.groupNumberMonth = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;
        this.groupNumberDay = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;
    }
    pattern() {
        return PATTERN;
    }
    extract(context, match) {
        const index = match.index + match[OPENING_GROUP].length;
        const indexEnd = match.index + match[0].length - match[ENDING_GROUP].length;
        if (index > 0) {
            const textBefore = context.text.substring(0, index);
            if (textBefore.match("\\d/?$")) {
                return;
            }
        }
        if (indexEnd < context.text.length) {
            const textAfter = context.text.substring(indexEnd);
            if (textAfter.match("^/?\\d")) {
                return;
            }
        }
        const text = context.text.substring(index, indexEnd);
        if (text.match(/^\d\.\d$/) || text.match(/^\d\.\d{1,2}\.\d{1,2}\s*$/)) {
            return;
        }
        if (!match[YEAR_GROUP] && text.indexOf("/") < 0) {
            return;
        }
        const result = context.createParsingResult(index, text);
        let month = parseInt(match[this.groupNumberMonth]);
        let day = parseInt(match[this.groupNumberDay]);
        if (month < 1 || month > 12) {
            if (month > 12) {
                if (day >= 1 && day <= 12 && month <= 31) {
                    [day, month] = [month, day];
                }
                else {
                    return null;
                }
            }
        }
        if (day < 1 || day > 31) {
            return null;
        }
        result.start.assign("day", day);
        result.start.assign("month", month);
        if (match[YEAR_GROUP]) {
            const rawYearNumber = parseInt(match[YEAR_GROUP]);
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_0__.findMostLikelyADYear)(rawYearNumber);
            result.start.assign("year", year);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_0__.findYearClosestToRef)(context.refDate, day, month);
            result.start.imply("year", year);
        }
        return result;
    }
}
//# sourceMappingURL=SlashDateFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AbstractMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abstractRefiners.js */ "./node_modules/chrono-node/dist/esm/common/abstractRefiners.js");

class AbstractMergeDateRangeRefiner extends _abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__.MergingRefiner {
    shouldMergeResults(textBetween, currentResult, nextResult) {
        return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;
    }
    mergeResults(textBetween, fromResult, toResult) {
        if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {
            toResult.start.getCertainComponents().forEach((key) => {
                if (!fromResult.start.isCertain(key)) {
                    fromResult.start.imply(key, toResult.start.get(key));
                }
            });
            fromResult.start.getCertainComponents().forEach((key) => {
                if (!toResult.start.isCertain(key)) {
                    toResult.start.imply(key, fromResult.start.get(key));
                }
            });
        }
        if (fromResult.start.date().getTime() > toResult.start.date().getTime()) {
            let fromMoment = fromResult.start.dayjs();
            let toMoment = toResult.start.dayjs();
            if (toResult.start.isOnlyWeekdayComponent() && toMoment.add(7, "days").isAfter(fromMoment)) {
                toMoment = toMoment.add(7, "days");
                toResult.start.imply("day", toMoment.date());
                toResult.start.imply("month", toMoment.month() + 1);
                toResult.start.imply("year", toMoment.year());
            }
            else if (fromResult.start.isOnlyWeekdayComponent() && fromMoment.add(-7, "days").isBefore(toMoment)) {
                fromMoment = fromMoment.add(-7, "days");
                fromResult.start.imply("day", fromMoment.date());
                fromResult.start.imply("month", fromMoment.month() + 1);
                fromResult.start.imply("year", fromMoment.year());
            }
            else if (toResult.start.isDateWithUnknownYear() && toMoment.add(1, "years").isAfter(fromMoment)) {
                toMoment = toMoment.add(1, "years");
                toResult.start.imply("year", toMoment.year());
            }
            else if (fromResult.start.isDateWithUnknownYear() && fromMoment.add(-1, "years").isBefore(toMoment)) {
                fromMoment = fromMoment.add(-1, "years");
                fromResult.start.imply("year", fromMoment.year());
            }
            else {
                [toResult, fromResult] = [fromResult, toResult];
            }
        }
        const result = fromResult.clone();
        result.start = fromResult.start;
        result.end = toResult.start;
        result.index = Math.min(fromResult.index, toResult.index);
        if (fromResult.index < toResult.index) {
            result.text = fromResult.text + textBetween + toResult.text;
        }
        else {
            result.text = toResult.text + textBetween + fromResult.text;
        }
        return result;
    }
}
//# sourceMappingURL=AbstractMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AbstractMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abstractRefiners.js */ "./node_modules/chrono-node/dist/esm/common/abstractRefiners.js");
/* harmony import */ var _calculation_mergingCalculation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../calculation/mergingCalculation.js */ "./node_modules/chrono-node/dist/esm/calculation/mergingCalculation.js");


class AbstractMergeDateTimeRefiner extends _abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__.MergingRefiner {
    shouldMergeResults(textBetween, currentResult, nextResult) {
        return (((currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime()) ||
            (nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime())) &&
            textBetween.match(this.patternBetween()) != null);
    }
    mergeResults(textBetween, currentResult, nextResult) {
        const result = currentResult.start.isOnlyDate()
            ? (0,_calculation_mergingCalculation_js__WEBPACK_IMPORTED_MODULE_1__.mergeDateTimeResult)(currentResult, nextResult)
            : (0,_calculation_mergingCalculation_js__WEBPACK_IMPORTED_MODULE_1__.mergeDateTimeResult)(nextResult, currentResult);
        result.index = currentResult.index;
        result.text = currentResult.text + textBetween + nextResult.text;
        return result;
    }
}
//# sourceMappingURL=AbstractMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneAbbrRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneAbbrRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ExtractTimezoneAbbrRefiner)
/* harmony export */ });
/* harmony import */ var _timezone_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../timezone.js */ "./node_modules/chrono-node/dist/esm/timezone.js");

const TIMEZONE_NAME_PATTERN = new RegExp("^\\s*,?\\s*\\(?([A-Z]{2,4})\\)?(?=\\W|$)", "i");
class ExtractTimezoneAbbrRefiner {
    constructor(timezoneOverrides) {
        this.timezoneOverrides = timezoneOverrides;
    }
    refine(context, results) {
        const timezoneOverrides = context.option.timezones ?? {};
        results.forEach((result) => {
            const suffix = context.text.substring(result.index + result.text.length);
            const match = TIMEZONE_NAME_PATTERN.exec(suffix);
            if (!match) {
                return;
            }
            const timezoneAbbr = match[1].toUpperCase();
            const refDate = result.start.date() ?? result.refDate ?? new Date();
            const tzOverrides = { ...this.timezoneOverrides, ...timezoneOverrides };
            const extractedTimezoneOffset = (0,_timezone_js__WEBPACK_IMPORTED_MODULE_0__.toTimezoneOffset)(timezoneAbbr, refDate, tzOverrides);
            if (extractedTimezoneOffset == null) {
                return;
            }
            context.debug(() => {
                console.log(`Extracting timezone: '${timezoneAbbr}' into: ${extractedTimezoneOffset} for: ${result.start}`);
            });
            const currentTimezoneOffset = result.start.get("timezoneOffset");
            if (currentTimezoneOffset !== null && extractedTimezoneOffset != currentTimezoneOffset) {
                if (result.start.isCertain("timezoneOffset")) {
                    return;
                }
                if (timezoneAbbr != match[1]) {
                    return;
                }
            }
            if (result.start.isOnlyDate()) {
                if (timezoneAbbr != match[1]) {
                    return;
                }
            }
            result.text += match[0];
            if (!result.start.isCertain("timezoneOffset")) {
                result.start.assign("timezoneOffset", extractedTimezoneOffset);
            }
            if (result.end != null && !result.end.isCertain("timezoneOffset")) {
                result.end.assign("timezoneOffset", extractedTimezoneOffset);
            }
        });
        return results;
    }
}
//# sourceMappingURL=ExtractTimezoneAbbrRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneOffsetRefiner.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneOffsetRefiner.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ExtractTimezoneOffsetRefiner)
/* harmony export */ });
const TIMEZONE_OFFSET_PATTERN = new RegExp("^\\s*(?:\\(?(?:GMT|UTC)\\s?)?([+-])(\\d{1,2})(?::?(\\d{2}))?\\)?", "i");
const TIMEZONE_OFFSET_SIGN_GROUP = 1;
const TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 2;
const TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 3;
class ExtractTimezoneOffsetRefiner {
    refine(context, results) {
        results.forEach(function (result) {
            if (result.start.isCertain("timezoneOffset")) {
                return;
            }
            const suffix = context.text.substring(result.index + result.text.length);
            const match = TIMEZONE_OFFSET_PATTERN.exec(suffix);
            if (!match) {
                return;
            }
            context.debug(() => {
                console.log(`Extracting timezone: '${match[0]}' into : ${result}`);
            });
            const hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);
            const minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP] || "0");
            let timezoneOffset = hourOffset * 60 + minuteOffset;
            if (timezoneOffset > 14 * 60) {
                return;
            }
            if (match[TIMEZONE_OFFSET_SIGN_GROUP] === "-") {
                timezoneOffset = -timezoneOffset;
            }
            if (result.end != null) {
                result.end.assign("timezoneOffset", timezoneOffset);
            }
            result.start.assign("timezoneOffset", timezoneOffset);
            result.text += match[0];
        });
        return results;
    }
}
//# sourceMappingURL=ExtractTimezoneOffsetRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/refiners/ForwardDateRefiner.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/refiners/ForwardDateRefiner.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ForwardDateRefiner)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");


class ForwardDateRefiner {
    refine(context, results) {
        if (!context.option.forwardDate) {
            return results;
        }
        results.forEach((result) => {
            let refMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
            if (result.start.isOnlyTime() && refMoment.isAfter(result.start.dayjs())) {
                refMoment = refMoment.add(1, "day");
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_1__.implySimilarDate)(result.start, refMoment);
                if (result.end && result.end.isOnlyTime()) {
                    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_1__.implySimilarDate)(result.end, refMoment);
                    if (result.start.dayjs().isAfter(result.end.dayjs())) {
                        refMoment = refMoment.add(1, "day");
                        (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_1__.implySimilarDate)(result.end, refMoment);
                    }
                }
                context.debug(() => {
                    console.log(`${this.constructor.name} adjusted ${result} time result (${result.start})`);
                });
            }
            if (result.start.isOnlyWeekdayComponent() && refMoment.isAfter(result.start.dayjs())) {
                if (refMoment.day() >= result.start.get("weekday")) {
                    refMoment = refMoment.day(result.start.get("weekday") + 7);
                }
                else {
                    refMoment = refMoment.day(result.start.get("weekday"));
                }
                result.start.imply("day", refMoment.date());
                result.start.imply("month", refMoment.month() + 1);
                result.start.imply("year", refMoment.year());
                context.debug(() => {
                    console.log(`${this.constructor.name} adjusted ${result} weekday (${result.start})`);
                });
                if (result.end && result.end.isOnlyWeekdayComponent()) {
                    if (refMoment.day() > result.end.get("weekday")) {
                        refMoment = refMoment.day(result.end.get("weekday") + 7);
                    }
                    else {
                        refMoment = refMoment.day(result.end.get("weekday"));
                    }
                    result.end.imply("day", refMoment.date());
                    result.end.imply("month", refMoment.month() + 1);
                    result.end.imply("year", refMoment.year());
                    context.debug(() => {
                        console.log(`${this.constructor.name} adjusted ${result} weekday (${result.end})`);
                    });
                }
            }
            if (result.start.isDateWithUnknownYear() && refMoment.isAfter(result.start.dayjs())) {
                for (let i = 0; i < 3 && refMoment.isAfter(result.start.dayjs()); i++) {
                    result.start.imply("year", result.start.get("year") + 1);
                    context.debug(() => {
                        console.log(`${this.constructor.name} adjusted ${result} year (${result.start})`);
                    });
                    if (result.end && !result.end.isCertain("year")) {
                        result.end.imply("year", result.end.get("year") + 1);
                        context.debug(() => {
                            console.log(`${this.constructor.name} adjusted ${result} month (${result.start})`);
                        });
                    }
                }
            }
        });
        return results;
    }
}
//# sourceMappingURL=ForwardDateRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/refiners/MergeWeekdayComponentRefiner.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/refiners/MergeWeekdayComponentRefiner.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MergeWeekdayComponentRefiner)
/* harmony export */ });
/* harmony import */ var _abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abstractRefiners.js */ "./node_modules/chrono-node/dist/esm/common/abstractRefiners.js");

class MergeWeekdayComponentRefiner extends _abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__.MergingRefiner {
    mergeResults(textBetween, currentResult, nextResult) {
        const newResult = nextResult.clone();
        newResult.index = currentResult.index;
        newResult.text = currentResult.text + textBetween + newResult.text;
        newResult.start.assign("weekday", currentResult.start.get("weekday"));
        if (newResult.end) {
            newResult.end.assign("weekday", currentResult.start.get("weekday"));
        }
        return newResult;
    }
    shouldMergeResults(textBetween, currentResult, nextResult) {
        const weekdayThenNormalDate = currentResult.start.isOnlyWeekdayComponent() &&
            !currentResult.start.isCertain("hour") &&
            nextResult.start.isCertain("day");
        return weekdayThenNormalDate && textBetween.match(/^,?\s*$/) != null;
    }
}
//# sourceMappingURL=MergeWeekdayComponentRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/refiners/OverlapRemovalRefiner.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/refiners/OverlapRemovalRefiner.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OverlapRemovalRefiner)
/* harmony export */ });
class OverlapRemovalRefiner {
    refine(context, results) {
        if (results.length < 2) {
            return results;
        }
        const filteredResults = [];
        let prevResult = results[0];
        for (let i = 1; i < results.length; i++) {
            const result = results[i];
            if (result.index >= prevResult.index + prevResult.text.length) {
                filteredResults.push(prevResult);
                prevResult = result;
                continue;
            }
            let kept = null;
            let removed = null;
            if (result.text.length > prevResult.text.length) {
                kept = result;
                removed = prevResult;
            }
            else {
                kept = prevResult;
                removed = result;
            }
            context.debug(() => {
                console.log(`${this.constructor.name} remove ${removed} by ${kept}`);
            });
            prevResult = kept;
        }
        if (prevResult != null) {
            filteredResults.push(prevResult);
        }
        return filteredResults;
    }
}
//# sourceMappingURL=OverlapRemovalRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/common/refiners/UnlikelyFormatFilter.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/common/refiners/UnlikelyFormatFilter.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UnlikelyFormatFilter)
/* harmony export */ });
/* harmony import */ var _abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../abstractRefiners.js */ "./node_modules/chrono-node/dist/esm/common/abstractRefiners.js");

class UnlikelyFormatFilter extends _abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__.Filter {
    constructor(strictMode) {
        super();
        this.strictMode = strictMode;
    }
    isValid(context, result) {
        if (result.text.replace(" ", "").match(/^\d*(\.\d*)?$/)) {
            context.debug(() => {
                console.log(`Removing unlikely result '${result.text}'`);
            });
            return false;
        }
        if (!result.start.isValidDate()) {
            context.debug(() => {
                console.log(`Removing invalid result: ${result} (${result.start})`);
            });
            return false;
        }
        if (result.end && !result.end.isValidDate()) {
            context.debug(() => {
                console.log(`Removing invalid result: ${result} (${result.end})`);
            });
            return false;
        }
        if (this.strictMode) {
            return this.isStrictModeValid(context, result);
        }
        return true;
    }
    isStrictModeValid(context, result) {
        if (result.start.isOnlyWeekdayComponent()) {
            context.debug(() => {
                console.log(`(Strict) Removing weekday only component: ${result} (${result.end})`);
            });
            return false;
        }
        if (result.start.isOnlyTime() && (!result.start.isCertain("hour") || !result.start.isCertain("minute"))) {
            context.debug(() => {
                console.log(`(Strict) Removing uncertain time component: ${result} (${result.end})`);
            });
            return false;
        }
        return true;
    }
}
//# sourceMappingURL=UnlikelyFormatFilter.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/configurations.js":
/*!*************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/configurations.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   includeCommonConfiguration: () => (/* binding */ includeCommonConfiguration)
/* harmony export */ });
/* harmony import */ var _common_refiners_ExtractTimezoneAbbrRefiner_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./common/refiners/ExtractTimezoneAbbrRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneAbbrRefiner.js");
/* harmony import */ var _common_refiners_ExtractTimezoneOffsetRefiner_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/refiners/ExtractTimezoneOffsetRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneOffsetRefiner.js");
/* harmony import */ var _common_refiners_OverlapRemovalRefiner_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common/refiners/OverlapRemovalRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/OverlapRemovalRefiner.js");
/* harmony import */ var _common_refiners_ForwardDateRefiner_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/refiners/ForwardDateRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/ForwardDateRefiner.js");
/* harmony import */ var _common_refiners_UnlikelyFormatFilter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common/refiners/UnlikelyFormatFilter.js */ "./node_modules/chrono-node/dist/esm/common/refiners/UnlikelyFormatFilter.js");
/* harmony import */ var _common_parsers_ISOFormatParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common/parsers/ISOFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/ISOFormatParser.js");
/* harmony import */ var _common_refiners_MergeWeekdayComponentRefiner_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/refiners/MergeWeekdayComponentRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/MergeWeekdayComponentRefiner.js");







function includeCommonConfiguration(configuration, strictMode = false) {
    configuration.parsers.unshift(new _common_parsers_ISOFormatParser_js__WEBPACK_IMPORTED_MODULE_0__["default"]());
    configuration.refiners.unshift(new _common_refiners_MergeWeekdayComponentRefiner_js__WEBPACK_IMPORTED_MODULE_1__["default"]());
    configuration.refiners.unshift(new _common_refiners_ExtractTimezoneOffsetRefiner_js__WEBPACK_IMPORTED_MODULE_2__["default"]());
    configuration.refiners.unshift(new _common_refiners_OverlapRemovalRefiner_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    configuration.refiners.push(new _common_refiners_ExtractTimezoneAbbrRefiner_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
    configuration.refiners.push(new _common_refiners_OverlapRemovalRefiner_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    configuration.refiners.push(new _common_refiners_ForwardDateRefiner_js__WEBPACK_IMPORTED_MODULE_5__["default"]());
    configuration.refiners.push(new _common_refiners_UnlikelyFormatFilter_js__WEBPACK_IMPORTED_MODULE_6__["default"](strictMode));
    return configuration;
}
//# sourceMappingURL=configurations.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/index.js":
/*!****************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_1__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_2__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_3__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   de: () => (/* reexport module object */ _locales_de_index_js__WEBPACK_IMPORTED_MODULE_4__),
/* harmony export */   en: () => (/* reexport module object */ _locales_en_index_js__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   es: () => (/* reexport module object */ _locales_es_index_js__WEBPACK_IMPORTED_MODULE_11__),
/* harmony export */   fr: () => (/* reexport module object */ _locales_fr_index_js__WEBPACK_IMPORTED_MODULE_5__),
/* harmony export */   ja: () => (/* reexport module object */ _locales_ja_index_js__WEBPACK_IMPORTED_MODULE_6__),
/* harmony export */   nl: () => (/* reexport module object */ _locales_nl_index_js__WEBPACK_IMPORTED_MODULE_8__),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   pt: () => (/* reexport module object */ _locales_pt_index_js__WEBPACK_IMPORTED_MODULE_7__),
/* harmony export */   ru: () => (/* reexport module object */ _locales_ru_index_js__WEBPACK_IMPORTED_MODULE_10__),
/* harmony export */   strict: () => (/* binding */ strict),
/* harmony export */   uk: () => (/* reexport module object */ _locales_uk_index_js__WEBPACK_IMPORTED_MODULE_12__),
/* harmony export */   zh: () => (/* reexport module object */ _locales_zh_index_js__WEBPACK_IMPORTED_MODULE_9__)
/* harmony export */ });
/* harmony import */ var _locales_en_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./locales/en/index.js */ "./node_modules/chrono-node/dist/esm/locales/en/index.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _locales_de_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./locales/de/index.js */ "./node_modules/chrono-node/dist/esm/locales/de/index.js");
/* harmony import */ var _locales_fr_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locales/fr/index.js */ "./node_modules/chrono-node/dist/esm/locales/fr/index.js");
/* harmony import */ var _locales_ja_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./locales/ja/index.js */ "./node_modules/chrono-node/dist/esm/locales/ja/index.js");
/* harmony import */ var _locales_pt_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locales/pt/index.js */ "./node_modules/chrono-node/dist/esm/locales/pt/index.js");
/* harmony import */ var _locales_nl_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./locales/nl/index.js */ "./node_modules/chrono-node/dist/esm/locales/nl/index.js");
/* harmony import */ var _locales_zh_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./locales/zh/index.js */ "./node_modules/chrono-node/dist/esm/locales/zh/index.js");
/* harmony import */ var _locales_ru_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./locales/ru/index.js */ "./node_modules/chrono-node/dist/esm/locales/ru/index.js");
/* harmony import */ var _locales_es_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./locales/es/index.js */ "./node_modules/chrono-node/dist/esm/locales/es/index.js");
/* harmony import */ var _locales_uk_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./locales/uk/index.js */ "./node_modules/chrono-node/dist/esm/locales/uk/index.js");
















const strict = _locales_en_index_js__WEBPACK_IMPORTED_MODULE_0__.strict;
const casual = _locales_en_index_js__WEBPACK_IMPORTED_MODULE_0__.casual;
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INTEGER_WORD_DICTIONARY: () => (/* binding */ INTEGER_WORD_DICTIONARY),
/* harmony export */   MONTH_DICTIONARY: () => (/* binding */ MONTH_DICTIONARY),
/* harmony export */   NUMBER_PATTERN: () => (/* binding */ NUMBER_PATTERN),
/* harmony export */   TIME_UNITS_PATTERN: () => (/* binding */ TIME_UNITS_PATTERN),
/* harmony export */   TIME_UNIT_DICTIONARY: () => (/* binding */ TIME_UNIT_DICTIONARY),
/* harmony export */   WEEKDAY_DICTIONARY: () => (/* binding */ WEEKDAY_DICTIONARY),
/* harmony export */   YEAR_PATTERN: () => (/* binding */ YEAR_PATTERN),
/* harmony export */   parseNumberPattern: () => (/* binding */ parseNumberPattern),
/* harmony export */   parseTimeUnits: () => (/* binding */ parseTimeUnits),
/* harmony export */   parseYear: () => (/* binding */ parseYear)
/* harmony export */ });
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");


const WEEKDAY_DICTIONARY = {
    "sonntag": 0,
    "so": 0,
    "montag": 1,
    "mo": 1,
    "dienstag": 2,
    "di": 2,
    "mittwoch": 3,
    "mi": 3,
    "donnerstag": 4,
    "do": 4,
    "freitag": 5,
    "fr": 5,
    "samstag": 6,
    "sa": 6,
};
const MONTH_DICTIONARY = {
    "januar": 1,
    "jänner": 1,
    "janner": 1,
    "jan": 1,
    "jan.": 1,
    "februar": 2,
    "feber": 2,
    "feb": 2,
    "feb.": 2,
    "märz": 3,
    "maerz": 3,
    "mär": 3,
    "mär.": 3,
    "mrz": 3,
    "mrz.": 3,
    "april": 4,
    "apr": 4,
    "apr.": 4,
    "mai": 5,
    "juni": 6,
    "jun": 6,
    "jun.": 6,
    "juli": 7,
    "jul": 7,
    "jul.": 7,
    "august": 8,
    "aug": 8,
    "aug.": 8,
    "september": 9,
    "sep": 9,
    "sep.": 9,
    "sept": 9,
    "sept.": 9,
    "oktober": 10,
    "okt": 10,
    "okt.": 10,
    "november": 11,
    "nov": 11,
    "nov.": 11,
    "dezember": 12,
    "dez": 12,
    "dez.": 12,
};
const INTEGER_WORD_DICTIONARY = {
    "eins": 1,
    "eine": 1,
    "einem": 1,
    "einen": 1,
    "einer": 1,
    "zwei": 2,
    "drei": 3,
    "vier": 4,
    "fünf": 5,
    "fuenf": 5,
    "sechs": 6,
    "sieben": 7,
    "acht": 8,
    "neun": 9,
    "zehn": 10,
    "elf": 11,
    "zwölf": 12,
    "zwoelf": 12,
};
const TIME_UNIT_DICTIONARY = {
    sek: "second",
    sekunde: "second",
    sekunden: "second",
    min: "minute",
    minute: "minute",
    minuten: "minute",
    h: "hour",
    std: "hour",
    stunde: "hour",
    stunden: "hour",
    tag: "d",
    tage: "d",
    tagen: "d",
    woche: "week",
    wochen: "week",
    monat: "month",
    monate: "month",
    monaten: "month",
    monats: "month",
    quartal: "quarter",
    quartals: "quarter",
    quartale: "quarter",
    quartalen: "quarter",
    a: "year",
    j: "year",
    jr: "year",
    jahr: "year",
    jahre: "year",
    jahren: "year",
    jahres: "year",
};
const NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|halb?|halbe?|einigen?|wenigen?|mehreren?)`;
function parseNumberPattern(match) {
    const num = match.toLowerCase();
    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {
        return INTEGER_WORD_DICTIONARY[num];
    }
    else if (num === "ein" || num === "einer" || num === "einem" || num === "einen" || num === "eine") {
        return 1;
    }
    else if (num.match(/wenigen/)) {
        return 2;
    }
    else if (num.match(/halb/) || num.match(/halben/)) {
        return 0.5;
    }
    else if (num.match(/einigen/)) {
        return 3;
    }
    else if (num.match(/mehreren/)) {
        return 7;
    }
    return parseFloat(num);
}
const YEAR_PATTERN = `(?:[0-9]{1,4}(?:\\s*[vn]\\.?\\s*(?:C(?:hr)?|(?:u\\.?|d\\.?(?:\\s*g\\.?)?)?\\s*Z)\\.?|\\s*(?:u\\.?|d\\.?(?:\\s*g\\.)?)\\s*Z\\.?)?)`;
function parseYear(match) {
    if (/v/i.test(match)) {
        return -parseInt(match.replace(/[^0-9]+/gi, ""));
    }
    if (/n/i.test(match)) {
        return parseInt(match.replace(/[^0-9]+/gi, ""));
    }
    if (/z/i.test(match)) {
        return parseInt(match.replace(/[^0-9]+/gi, ""));
    }
    const rawYearNumber = parseInt(match);
    return (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_1__.findMostLikelyADYear)(rawYearNumber);
}
const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,5}(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(TIME_UNIT_DICTIONARY)})\\s{0,5}`;
const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
const TIME_UNITS_PATTERN = (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.repeatedTimeunitPattern)("", SINGLE_TIME_UNIT_PATTERN);
function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length);
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
}
function collectDateTimeFragment(fragments, match) {
    const num = parseNumberPattern(match[1]);
    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
    fragments[unit] = num;
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/parsers/SlashDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js");
/* harmony import */ var _common_parsers_ISOFormatParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/parsers/ISOFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/ISOFormatParser.js");
/* harmony import */ var _parsers_DETimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/DETimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeExpressionParser.js");
/* harmony import */ var _parsers_DEWeekdayParser_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/DEWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DEWeekdayParser.js");
/* harmony import */ var _parsers_DESpecificTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers/DESpecificTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DESpecificTimeExpressionParser.js");
/* harmony import */ var _refiners_DEMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./refiners/DEMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/de/refiners/DEMergeDateRangeRefiner.js");
/* harmony import */ var _refiners_DEMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./refiners/DEMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/de/refiners/DEMergeDateTimeRefiner.js");
/* harmony import */ var _parsers_DECasualDateParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/DECasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DECasualDateParser.js");
/* harmony import */ var _parsers_DECasualTimeParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/DECasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DECasualTimeParser.js");
/* harmony import */ var _parsers_DEMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/DEMonthNameLittleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DEMonthNameLittleEndianParser.js");
/* harmony import */ var _parsers_DETimeUnitRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/DETimeUnitRelativeFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeUnitRelativeFormatParser.js");
/* harmony import */ var _parsers_DETimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/DETimeUnitWithinFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeUnitWithinFormatParser.js");


















const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration(true));
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration(littleEndian = true) {
    const option = createConfiguration(false, littleEndian);
    option.parsers.unshift(new _parsers_DECasualTimeParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    option.parsers.unshift(new _parsers_DECasualDateParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
    option.parsers.unshift(new _parsers_DETimeUnitRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_5__["default"]());
    return option;
}
function createConfiguration(strictMode = true, littleEndian = true) {
    return (0,_configurations_js__WEBPACK_IMPORTED_MODULE_6__.includeCommonConfiguration)({
        parsers: [
            new _common_parsers_ISOFormatParser_js__WEBPACK_IMPORTED_MODULE_7__["default"](),
            new _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_8__["default"](littleEndian),
            new _parsers_DETimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](),
            new _parsers_DESpecificTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_10__["default"](),
            new _parsers_DEMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_11__["default"](),
            new _parsers_DEWeekdayParser_js__WEBPACK_IMPORTED_MODULE_12__["default"](),
            new _parsers_DETimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_13__["default"](),
        ],
        refiners: [new _refiners_DEMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_14__["default"](), new _refiners_DEMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_15__["default"]()],
    }, strictMode);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DECasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/parsers/DECasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DECasualDateParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var _DECasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DECasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DECasualTimeParser.js");
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");





const PATTERN = new RegExp(`(jetzt|heute|morgen|übermorgen|uebermorgen|gestern|vorgestern|letzte\\s*nacht)` +
    `(?:\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht))?` +
    `(?=\\W|$)`, "i");
const DATE_GROUP = 1;
const TIME_GROUP = 2;
class DECasualDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return PATTERN;
    }
    innerExtract(context, match) {
        let targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const dateKeyword = (match[DATE_GROUP] || "").toLowerCase();
        const timeKeyword = (match[TIME_GROUP] || "").toLowerCase();
        let component = context.createParsingComponents();
        switch (dateKeyword) {
            case "jetzt":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.now(context.reference);
                break;
            case "heute":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.today(context.reference);
                break;
            case "morgen":
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignTheNextDay)(component, targetDate);
                break;
            case "übermorgen":
            case "uebermorgen":
                targetDate = targetDate.add(1, "day");
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignTheNextDay)(component, targetDate);
                break;
            case "gestern":
                targetDate = targetDate.add(-1, "day");
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(component, targetDate);
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.implySimilarTime)(component, targetDate);
                break;
            case "vorgestern":
                targetDate = targetDate.add(-2, "day");
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(component, targetDate);
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.implySimilarTime)(component, targetDate);
                break;
            default:
                if (dateKeyword.match(/letzte\s*nacht/)) {
                    if (targetDate.hour() > 6) {
                        targetDate = targetDate.add(-1, "day");
                    }
                    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(component, targetDate);
                    component.imply("hour", 0);
                }
                break;
        }
        if (timeKeyword) {
            component = _DECasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__["default"].extractTimeComponents(component, timeKeyword);
        }
        return component;
    }
}
//# sourceMappingURL=DECasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DECasualTimeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/parsers/DECasualTimeParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DECasualTimeParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");





class DECasualTimeParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return /(diesen)?\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const timeKeywordPattern = match[2].toLowerCase();
        const component = context.createParsingComponents();
        (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.implySimilarTime)(component, targetDate);
        return DECasualTimeParser.extractTimeComponents(component, timeKeywordPattern);
    }
    static extractTimeComponents(component, timeKeywordPattern) {
        switch (timeKeywordPattern) {
            case "morgen":
                component.imply("hour", 6);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.AM);
                break;
            case "vormittag":
                component.imply("hour", 9);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.AM);
                break;
            case "mittag":
            case "mittags":
                component.imply("hour", 12);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.AM);
                break;
            case "nachmittag":
                component.imply("hour", 15);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
                break;
            case "abend":
                component.imply("hour", 18);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
                break;
            case "nacht":
                component.imply("hour", 22);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
                break;
            case "mitternacht":
                if (component.get("hour") > 1) {
                    component = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_4__.addImpliedTimeUnits)(component, { "day": 1 });
                }
                component.imply("hour", 0);
                component.imply("minute", 0);
                component.imply("second", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.AM);
                break;
        }
        return component;
    }
}
//# sourceMappingURL=DECasualTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DEMonthNameLittleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/parsers/DEMonthNameLittleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DEMonthNameLittleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/de/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");





const PATTERN = new RegExp("(?:am\\s*?)?" +
    "(?:den\\s*?)?" +
    `([0-9]{1,2})\\.` +
    `(?:\\s*(?:bis(?:\\s*(?:am|zum))?|\\-|\\–|\\s)\\s*([0-9]{1,2})\\.?)?\\s*` +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})` +
    `(?:(?:-|/|,?\\s*)(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.YEAR_PATTERN}(?![^\\s]\\d)))?` +
    `(?=\\W|$)`, "i");
const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const MONTH_NAME_GROUP = 3;
const YEAR_GROUP = 4;
class DEMonthNameLittleEndianParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = parseInt(match[DATE_GROUP]);
        if (day > 31) {
            match.index = match.index + match[DATE_GROUP].length;
            return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
            const yearNumber = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseYear)(match[YEAR_GROUP]);
            result.start.assign("year", yearNumber);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, day, month);
            result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
            const endDate = parseInt(match[DATE_TO_GROUP]);
            result.end = result.start.clone();
            result.end.assign("day", endDate);
        }
        return result;
    }
}
//# sourceMappingURL=DEMonthNameLittleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DESpecificTimeExpressionParser.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/parsers/DESpecificTimeExpressionParser.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DESpecificTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");

const FIRST_REG_PATTERN = new RegExp("(^|\\s|T)" +
    "(?:(?:um|von)\\s*)?" +
    "(\\d{1,2})(?:h|:)?" +
    "(?:(\\d{1,2})(?:m|:)?)?" +
    "(?:(\\d{1,2})(?:s)?)?" +
    "(?:\\s*Uhr)?" +
    "(?:\\s*(morgens|vormittags|nachmittags|abends|nachts|am\\s+(?:Morgen|Vormittag|Nachmittag|Abend)|in\\s+der\\s+Nacht))?" +
    "(?=\\W|$)", "i");
const SECOND_REG_PATTERN = new RegExp("^\\s*(\\-|\\–|\\~|\\〜|bis(?:\\s+um)?|\\?)\\s*" +
    "(\\d{1,2})(?:h|:)?" +
    "(?:(\\d{1,2})(?:m|:)?)?" +
    "(?:(\\d{1,2})(?:s)?)?" +
    "(?:\\s*Uhr)?" +
    "(?:\\s*(morgens|vormittags|nachmittags|abends|nachts|am\\s+(?:Morgen|Vormittag|Nachmittag|Abend)|in\\s+der\\s+Nacht))?" +
    "(?=\\W|$)", "i");
const HOUR_GROUP = 2;
const MINUTE_GROUP = 3;
const SECOND_GROUP = 4;
const AM_PM_HOUR_GROUP = 5;
class DESpecificTimeExpressionParser {
    pattern(context) {
        return FIRST_REG_PATTERN;
    }
    extract(context, match) {
        const result = context.createParsingResult(match.index + match[1].length, match[0].substring(match[1].length));
        if (result.text.match(/^\d{4}$/)) {
            match.index += match[0].length;
            return null;
        }
        result.start = DESpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), match);
        if (!result.start) {
            match.index += match[0].length;
            return null;
        }
        const remainingText = context.text.substring(match.index + match[0].length);
        const secondMatch = SECOND_REG_PATTERN.exec(remainingText);
        if (secondMatch) {
            result.end = DESpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), secondMatch);
            if (result.end) {
                result.text += secondMatch[0];
            }
        }
        return result;
    }
    static extractTimeComponent(extractingComponents, match) {
        let hour = 0;
        let minute = 0;
        let meridiem = null;
        hour = parseInt(match[HOUR_GROUP]);
        if (match[MINUTE_GROUP] != null) {
            minute = parseInt(match[MINUTE_GROUP]);
        }
        if (minute >= 60 || hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
            if (hour > 12)
                return null;
            const ampm = match[AM_PM_HOUR_GROUP].toLowerCase();
            if (ampm.match(/morgen|vormittag/)) {
                meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM;
                if (hour == 12) {
                    hour = 0;
                }
            }
            if (ampm.match(/nachmittag|abend/)) {
                meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
                if (hour != 12) {
                    hour += 12;
                }
            }
            if (ampm.match(/nacht/)) {
                if (hour == 12) {
                    meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM;
                    hour = 0;
                }
                else if (hour < 6) {
                    meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM;
                }
                else {
                    meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
                    hour += 12;
                }
            }
        }
        extractingComponents.assign("hour", hour);
        extractingComponents.assign("minute", minute);
        if (meridiem !== null) {
            extractingComponents.assign("meridiem", meridiem);
        }
        else {
            if (hour < 12) {
                extractingComponents.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM);
            }
            else {
                extractingComponents.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM);
            }
        }
        if (match[SECOND_GROUP] != null) {
            const second = parseInt(match[SECOND_GROUP]);
            if (second >= 60)
                return null;
            extractingComponents.assign("second", second);
        }
        return extractingComponents;
    }
}
//# sourceMappingURL=DESpecificTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeExpressionParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeExpressionParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DETimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js");

class DETimeExpressionParser extends _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__.AbstractTimeExpressionParser {
    primaryPrefix() {
        return "(?:(?:um|von)\\s*)?";
    }
    followingPhase() {
        return "\\s*(?:\\-|\\–|\\~|\\〜|bis)\\s*";
    }
    extractPrimaryTimeComponents(context, match) {
        if (match[0].match(/^\s*\d{4}\s*$/)) {
            return null;
        }
        return super.extractPrimaryTimeComponents(context, match);
    }
}
//# sourceMappingURL=DETimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeUnitRelativeFormatParser.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeUnitRelativeFormatParser.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DETimeUnitAgoFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/de/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");





class DETimeUnitAgoFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    constructor() {
        super();
    }
    innerPattern() {
        return new RegExp(`(?:\\s*((?:nächste|kommende|folgende|letzte|vergangene|vorige|vor(?:her|an)gegangene)(?:s|n|m|r)?|vor|in)\\s*)?` +
            `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER_PATTERN})?` +
            `(?:\\s*(nächste|kommende|folgende|letzte|vergangene|vorige|vor(?:her|an)gegangene)(?:s|n|m|r)?)?` +
            `\\s*(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNIT_DICTIONARY)})`, "i");
    }
    innerExtract(context, match) {
        const num = match[2] ? (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseNumberPattern)(match[2]) : 1;
        const unit = _constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNIT_DICTIONARY[match[4].toLowerCase()];
        let timeUnits = {};
        timeUnits[unit] = num;
        let modifier = match[1] || match[3] || "";
        modifier = modifier.toLowerCase();
        if (!modifier) {
            return;
        }
        if (/vor/.test(modifier) || /letzte/.test(modifier) || /vergangen/.test(modifier)) {
            timeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_3__.reverseTimeUnits)(timeUnits);
        }
        return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=DETimeUnitRelativeFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeUnitWithinFormatParser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/parsers/DETimeUnitWithinFormatParser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DETimeUnitWithinFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/de/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



class DETimeUnitWithinFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return new RegExp(`(?:in|für|während)\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[1]);
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=DETimeUnitWithinFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/parsers/DEWeekdayParser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/parsers/DEWeekdayParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DEWeekdayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/de/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/calculation/weekdays.js */ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js");




const PATTERN = new RegExp("(?:(?:\\,|\\(|\\（)\\s*)?" +
    "(?:a[mn]\\s*?)?" +
    "(?:(diese[mn]|letzte[mn]|n(?:ä|ae)chste[mn])\\s*)?" +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY)})` +
    "(?:\\s*(?:\\,|\\)|\\）))?" +
    "(?:\\s*(diese|letzte|n(?:ä|ae)chste)\\s*woche)?" +
    "(?=\\W|$)", "i");
const PREFIX_GROUP = 1;
const SUFFIX_GROUP = 3;
const WEEKDAY_GROUP = 2;
class DEWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const offset = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[SUFFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLowerCase();
        let modifier = null;
        if (modifierWord.match(/letzte/)) {
            modifier = "last";
        }
        else if (modifierWord.match(/chste/)) {
            modifier = "next";
        }
        else if (modifierWord.match(/diese/)) {
            modifier = "this";
        }
        return (0,_common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__.createParsingComponentsAtWeekday)(context.reference, offset, modifier);
    }
}
//# sourceMappingURL=DEWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/refiners/DEMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/refiners/DEMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DEMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class DEMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(bis(?:\s*(?:am|zum))?|-)\s*$/i;
    }
}
//# sourceMappingURL=DEMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/de/refiners/DEMergeDateTimeRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/de/refiners/DEMergeDateTimeRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DEMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class DEMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return new RegExp("^\\s*(T|um|am|,|-)?\\s*$");
    }
}
//# sourceMappingURL=DEMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/configuration.js":
/*!***********************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/configuration.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENDefaultConfiguration)
/* harmony export */ });
/* harmony import */ var _parsers_ENTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/ENTimeUnitWithinFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitWithinFormatParser.js");
/* harmony import */ var _parsers_ENMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/ENMonthNameLittleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameLittleEndianParser.js");
/* harmony import */ var _parsers_ENMonthNameMiddleEndianParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/ENMonthNameMiddleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameMiddleEndianParser.js");
/* harmony import */ var _parsers_ENMonthNameParser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parsers/ENMonthNameParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameParser.js");
/* harmony import */ var _parsers_ENYearMonthDayParser_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./parsers/ENYearMonthDayParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENYearMonthDayParser.js");
/* harmony import */ var _parsers_ENSlashMonthFormatParser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/ENSlashMonthFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENSlashMonthFormatParser.js");
/* harmony import */ var _parsers_ENTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/ENTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeExpressionParser.js");
/* harmony import */ var _parsers_ENTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/ENTimeUnitAgoFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitAgoFormatParser.js");
/* harmony import */ var _parsers_ENTimeUnitLaterFormatParser_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parsers/ENTimeUnitLaterFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitLaterFormatParser.js");
/* harmony import */ var _refiners_ENMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./refiners/ENMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeDateRangeRefiner.js");
/* harmony import */ var _refiners_ENMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./refiners/ENMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeDateTimeRefiner.js");
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _parsers_ENCasualDateParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parsers/ENCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENCasualDateParser.js");
/* harmony import */ var _parsers_ENCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsers/ENCasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENCasualTimeParser.js");
/* harmony import */ var _parsers_ENWeekdayParser_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers/ENWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENWeekdayParser.js");
/* harmony import */ var _parsers_ENRelativeDateFormatParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/ENRelativeDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENRelativeDateFormatParser.js");
/* harmony import */ var _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/parsers/SlashDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js");
/* harmony import */ var _parsers_ENTimeUnitCasualRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/ENTimeUnitCasualRelativeFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.js");
/* harmony import */ var _refiners_ENMergeRelativeAfterDateRefiner_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./refiners/ENMergeRelativeAfterDateRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeRelativeAfterDateRefiner.js");
/* harmony import */ var _refiners_ENMergeRelativeFollowByDateRefiner_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./refiners/ENMergeRelativeFollowByDateRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeRelativeFollowByDateRefiner.js");
/* harmony import */ var _common_refiners_OverlapRemovalRefiner_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/refiners/OverlapRemovalRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/OverlapRemovalRefiner.js");
/* harmony import */ var _refiners_ENExtractYearSuffixRefiner_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./refiners/ENExtractYearSuffixRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENExtractYearSuffixRefiner.js");






















class ENDefaultConfiguration {
    createCasualConfiguration(littleEndian = false) {
        const option = this.createConfiguration(false, littleEndian);
        option.parsers.push(new _parsers_ENCasualDateParser_js__WEBPACK_IMPORTED_MODULE_0__["default"]());
        option.parsers.push(new _parsers_ENCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_1__["default"]());
        option.parsers.push(new _parsers_ENMonthNameParser_js__WEBPACK_IMPORTED_MODULE_2__["default"]());
        option.parsers.push(new _parsers_ENRelativeDateFormatParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
        option.parsers.push(new _parsers_ENTimeUnitCasualRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
        return option;
    }
    createConfiguration(strictMode = true, littleEndian = false) {
        const options = (0,_configurations_js__WEBPACK_IMPORTED_MODULE_5__.includeCommonConfiguration)({
            parsers: [
                new _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__["default"](littleEndian),
                new _parsers_ENTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_7__["default"](strictMode),
                new _parsers_ENMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_8__["default"](),
                new _parsers_ENMonthNameMiddleEndianParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](littleEndian),
                new _parsers_ENWeekdayParser_js__WEBPACK_IMPORTED_MODULE_10__["default"](),
                new _parsers_ENSlashMonthFormatParser_js__WEBPACK_IMPORTED_MODULE_11__["default"](),
                new _parsers_ENTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_12__["default"](strictMode),
                new _parsers_ENTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_13__["default"](strictMode),
                new _parsers_ENTimeUnitLaterFormatParser_js__WEBPACK_IMPORTED_MODULE_14__["default"](strictMode),
            ],
            refiners: [new _refiners_ENMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_15__["default"]()],
        }, strictMode);
        options.parsers.unshift(new _parsers_ENYearMonthDayParser_js__WEBPACK_IMPORTED_MODULE_16__["default"](strictMode));
        options.refiners.unshift(new _refiners_ENMergeRelativeFollowByDateRefiner_js__WEBPACK_IMPORTED_MODULE_17__["default"]());
        options.refiners.unshift(new _refiners_ENMergeRelativeAfterDateRefiner_js__WEBPACK_IMPORTED_MODULE_18__["default"]());
        options.refiners.unshift(new _common_refiners_OverlapRemovalRefiner_js__WEBPACK_IMPORTED_MODULE_19__["default"]());
        options.refiners.push(new _refiners_ENMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_15__["default"]());
        options.refiners.push(new _refiners_ENExtractYearSuffixRefiner_js__WEBPACK_IMPORTED_MODULE_20__["default"]());
        options.refiners.push(new _refiners_ENMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_21__["default"]());
        return options;
    }
}
//# sourceMappingURL=configuration.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FULL_MONTH_NAME_DICTIONARY: () => (/* binding */ FULL_MONTH_NAME_DICTIONARY),
/* harmony export */   INTEGER_WORD_DICTIONARY: () => (/* binding */ INTEGER_WORD_DICTIONARY),
/* harmony export */   MONTH_DICTIONARY: () => (/* binding */ MONTH_DICTIONARY),
/* harmony export */   NUMBER_PATTERN: () => (/* binding */ NUMBER_PATTERN),
/* harmony export */   ORDINAL_NUMBER_PATTERN: () => (/* binding */ ORDINAL_NUMBER_PATTERN),
/* harmony export */   ORDINAL_WORD_DICTIONARY: () => (/* binding */ ORDINAL_WORD_DICTIONARY),
/* harmony export */   TIME_UNITS_NO_ABBR_PATTERN: () => (/* binding */ TIME_UNITS_NO_ABBR_PATTERN),
/* harmony export */   TIME_UNITS_PATTERN: () => (/* binding */ TIME_UNITS_PATTERN),
/* harmony export */   TIME_UNIT_DICTIONARY: () => (/* binding */ TIME_UNIT_DICTIONARY),
/* harmony export */   TIME_UNIT_DICTIONARY_NO_ABBR: () => (/* binding */ TIME_UNIT_DICTIONARY_NO_ABBR),
/* harmony export */   WEEKDAY_DICTIONARY: () => (/* binding */ WEEKDAY_DICTIONARY),
/* harmony export */   YEAR_PATTERN: () => (/* binding */ YEAR_PATTERN),
/* harmony export */   parseNumberPattern: () => (/* binding */ parseNumberPattern),
/* harmony export */   parseOrdinalNumberPattern: () => (/* binding */ parseOrdinalNumberPattern),
/* harmony export */   parseTimeUnits: () => (/* binding */ parseTimeUnits),
/* harmony export */   parseYear: () => (/* binding */ parseYear)
/* harmony export */ });
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");


const WEEKDAY_DICTIONARY = {
    sunday: 0,
    sun: 0,
    "sun.": 0,
    monday: 1,
    mon: 1,
    "mon.": 1,
    tuesday: 2,
    tue: 2,
    "tue.": 2,
    wednesday: 3,
    wed: 3,
    "wed.": 3,
    thursday: 4,
    thurs: 4,
    "thurs.": 4,
    thur: 4,
    "thur.": 4,
    thu: 4,
    "thu.": 4,
    friday: 5,
    fri: 5,
    "fri.": 5,
    saturday: 6,
    sat: 6,
    "sat.": 6,
};
const FULL_MONTH_NAME_DICTIONARY = {
    january: 1,
    february: 2,
    march: 3,
    april: 4,
    may: 5,
    june: 6,
    july: 7,
    august: 8,
    september: 9,
    october: 10,
    november: 11,
    december: 12,
};
const MONTH_DICTIONARY = {
    ...FULL_MONTH_NAME_DICTIONARY,
    jan: 1,
    "jan.": 1,
    feb: 2,
    "feb.": 2,
    mar: 3,
    "mar.": 3,
    apr: 4,
    "apr.": 4,
    jun: 6,
    "jun.": 6,
    jul: 7,
    "jul.": 7,
    aug: 8,
    "aug.": 8,
    sep: 9,
    "sep.": 9,
    sept: 9,
    "sept.": 9,
    oct: 10,
    "oct.": 10,
    nov: 11,
    "nov.": 11,
    dec: 12,
    "dec.": 12,
};
const INTEGER_WORD_DICTIONARY = {
    one: 1,
    two: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6,
    seven: 7,
    eight: 8,
    nine: 9,
    ten: 10,
    eleven: 11,
    twelve: 12,
};
const ORDINAL_WORD_DICTIONARY = {
    first: 1,
    second: 2,
    third: 3,
    fourth: 4,
    fifth: 5,
    sixth: 6,
    seventh: 7,
    eighth: 8,
    ninth: 9,
    tenth: 10,
    eleventh: 11,
    twelfth: 12,
    thirteenth: 13,
    fourteenth: 14,
    fifteenth: 15,
    sixteenth: 16,
    seventeenth: 17,
    eighteenth: 18,
    nineteenth: 19,
    twentieth: 20,
    "twenty first": 21,
    "twenty-first": 21,
    "twenty second": 22,
    "twenty-second": 22,
    "twenty third": 23,
    "twenty-third": 23,
    "twenty fourth": 24,
    "twenty-fourth": 24,
    "twenty fifth": 25,
    "twenty-fifth": 25,
    "twenty sixth": 26,
    "twenty-sixth": 26,
    "twenty seventh": 27,
    "twenty-seventh": 27,
    "twenty eighth": 28,
    "twenty-eighth": 28,
    "twenty ninth": 29,
    "twenty-ninth": 29,
    "thirtieth": 30,
    "thirty first": 31,
    "thirty-first": 31,
};
const TIME_UNIT_DICTIONARY_NO_ABBR = {
    second: "second",
    seconds: "second",
    minute: "minute",
    minutes: "minute",
    hour: "hour",
    hours: "hour",
    day: "d",
    days: "d",
    week: "week",
    weeks: "week",
    month: "month",
    months: "month",
    quarter: "quarter",
    quarters: "quarter",
    year: "year",
    years: "year",
};
const TIME_UNIT_DICTIONARY = {
    s: "second",
    sec: "second",
    second: "second",
    seconds: "second",
    m: "minute",
    min: "minute",
    mins: "minute",
    minute: "minute",
    minutes: "minute",
    h: "hour",
    hr: "hour",
    hrs: "hour",
    hour: "hour",
    hours: "hour",
    d: "d",
    day: "d",
    days: "d",
    w: "w",
    week: "week",
    weeks: "week",
    mo: "month",
    mon: "month",
    mos: "month",
    month: "month",
    months: "month",
    qtr: "quarter",
    quarter: "quarter",
    quarters: "quarter",
    y: "year",
    yr: "year",
    year: "year",
    years: "year",
    ...TIME_UNIT_DICTIONARY_NO_ABBR,
};
const NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s{0,2}an?)?|an?\\b(?:\\s{0,2}few)?|few|several|the|a?\\s{0,2}couple\\s{0,2}(?:of)?)`;
function parseNumberPattern(match) {
    const num = match.toLowerCase();
    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {
        return INTEGER_WORD_DICTIONARY[num];
    }
    else if (num === "a" || num === "an" || num == "the") {
        return 1;
    }
    else if (num.match(/few/)) {
        return 3;
    }
    else if (num.match(/half/)) {
        return 0.5;
    }
    else if (num.match(/couple/)) {
        return 2;
    }
    else if (num.match(/several/)) {
        return 7;
    }
    return parseFloat(num);
}
const ORDINAL_NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;
function parseOrdinalNumberPattern(match) {
    let num = match.toLowerCase();
    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {
        return ORDINAL_WORD_DICTIONARY[num];
    }
    num = num.replace(/(?:st|nd|rd|th)$/i, "");
    return parseInt(num);
}
const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9]|2[0-5])`;
function parseYear(match) {
    if (/BE/i.test(match)) {
        match = match.replace(/BE/i, "");
        return parseInt(match) - 543;
    }
    if (/BCE?/i.test(match)) {
        match = match.replace(/BCE?/i, "");
        return -parseInt(match);
    }
    if (/(AD|CE)/i.test(match)) {
        match = match.replace(/(AD|CE)/i, "");
        return parseInt(match);
    }
    const rawYearNumber = parseInt(match);
    return (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_1__.findMostLikelyADYear)(rawYearNumber);
}
const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,3}(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(TIME_UNIT_DICTIONARY)})`;
const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
const SINGLE_TIME_UNIT_NO_ABBR_PATTERN = `(${NUMBER_PATTERN})\\s{0,3}(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(TIME_UNIT_DICTIONARY_NO_ABBR)})`;
const TIME_UNIT_CONNECTOR_PATTERN = `\\s{0,5},?(?:\\s*and)?\\s{0,5}`;
const TIME_UNITS_PATTERN = (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.repeatedTimeunitPattern)(`(?:(?:about|around)\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN, TIME_UNIT_CONNECTOR_PATTERN);
const TIME_UNITS_NO_ABBR_PATTERN = (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.repeatedTimeunitPattern)(`(?:(?:about|around)\\s{0,3})?`, SINGLE_TIME_UNIT_NO_ABBR_PATTERN, TIME_UNIT_CONNECTOR_PATTERN);
function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length).trim();
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    if (Object.keys(fragments).length == 0) {
        return null;
    }
    return fragments;
}
function collectDateTimeFragment(fragments, match) {
    if (match[0].match(/^[a-zA-Z]+$/)) {
        return;
    }
    const num = parseNumberPattern(match[1]);
    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
    fragments[unit] = num;
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   GB: () => (/* binding */ GB),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   configuration: () => (/* binding */ configuration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./configuration.js */ "./node_modules/chrono-node/dist/esm/locales/en/configuration.js");






const configuration = new _configuration_js__WEBPACK_IMPORTED_MODULE_3__["default"]();
const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(configuration.createCasualConfiguration(false));
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(configuration.createConfiguration(true, false));
const GB = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(configuration.createCasualConfiguration(true));
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENCasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENCasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENCasualDateParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");




const PATTERN = /(now|today|tonight|tomorrow|tmr|tmrw|yesterday|last\s*night)(?=\W|$)/i;
class ENCasualDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return PATTERN;
    }
    innerExtract(context, match) {
        let targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const lowerText = match[0].toLowerCase();
        let component = context.createParsingComponents();
        switch (lowerText) {
            case "now":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.now(context.reference);
                break;
            case "today":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.today(context.reference);
                break;
            case "yesterday":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.yesterday(context.reference);
                break;
            case "tomorrow":
            case "tmr":
            case "tmrw":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.tomorrow(context.reference);
                break;
            case "tonight":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.tonight(context.reference);
                break;
            default:
                if (lowerText.match(/last\s*night/)) {
                    if (targetDate.hour() > 6) {
                        targetDate = targetDate.add(-1, "day");
                    }
                    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(component, targetDate);
                    component.imply("hour", 0);
                }
                break;
        }
        component.addTag("parser/ENCasualDateParser");
        return component;
    }
}
//# sourceMappingURL=ENCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENCasualTimeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENCasualTimeParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENCasualTimeParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");


const PATTERN = /(?:this)?\s{0,3}(morning|afternoon|evening|night|midnight|midday|noon)(?=\W|$)/i;
class ENCasualTimeParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        let component = null;
        switch (match[1].toLowerCase()) {
            case "afternoon":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.afternoon(context.reference);
                break;
            case "evening":
            case "night":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.evening(context.reference);
                break;
            case "midnight":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.midnight(context.reference);
                break;
            case "morning":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.morning(context.reference);
                break;
            case "noon":
            case "midday":
                component = _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.noon(context.reference);
                break;
        }
        if (component) {
            component.addTag("parser/ENCasualTimeParser");
        }
        return component;
    }
}
//# sourceMappingURL=ENCasualTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameLittleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameLittleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENMonthNameLittleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");






const PATTERN = new RegExp(`(?:on\\s{0,3})?` +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.ORDINAL_NUMBER_PATTERN})` +
    `(?:` +
    `\\s{0,3}(?:to|\\-|\\–|until|through|till)?\\s{0,3}` +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.ORDINAL_NUMBER_PATTERN})` +
    ")?" +
    `(?:-|/|\\s{0,3}(?:of)?\\s{0,3})` +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_0__.MONTH_DICTIONARY)})` +
    "(?:" +
    `(?:-|/|,?\\s{0,3})` +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.YEAR_PATTERN}(?!\\w))` +
    ")?" +
    "(?=\\W|$)", "i");
const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const MONTH_NAME_GROUP = 3;
const YEAR_GROUP = 4;
class ENMonthNameLittleEndianParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_0__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseOrdinalNumberPattern)(match[DATE_GROUP]);
        if (day > 31) {
            match.index = match.index + match[DATE_GROUP].length;
            return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
            const yearNumber = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseYear)(match[YEAR_GROUP]);
            result.start.assign("year", yearNumber);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, day, month);
            result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
            const endDate = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseOrdinalNumberPattern)(match[DATE_TO_GROUP]);
            result.end = result.start.clone();
            result.end.assign("day", endDate);
        }
        return result;
    }
}
//# sourceMappingURL=ENMonthNameLittleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameMiddleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameMiddleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENMonthNameMiddleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");






const PATTERN = new RegExp(`(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})` +
    "(?:-|/|\\s*,?\\s*)" +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.ORDINAL_NUMBER_PATTERN})(?!\\s*(?:am|pm))\\s*` +
    "(?:" +
    "(?:to|\\-)\\s*" +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.ORDINAL_NUMBER_PATTERN})\\s*` +
    ")?" +
    "(?:" +
    `(?:-|/|\\s*,\\s*|\\s+)` +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.YEAR_PATTERN})` +
    ")?" +
    "(?=\\W|$)(?!\\:\\d)", "i");
const MONTH_NAME_GROUP = 1;
const DATE_GROUP = 2;
const DATE_TO_GROUP = 3;
const YEAR_GROUP = 4;
class ENMonthNameMiddleEndianParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    constructor(shouldSkipYearLikeDate) {
        super();
        this.shouldSkipYearLikeDate = shouldSkipYearLikeDate;
    }
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseOrdinalNumberPattern)(match[DATE_GROUP]);
        if (day > 31) {
            return null;
        }
        if (this.shouldSkipYearLikeDate) {
            if (!match[DATE_TO_GROUP] && !match[YEAR_GROUP] && match[DATE_GROUP].match(/^2[0-5]$/)) {
                return null;
            }
        }
        const components = context
            .createParsingComponents({
            day: day,
            month: month,
        })
            .addTag("parser/ENMonthNameMiddleEndianParser");
        if (match[YEAR_GROUP]) {
            const year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseYear)(match[YEAR_GROUP]);
            components.assign("year", year);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, day, month);
            components.imply("year", year);
        }
        if (!match[DATE_TO_GROUP]) {
            return components;
        }
        const endDate = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseOrdinalNumberPattern)(match[DATE_TO_GROUP]);
        const result = context.createParsingResult(match.index, match[0]);
        result.start = components;
        result.end = components.clone();
        result.end.assign("day", endDate);
        return result;
    }
}
//# sourceMappingURL=ENMonthNameMiddleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameParser.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENMonthNameParser.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENMonthNameParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");





const PATTERN = new RegExp(`((?:in)\\s*)?` +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})` +
    `\\s*` +
    `(?:` +
    `[,-]?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.YEAR_PATTERN})?` +
    ")?" +
    "(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)", "i");
const PREFIX_GROUP = 1;
const MONTH_NAME_GROUP = 2;
const YEAR_GROUP = 3;
class ENMonthNameParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const monthName = match[MONTH_NAME_GROUP].toLowerCase();
        if (match[0].length <= 3 && !_constants_js__WEBPACK_IMPORTED_MODULE_1__.FULL_MONTH_NAME_DICTIONARY[monthName]) {
            return null;
        }
        const result = context.createParsingResult(match.index + (match[PREFIX_GROUP] || "").length, match.index + match[0].length);
        result.start.imply("day", 1);
        result.start.addTag("parser/ENMonthNameParser");
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[monthName];
        result.start.assign("month", month);
        if (match[YEAR_GROUP]) {
            const year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseYear)(match[YEAR_GROUP]);
            result.start.assign("year", year);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, 1, month);
            result.start.imply("year", year);
        }
        return result;
    }
}
//# sourceMappingURL=ENMonthNameParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENRelativeDateFormatParser.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENRelativeDateFormatParser.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENRelativeDateFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");





const PATTERN = new RegExp(`(this|last|past|next|after\\s*this)\\s*(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_2__.TIME_UNIT_DICTIONARY)})(?=\\s*)` + "(?=\\W|$)", "i");
const MODIFIER_WORD_GROUP = 1;
const RELATIVE_WORD_GROUP = 2;
class ENRelativeDateFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_3__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();
        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        const timeunit = _constants_js__WEBPACK_IMPORTED_MODULE_2__.TIME_UNIT_DICTIONARY[unitWord];
        if (modifier == "next" || modifier.startsWith("after")) {
            const timeUnits = {};
            timeUnits[timeunit] = 1;
            return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        if (modifier == "last" || modifier == "past") {
            const timeUnits = {};
            timeUnits[timeunit] = -1;
            return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        const components = context.createParsingComponents();
        let date = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.reference.instant);
        if (unitWord.match(/week/i)) {
            date = date.add(-date.get("d"), "d");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.imply("year", date.year());
        }
        else if (unitWord.match(/month/i)) {
            date = date.add(-date.date() + 1, "d");
            components.imply("day", date.date());
            components.assign("year", date.year());
            components.assign("month", date.month() + 1);
        }
        else if (unitWord.match(/year/i)) {
            date = date.add(-date.date() + 1, "d");
            date = date.add(-date.month(), "month");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.assign("year", date.year());
        }
        return components;
    }
}
//# sourceMappingURL=ENRelativeDateFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENSlashMonthFormatParser.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENSlashMonthFormatParser.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENSlashMonthFormatParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");

const PATTERN = new RegExp("([0-9]|0[1-9]|1[012])/([0-9]{4})" + "", "i");
const MONTH_GROUP = 1;
const YEAR_GROUP = 2;
class ENSlashMonthFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const year = parseInt(match[YEAR_GROUP]);
        const month = parseInt(match[MONTH_GROUP]);
        return context.createParsingComponents().imply("day", 1).assign("month", month).assign("year", year);
    }
}
//# sourceMappingURL=ENSlashMonthFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeExpressionParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeExpressionParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js");


class ENTimeExpressionParser extends _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__.AbstractTimeExpressionParser {
    constructor(strictMode) {
        super(strictMode);
    }
    followingPhase() {
        return "\\s*(?:\\-|\\–|\\~|\\〜|to|until|through|till|\\?)\\s*";
    }
    primaryPrefix() {
        return "(?:(?:at|from)\\s*)??";
    }
    primarySuffix() {
        return "(?:\\s*(?:o\\W*clock|at\\s*night|in\\s*the\\s*(?:morning|afternoon)))?(?!/)(?=\\W|$)";
    }
    extractPrimaryTimeComponents(context, match) {
        const components = super.extractPrimaryTimeComponents(context, match);
        if (!components) {
            return components;
        }
        if (match[0].endsWith("night")) {
            const hour = components.get("hour");
            if (hour >= 6 && hour < 12) {
                components.assign("hour", components.get("hour") + 12);
                components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.PM);
            }
            else if (hour < 6) {
                components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.AM);
            }
        }
        if (match[0].endsWith("afternoon")) {
            components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.PM);
            const hour = components.get("hour");
            if (hour >= 0 && hour <= 6) {
                components.assign("hour", components.get("hour") + 12);
            }
        }
        if (match[0].endsWith("morning")) {
            components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.AM);
            const hour = components.get("hour");
            if (hour < 12) {
                components.assign("hour", components.get("hour"));
            }
        }
        return components.addTag("parser/ENTimeExpressionParser");
    }
}
//# sourceMappingURL=ENTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitAgoFormatParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitAgoFormatParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENTimeUnitAgoFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");




const PATTERN = new RegExp(`(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN})\\s{0,5}(?:ago|before|earlier)(?=\\W|$)`, "i");
const STRICT_PATTERN = new RegExp(`(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_NO_ABBR_PATTERN})\\s{0,5}(?:ago|before|earlier)(?=\\W|$)`, "i");
class ENTimeUnitAgoFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
        super();
        this.strictMode = strictMode;
    }
    innerPattern() {
        return this.strictMode ? STRICT_PATTERN : PATTERN;
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[1]);
        if (!timeUnits) {
            return null;
        }
        const outputTimeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
}
//# sourceMappingURL=ENTimeUnitAgoFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENTimeUnitCasualRelativeFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");




const PATTERN = new RegExp(`(this|last|past|next|after|\\+|-)\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
const PATTERN_NO_ABBR = new RegExp(`(this|last|past|next|after|\\+|-)\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_NO_ABBR_PATTERN})(?=\\W|$)`, "i");
class ENTimeUnitCasualRelativeFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    constructor(allowAbbreviations = true) {
        super();
        this.allowAbbreviations = allowAbbreviations;
    }
    innerPattern() {
        return this.allowAbbreviations ? PATTERN : PATTERN_NO_ABBR;
    }
    innerExtract(context, match) {
        const prefix = match[1].toLowerCase();
        let timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[2]);
        if (!timeUnits) {
            return null;
        }
        switch (prefix) {
            case "last":
            case "past":
            case "-":
                timeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
                break;
        }
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=ENTimeUnitCasualRelativeFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitLaterFormatParser.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitLaterFormatParser.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENTimeUnitLaterFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



const PATTERN = new RegExp(`(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN})\\s{0,5}(?:later|after|from now|henceforth|forward|out)` + "(?=(?:\\W|$))", "i");
const STRICT_PATTERN = new RegExp(`(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_NO_ABBR_PATTERN})\\s{0,5}(later|after|from now)(?=\\W|$)`, "i");
const GROUP_NUM_TIMEUNITS = 1;
class ENTimeUnitLaterFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
        super();
        this.strictMode = strictMode;
    }
    innerPattern() {
        return this.strictMode ? STRICT_PATTERN : PATTERN;
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[GROUP_NUM_TIMEUNITS]);
        if (!timeUnits) {
            return null;
        }
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=ENTimeUnitLaterFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitWithinFormatParser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENTimeUnitWithinFormatParser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENTimeUnitWithinFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



const PATTERN_WITH_OPTIONAL_PREFIX = new RegExp(`(?:(?:within|in|for)\\s*)?` +
    `(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
const PATTERN_WITH_PREFIX = new RegExp(`(?:within|in|for)\\s*` +
    `(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
const PATTERN_WITH_PREFIX_STRICT = new RegExp(`(?:within|in|for)\\s*` +
    `(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_NO_ABBR_PATTERN})(?=\\W|$)`, "i");
class ENTimeUnitWithinFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
        super();
        this.strictMode = strictMode;
    }
    innerPattern(context) {
        if (this.strictMode) {
            return PATTERN_WITH_PREFIX_STRICT;
        }
        return context.option.forwardDate ? PATTERN_WITH_OPTIONAL_PREFIX : PATTERN_WITH_PREFIX;
    }
    innerExtract(context, match) {
        if (match[0].match(/^for\s*the\s*\w+/)) {
            return null;
        }
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[1]);
        if (!timeUnits) {
            return null;
        }
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=ENTimeUnitWithinFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENWeekdayParser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENWeekdayParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENWeekdayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/calculation/weekdays.js */ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js");




const PATTERN = new RegExp("(?:(?:\\,|\\(|\\（)\\s*)?" +
    "(?:on\\s*?)?" +
    "(?:(this|last|past|next)\\s*)?" +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY)})` +
    "(?:\\s*(?:\\,|\\)|\\）))?" +
    "(?:\\s*(this|last|past|next)\\s*week)?" +
    "(?=\\W|$)", "i");
const PREFIX_GROUP = 1;
const WEEKDAY_GROUP = 2;
const POSTFIX_GROUP = 3;
class ENWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const weekday = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLowerCase();
        let modifier = null;
        if (modifierWord == "last" || modifierWord == "past") {
            modifier = "last";
        }
        else if (modifierWord == "next") {
            modifier = "next";
        }
        else if (modifierWord == "this") {
            modifier = "this";
        }
        return (0,_common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__.createParsingComponentsAtWeekday)(context.reference, weekday, modifier);
    }
}
//# sourceMappingURL=ENWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/parsers/ENYearMonthDayParser.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/parsers/ENYearMonthDayParser.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENYearMonthDayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



const PATTERN = new RegExp(`([0-9]{4})[-\\.\\/\\s]` +
    `(?:(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})|([0-9]{1,2}))[-\\.\\/\\s]` +
    `([0-9]{1,2})` +
    "(?=\\W|$)", "i");
const YEAR_NUMBER_GROUP = 1;
const MONTH_NAME_GROUP = 2;
const MONTH_NUMBER_GROUP = 3;
const DATE_NUMBER_GROUP = 4;
class ENYearMonthDayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    constructor(strictMonthDateOrder) {
        super();
        this.strictMonthDateOrder = strictMonthDateOrder;
    }
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const year = parseInt(match[YEAR_NUMBER_GROUP]);
        let day = parseInt(match[DATE_NUMBER_GROUP]);
        let month = match[MONTH_NUMBER_GROUP]
            ? parseInt(match[MONTH_NUMBER_GROUP])
            : _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        if (month < 1 || month > 12) {
            if (this.strictMonthDateOrder) {
                return null;
            }
            if (day >= 1 && day <= 12) {
                [month, day] = [day, month];
            }
        }
        if (day < 1 || day > 31) {
            return null;
        }
        return {
            day: day,
            month: month,
            year: year,
        };
    }
}
//# sourceMappingURL=ENYearMonthDayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENExtractYearSuffixRefiner.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/refiners/ENExtractYearSuffixRefiner.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENExtractYearSuffixRefiner)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");

const YEAR_SUFFIX_PATTERN = new RegExp(`^\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.YEAR_PATTERN})`, "i");
const YEAR_GROUP = 1;
class ENExtractYearSuffixRefiner {
    refine(context, results) {
        results.forEach(function (result) {
            if (!result.start.isDateWithUnknownYear()) {
                return;
            }
            const suffix = context.text.substring(result.index + result.text.length);
            const match = YEAR_SUFFIX_PATTERN.exec(suffix);
            if (!match) {
                return;
            }
            context.debug(() => {
                console.log(`Extracting year: '${match[0]}' into : ${result}`);
            });
            const year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseYear)(match[YEAR_GROUP]);
            if (result.end != null) {
                result.end.assign("year", year);
            }
            result.start.assign("year", year);
            result.text += match[0];
        });
        return results;
    }
}
//# sourceMappingURL=ENExtractYearSuffixRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class ENMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(to|-|–|until|through|till)\s*$/i;
    }
}
//# sourceMappingURL=ENMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeDateTimeRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeDateTimeRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class ENMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return new RegExp("^\\s*(T|at|after|before|on|of|,|-|\\.|∙|:)?\\s*$");
    }
}
//# sourceMappingURL=ENMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeRelativeAfterDateRefiner.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeRelativeAfterDateRefiner.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENMergeRelativeAfterDateRefiner)
/* harmony export */ });
/* harmony import */ var _common_abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/abstractRefiners.js */ "./node_modules/chrono-node/dist/esm/common/abstractRefiners.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");




function IsPositiveFollowingReference(result) {
    return result.text.match(/^[+-]/i) != null;
}
function IsNegativeFollowingReference(result) {
    return result.text.match(/^-/i) != null;
}
class ENMergeRelativeAfterDateRefiner extends _common_abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__.MergingRefiner {
    shouldMergeResults(textBetween, currentResult, nextResult) {
        if (!textBetween.match(/^\s*$/i)) {
            return false;
        }
        return IsPositiveFollowingReference(nextResult) || IsNegativeFollowingReference(nextResult);
    }
    mergeResults(textBetween, currentResult, nextResult, context) {
        let timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(nextResult.text);
        if (IsNegativeFollowingReference(nextResult)) {
            timeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
        }
        const components = _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(new _results_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceWithTimezone(currentResult.start.date()), timeUnits);
        return new _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingResult(currentResult.reference, currentResult.index, `${currentResult.text}${textBetween}${nextResult.text}`, components);
    }
}
//# sourceMappingURL=ENMergeRelativeAfterDateRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeRelativeFollowByDateRefiner.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/en/refiners/ENMergeRelativeFollowByDateRefiner.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ENMergeRelativeFollowByDateRefiner)
/* harmony export */ });
/* harmony import */ var _common_abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/abstractRefiners.js */ "./node_modules/chrono-node/dist/esm/common/abstractRefiners.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/en/constants.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");




function hasImpliedEarlierReferenceDate(result) {
    return result.text.match(/\s+(before|from)$/i) != null;
}
function hasImpliedLaterReferenceDate(result) {
    return result.text.match(/\s+(after|since)$/i) != null;
}
class ENMergeRelativeFollowByDateRefiner extends _common_abstractRefiners_js__WEBPACK_IMPORTED_MODULE_0__.MergingRefiner {
    patternBetween() {
        return /^\s*$/i;
    }
    shouldMergeResults(textBetween, currentResult, nextResult) {
        if (!textBetween.match(this.patternBetween())) {
            return false;
        }
        if (!hasImpliedEarlierReferenceDate(currentResult) && !hasImpliedLaterReferenceDate(currentResult)) {
            return false;
        }
        return !!nextResult.start.get("day") && !!nextResult.start.get("month") && !!nextResult.start.get("year");
    }
    mergeResults(textBetween, currentResult, nextResult) {
        let timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(currentResult.text);
        if (hasImpliedEarlierReferenceDate(currentResult)) {
            timeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
        }
        const components = _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(new _results_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceWithTimezone(nextResult.start.date()), timeUnits);
        return new _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingResult(nextResult.reference, currentResult.index, `${currentResult.text}${textBetween}${nextResult.text}`, components);
    }
}
//# sourceMappingURL=ENMergeRelativeFollowByDateRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INTEGER_WORD_DICTIONARY: () => (/* binding */ INTEGER_WORD_DICTIONARY),
/* harmony export */   MONTH_DICTIONARY: () => (/* binding */ MONTH_DICTIONARY),
/* harmony export */   NUMBER_PATTERN: () => (/* binding */ NUMBER_PATTERN),
/* harmony export */   TIME_UNITS_PATTERN: () => (/* binding */ TIME_UNITS_PATTERN),
/* harmony export */   TIME_UNIT_DICTIONARY: () => (/* binding */ TIME_UNIT_DICTIONARY),
/* harmony export */   WEEKDAY_DICTIONARY: () => (/* binding */ WEEKDAY_DICTIONARY),
/* harmony export */   YEAR_PATTERN: () => (/* binding */ YEAR_PATTERN),
/* harmony export */   parseNumberPattern: () => (/* binding */ parseNumberPattern),
/* harmony export */   parseTimeUnits: () => (/* binding */ parseTimeUnits),
/* harmony export */   parseYear: () => (/* binding */ parseYear)
/* harmony export */ });
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");

const WEEKDAY_DICTIONARY = {
    "domingo": 0,
    "dom": 0,
    "lunes": 1,
    "lun": 1,
    "martes": 2,
    "mar": 2,
    "miércoles": 3,
    "miercoles": 3,
    "mié": 3,
    "mie": 3,
    "jueves": 4,
    "jue": 4,
    "viernes": 5,
    "vie": 5,
    "sábado": 6,
    "sabado": 6,
    "sáb": 6,
    "sab": 6,
};
const MONTH_DICTIONARY = {
    "enero": 1,
    "ene": 1,
    "ene.": 1,
    "febrero": 2,
    "feb": 2,
    "feb.": 2,
    "marzo": 3,
    "mar": 3,
    "mar.": 3,
    "abril": 4,
    "abr": 4,
    "abr.": 4,
    "mayo": 5,
    "may": 5,
    "may.": 5,
    "junio": 6,
    "jun": 6,
    "jun.": 6,
    "julio": 7,
    "jul": 7,
    "jul.": 7,
    "agosto": 8,
    "ago": 8,
    "ago.": 8,
    "septiembre": 9,
    "setiembre": 9,
    "sep": 9,
    "sep.": 9,
    "octubre": 10,
    "oct": 10,
    "oct.": 10,
    "noviembre": 11,
    "nov": 11,
    "nov.": 11,
    "diciembre": 12,
    "dic": 12,
    "dic.": 12,
};
const INTEGER_WORD_DICTIONARY = {
    "uno": 1,
    "dos": 2,
    "tres": 3,
    "cuatro": 4,
    "cinco": 5,
    "seis": 6,
    "siete": 7,
    "ocho": 8,
    "nueve": 9,
    "diez": 10,
    "once": 11,
    "doce": 12,
    "trece": 13,
};
const TIME_UNIT_DICTIONARY = {
    "sec": "second",
    "segundo": "second",
    "segundos": "second",
    "min": "minute",
    "mins": "minute",
    "minuto": "minute",
    "minutos": "minute",
    "h": "hour",
    "hr": "hour",
    "hrs": "hour",
    "hora": "hour",
    "horas": "hour",
    "día": "d",
    "días": "d",
    "semana": "week",
    "semanas": "week",
    "mes": "month",
    "meses": "month",
    "cuarto": "quarter",
    "cuartos": "quarter",
    "año": "year",
    "años": "year",
};
const NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|un?|uno?|una?|algunos?|unos?|demi-?)`;
function parseNumberPattern(match) {
    const num = match.toLowerCase();
    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {
        return INTEGER_WORD_DICTIONARY[num];
    }
    else if (num === "un" || num === "una" || num === "uno") {
        return 1;
    }
    else if (num.match(/algunos?/)) {
        return 3;
    }
    else if (num.match(/unos?/)) {
        return 3;
    }
    else if (num.match(/media?/)) {
        return 0.5;
    }
    return parseFloat(num);
}
const YEAR_PATTERN = "[0-9]{1,4}(?![^\\s]\\d)(?:\\s*[a|d]\\.?\\s*c\\.?|\\s*a\\.?\\s*d\\.?)?";
function parseYear(match) {
    if (match.match(/^[0-9]{1,4}$/)) {
        let yearNumber = parseInt(match);
        if (yearNumber < 100) {
            if (yearNumber > 50) {
                yearNumber = yearNumber + 1900;
            }
            else {
                yearNumber = yearNumber + 2000;
            }
        }
        return yearNumber;
    }
    if (match.match(/a\.?\s*c\.?/i)) {
        match = match.replace(/a\.?\s*c\.?/i, "");
        return -parseInt(match);
    }
    return parseInt(match);
}
const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,5}(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(TIME_UNIT_DICTIONARY)})\\s{0,5}`;
const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
const TIME_UNITS_PATTERN = (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.repeatedTimeunitPattern)("", SINGLE_TIME_UNIT_PATTERN);
function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length);
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
}
function collectDateTimeFragment(fragments, match) {
    const num = parseNumberPattern(match[1]);
    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
    fragments[unit] = num;
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/parsers/SlashDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js");
/* harmony import */ var _parsers_ESWeekdayParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/ESWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESWeekdayParser.js");
/* harmony import */ var _parsers_ESTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/ESTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESTimeExpressionParser.js");
/* harmony import */ var _refiners_ESMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./refiners/ESMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/es/refiners/ESMergeDateTimeRefiner.js");
/* harmony import */ var _refiners_ESMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./refiners/ESMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/es/refiners/ESMergeDateRangeRefiner.js");
/* harmony import */ var _parsers_ESMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/ESMonthNameLittleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESMonthNameLittleEndianParser.js");
/* harmony import */ var _parsers_ESCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/ESCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESCasualDateParser.js");
/* harmony import */ var _parsers_ESCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/ESCasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESCasualTimeParser.js");
/* harmony import */ var _parsers_ESTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers/ESTimeUnitWithinFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESTimeUnitWithinFormatParser.js");















const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration(true));
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration(littleEndian = true) {
    const option = createConfiguration(false, littleEndian);
    option.parsers.push(new _parsers_ESCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    option.parsers.push(new _parsers_ESCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
    return option;
}
function createConfiguration(strictMode = true, littleEndian = true) {
    return (0,_configurations_js__WEBPACK_IMPORTED_MODULE_5__.includeCommonConfiguration)({
        parsers: [
            new _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__["default"](littleEndian),
            new _parsers_ESWeekdayParser_js__WEBPACK_IMPORTED_MODULE_7__["default"](),
            new _parsers_ESTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_8__["default"](),
            new _parsers_ESMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](),
            new _parsers_ESTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_10__["default"](),
        ],
        refiners: [new _refiners_ESMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_11__["default"](), new _refiners_ESMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_12__["default"]()],
    }, strictMode);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESCasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/parsers/ESCasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ESCasualDateParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");


class ESCasualDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return /(ahora|hoy|mañana|ayer)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
            case "ahora":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.now(context.reference);
            case "hoy":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.today(context.reference);
            case "mañana":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.tomorrow(context.reference);
            case "ayer":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.yesterday(context.reference);
        }
        return component;
    }
}
//# sourceMappingURL=ESCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESCasualTimeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/parsers/ESCasualTimeParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ESCasualTimeParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");




class ESCasualTimeParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return /(?:esta\s*)?(mañana|tarde|medianoche|mediodia|mediodía|noche)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const component = context.createParsingComponents();
        switch (match[1].toLowerCase()) {
            case "tarde":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                component.imply("hour", 15);
                break;
            case "noche":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                component.imply("hour", 22);
                break;
            case "mañana":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                component.imply("hour", 6);
                break;
            case "medianoche":
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignTheNextDay)(component, targetDate);
                component.imply("hour", 0);
                component.imply("minute", 0);
                component.imply("second", 0);
                break;
            case "mediodia":
            case "mediodía":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                component.imply("hour", 12);
                break;
        }
        return component;
    }
}
//# sourceMappingURL=ESCasualTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESMonthNameLittleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/parsers/ESMonthNameLittleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ESMonthNameLittleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/es/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");





const PATTERN = new RegExp(`([0-9]{1,2})(?:º|ª|°)?` +
    "(?:\\s*(?:desde|de|\\-|\\–|ao?|\\s)\\s*([0-9]{1,2})(?:º|ª|°)?)?\\s*(?:de)?\\s*" +
    `(?:-|/|\\s*(?:de|,)?\\s*)` +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})` +
    `(?:\\s*(?:de|,)?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.YEAR_PATTERN}))?` +
    `(?=\\W|$)`, "i");
const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const MONTH_NAME_GROUP = 3;
const YEAR_GROUP = 4;
class ESMonthNameLittleEndianParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = parseInt(match[DATE_GROUP]);
        if (day > 31) {
            match.index = match.index + match[DATE_GROUP].length;
            return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
            const yearNumber = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseYear)(match[YEAR_GROUP]);
            result.start.assign("year", yearNumber);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, day, month);
            result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
            const endDate = parseInt(match[DATE_TO_GROUP]);
            result.end = result.start.clone();
            result.end.assign("day", endDate);
        }
        return result;
    }
}
//# sourceMappingURL=ESMonthNameLittleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESTimeExpressionParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/parsers/ESTimeExpressionParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ESTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js");

class ESTimeExpressionParser extends _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__.AbstractTimeExpressionParser {
    primaryPrefix() {
        return "(?:(?:aslas|deslas|las?|al?|de|del)\\s*)?";
    }
    followingPhase() {
        return "\\s*(?:\\-|\\–|\\~|\\〜|a(?:l)?|\\?)\\s*";
    }
}
//# sourceMappingURL=ESTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESTimeUnitWithinFormatParser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/parsers/ESTimeUnitWithinFormatParser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ESTimeUnitWithinFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/es/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



class ESTimeUnitWithinFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return new RegExp(`(?:en|por|durante|de|dentro de)\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[1]);
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=ESTimeUnitWithinFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/parsers/ESWeekdayParser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/parsers/ESWeekdayParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ESWeekdayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/es/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/calculation/weekdays.js */ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js");




const PATTERN = new RegExp("(?:(?:\\,|\\(|\\（)\\s*)?" +
    "(?:(este|esta|pasado|pr[oó]ximo)\\s*)?" +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY)})` +
    "(?:\\s*(?:\\,|\\)|\\）))?" +
    "(?:\\s*(este|esta|pasado|pr[óo]ximo)\\s*semana)?" +
    "(?=\\W|\\d|$)", "i");
const PREFIX_GROUP = 1;
const WEEKDAY_GROUP = 2;
const POSTFIX_GROUP = 3;
class ESWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const weekday = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY[dayOfWeek];
        if (weekday === undefined) {
            return null;
        }
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let norm = prefix || postfix || "";
        norm = norm.toLowerCase();
        let modifier = null;
        if (norm == "pasado") {
            modifier = "this";
        }
        else if (norm == "próximo" || norm == "proximo") {
            modifier = "next";
        }
        else if (norm == "este") {
            modifier = "this";
        }
        return (0,_common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__.createParsingComponentsAtWeekday)(context.reference, weekday, modifier);
    }
}
//# sourceMappingURL=ESWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/refiners/ESMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/refiners/ESMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ESMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class ESMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(?:-)\s*$/i;
    }
}
//# sourceMappingURL=ESMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/es/refiners/ESMergeDateTimeRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/es/refiners/ESMergeDateTimeRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ESMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class ESMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return new RegExp("^\\s*(?:,|de|aslas|a)?\\s*$");
    }
}
//# sourceMappingURL=ESMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INTEGER_WORD_DICTIONARY: () => (/* binding */ INTEGER_WORD_DICTIONARY),
/* harmony export */   MONTH_DICTIONARY: () => (/* binding */ MONTH_DICTIONARY),
/* harmony export */   NUMBER_PATTERN: () => (/* binding */ NUMBER_PATTERN),
/* harmony export */   ORDINAL_NUMBER_PATTERN: () => (/* binding */ ORDINAL_NUMBER_PATTERN),
/* harmony export */   TIME_UNITS_PATTERN: () => (/* binding */ TIME_UNITS_PATTERN),
/* harmony export */   TIME_UNIT_DICTIONARY: () => (/* binding */ TIME_UNIT_DICTIONARY),
/* harmony export */   WEEKDAY_DICTIONARY: () => (/* binding */ WEEKDAY_DICTIONARY),
/* harmony export */   YEAR_PATTERN: () => (/* binding */ YEAR_PATTERN),
/* harmony export */   parseNumberPattern: () => (/* binding */ parseNumberPattern),
/* harmony export */   parseOrdinalNumberPattern: () => (/* binding */ parseOrdinalNumberPattern),
/* harmony export */   parseTimeUnits: () => (/* binding */ parseTimeUnits),
/* harmony export */   parseYear: () => (/* binding */ parseYear)
/* harmony export */ });
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");

const WEEKDAY_DICTIONARY = {
    "dimanche": 0,
    "dim": 0,
    "lundi": 1,
    "lun": 1,
    "mardi": 2,
    "mar": 2,
    "mercredi": 3,
    "mer": 3,
    "jeudi": 4,
    "jeu": 4,
    "vendredi": 5,
    "ven": 5,
    "samedi": 6,
    "sam": 6,
};
const MONTH_DICTIONARY = {
    "janvier": 1,
    "jan": 1,
    "jan.": 1,
    "février": 2,
    "fév": 2,
    "fév.": 2,
    "fevrier": 2,
    "fev": 2,
    "fev.": 2,
    "mars": 3,
    "mar": 3,
    "mar.": 3,
    "avril": 4,
    "avr": 4,
    "avr.": 4,
    "mai": 5,
    "juin": 6,
    "jun": 6,
    "juillet": 7,
    "juil": 7,
    "jul": 7,
    "jul.": 7,
    "août": 8,
    "aout": 8,
    "septembre": 9,
    "sep": 9,
    "sep.": 9,
    "sept": 9,
    "sept.": 9,
    "octobre": 10,
    "oct": 10,
    "oct.": 10,
    "novembre": 11,
    "nov": 11,
    "nov.": 11,
    "décembre": 12,
    "decembre": 12,
    "dec": 12,
    "dec.": 12,
};
const INTEGER_WORD_DICTIONARY = {
    "un": 1,
    "deux": 2,
    "trois": 3,
    "quatre": 4,
    "cinq": 5,
    "six": 6,
    "sept": 7,
    "huit": 8,
    "neuf": 9,
    "dix": 10,
    "onze": 11,
    "douze": 12,
    "treize": 13,
};
const TIME_UNIT_DICTIONARY = {
    "sec": "second",
    "seconde": "second",
    "secondes": "second",
    "min": "minute",
    "mins": "minute",
    "minute": "minute",
    "minutes": "minute",
    "h": "hour",
    "hr": "hour",
    "hrs": "hour",
    "heure": "hour",
    "heures": "hour",
    "jour": "d",
    "jours": "d",
    "semaine": "week",
    "semaines": "week",
    "mois": "month",
    "trimestre": "quarter",
    "trimestres": "quarter",
    "ans": "year",
    "année": "year",
    "années": "year",
};
const NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|une?\\b|quelques?|demi-?)`;
function parseNumberPattern(match) {
    const num = match.toLowerCase();
    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {
        return INTEGER_WORD_DICTIONARY[num];
    }
    else if (num === "une" || num === "un") {
        return 1;
    }
    else if (num.match(/quelques?/)) {
        return 3;
    }
    else if (num.match(/demi-?/)) {
        return 0.5;
    }
    return parseFloat(num);
}
const ORDINAL_NUMBER_PATTERN = `(?:[0-9]{1,2}(?:er)?)`;
function parseOrdinalNumberPattern(match) {
    let num = match.toLowerCase();
    num = num.replace(/(?:er)$/i, "");
    return parseInt(num);
}
const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s*(?:AC|AD|p\\.\\s*C(?:hr?)?\\.\\s*n\\.)|[1-2][0-9]{3}|[5-9][0-9])`;
function parseYear(match) {
    if (/AC/i.test(match)) {
        match = match.replace(/BC/i, "");
        return -parseInt(match);
    }
    if (/AD/i.test(match) || /C/i.test(match)) {
        match = match.replace(/[^\d]+/i, "");
        return parseInt(match);
    }
    let yearNumber = parseInt(match);
    if (yearNumber < 100) {
        if (yearNumber > 50) {
            yearNumber = yearNumber + 1900;
        }
        else {
            yearNumber = yearNumber + 2000;
        }
    }
    return yearNumber;
}
const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,5}(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(TIME_UNIT_DICTIONARY)})\\s{0,5}`;
const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
const TIME_UNITS_PATTERN = (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.repeatedTimeunitPattern)("", SINGLE_TIME_UNIT_PATTERN);
function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length);
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
}
function collectDateTimeFragment(fragments, match) {
    const num = parseNumberPattern(match[1]);
    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
    fragments[unit] = num;
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _parsers_FRCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/FRCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRCasualDateParser.js");
/* harmony import */ var _parsers_FRCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/FRCasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRCasualTimeParser.js");
/* harmony import */ var _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../common/parsers/SlashDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js");
/* harmony import */ var _parsers_FRTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/FRTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeExpressionParser.js");
/* harmony import */ var _refiners_FRMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./refiners/FRMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/fr/refiners/FRMergeDateTimeRefiner.js");
/* harmony import */ var _refiners_FRMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./refiners/FRMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/fr/refiners/FRMergeDateRangeRefiner.js");
/* harmony import */ var _parsers_FRWeekdayParser_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/FRWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRWeekdayParser.js");
/* harmony import */ var _parsers_FRSpecificTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers/FRSpecificTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRSpecificTimeExpressionParser.js");
/* harmony import */ var _parsers_FRMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/FRMonthNameLittleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRMonthNameLittleEndianParser.js");
/* harmony import */ var _parsers_FRTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/FRTimeUnitAgoFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitAgoFormatParser.js");
/* harmony import */ var _parsers_FRTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/FRTimeUnitWithinFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitWithinFormatParser.js");
/* harmony import */ var _parsers_FRTimeUnitRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/FRTimeUnitRelativeFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitRelativeFormatParser.js");


















const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration(true));
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration(littleEndian = true) {
    const option = createConfiguration(false, littleEndian);
    option.parsers.unshift(new _parsers_FRCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    option.parsers.unshift(new _parsers_FRCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
    option.parsers.unshift(new _parsers_FRTimeUnitRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_5__["default"]());
    return option;
}
function createConfiguration(strictMode = true, littleEndian = true) {
    return (0,_configurations_js__WEBPACK_IMPORTED_MODULE_6__.includeCommonConfiguration)({
        parsers: [
            new _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_7__["default"](littleEndian),
            new _parsers_FRMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_8__["default"](),
            new _parsers_FRTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](),
            new _parsers_FRSpecificTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_10__["default"](),
            new _parsers_FRTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_11__["default"](),
            new _parsers_FRTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_12__["default"](),
            new _parsers_FRWeekdayParser_js__WEBPACK_IMPORTED_MODULE_13__["default"](),
        ],
        refiners: [new _refiners_FRMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_14__["default"](), new _refiners_FRMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_15__["default"]()],
    }, strictMode);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRCasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRCasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRCasualDateParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");





class FRCasualDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return /(maintenant|aujourd'hui|demain|hier|cette\s*nuit|la\s*veille)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        let targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
            case "maintenant":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.now(context.reference);
            case "aujourd'hui":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.today(context.reference);
            case "hier":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.yesterday(context.reference);
            case "demain":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.tomorrow(context.reference);
            default:
                if (lowerText.match(/cette\s*nuit/)) {
                    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(component, targetDate);
                    component.imply("hour", 22);
                    component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_4__.Meridiem.PM);
                }
                else if (lowerText.match(/la\s*veille/)) {
                    targetDate = targetDate.add(-1, "day");
                    (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(component, targetDate);
                    component.imply("hour", 0);
                }
        }
        return component;
    }
}
//# sourceMappingURL=FRCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRCasualTimeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRCasualTimeParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRCasualTimeParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");


class FRCasualTimeParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return /(cet?)?\s*(matin|soir|après-midi|aprem|a midi|à minuit)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const suffixLower = match[2].toLowerCase();
        const component = context.createParsingComponents();
        switch (suffixLower) {
            case "après-midi":
            case "aprem":
                component.imply("hour", 14);
                component.imply("minute", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.PM);
                break;
            case "soir":
                component.imply("hour", 18);
                component.imply("minute", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.PM);
                break;
            case "matin":
                component.imply("hour", 8);
                component.imply("minute", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.AM);
                break;
            case "a midi":
                component.imply("hour", 12);
                component.imply("minute", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.AM);
                break;
            case "à minuit":
                component.imply("hour", 0);
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_1__.Meridiem.AM);
                break;
        }
        return component;
    }
}
//# sourceMappingURL=FRCasualTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRMonthNameLittleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRMonthNameLittleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRMonthNameLittleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/fr/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");






const PATTERN = new RegExp("(?:on\\s*?)?" +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.ORDINAL_NUMBER_PATTERN})` +
    `(?:\\s*(?:au|\\-|\\–|jusqu'au?|\\s)\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.ORDINAL_NUMBER_PATTERN}))?` +
    `(?:-|/|\\s*(?:de)?\\s*)` +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_0__.MONTH_DICTIONARY)})` +
    `(?:(?:-|/|,?\\s*)(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.YEAR_PATTERN}(?![^\\s]\\d)))?` +
    `(?=\\W|$)`, "i");
const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const MONTH_NAME_GROUP = 3;
const YEAR_GROUP = 4;
class FRMonthNameLittleEndianParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_0__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseOrdinalNumberPattern)(match[DATE_GROUP]);
        if (day > 31) {
            match.index = match.index + match[DATE_GROUP].length;
            return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
            const yearNumber = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseYear)(match[YEAR_GROUP]);
            result.start.assign("year", yearNumber);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, day, month);
            result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
            const endDate = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseOrdinalNumberPattern)(match[DATE_TO_GROUP]);
            result.end = result.start.clone();
            result.end.assign("day", endDate);
        }
        return result;
    }
}
//# sourceMappingURL=FRMonthNameLittleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRSpecificTimeExpressionParser.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRSpecificTimeExpressionParser.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRSpecificTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");

const FIRST_REG_PATTERN = new RegExp("(^|\\s|T)" +
    "(?:(?:[àa])\\s*)?" +
    "(\\d{1,2})(?:h|:)?" +
    "(?:(\\d{1,2})(?:m|:)?)?" +
    "(?:(\\d{1,2})(?:s|:)?)?" +
    "(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?" +
    "(?=\\W|$)", "i");
const SECOND_REG_PATTERN = new RegExp("^\\s*(\\-|\\–|\\~|\\〜|[àa]|\\?)\\s*" +
    "(\\d{1,2})(?:h|:)?" +
    "(?:(\\d{1,2})(?:m|:)?)?" +
    "(?:(\\d{1,2})(?:s|:)?)?" +
    "(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?" +
    "(?=\\W|$)", "i");
const HOUR_GROUP = 2;
const MINUTE_GROUP = 3;
const SECOND_GROUP = 4;
const AM_PM_HOUR_GROUP = 5;
class FRSpecificTimeExpressionParser {
    pattern(context) {
        return FIRST_REG_PATTERN;
    }
    extract(context, match) {
        const result = context.createParsingResult(match.index + match[1].length, match[0].substring(match[1].length));
        if (result.text.match(/^\d{4}$/)) {
            match.index += match[0].length;
            return null;
        }
        result.start = FRSpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), match);
        if (!result.start) {
            match.index += match[0].length;
            return null;
        }
        const remainingText = context.text.substring(match.index + match[0].length);
        const secondMatch = SECOND_REG_PATTERN.exec(remainingText);
        if (secondMatch) {
            result.end = FRSpecificTimeExpressionParser.extractTimeComponent(result.start.clone(), secondMatch);
            if (result.end) {
                result.text += secondMatch[0];
            }
        }
        return result;
    }
    static extractTimeComponent(extractingComponents, match) {
        let hour = 0;
        let minute = 0;
        let meridiem = null;
        hour = parseInt(match[HOUR_GROUP]);
        if (match[MINUTE_GROUP] != null) {
            minute = parseInt(match[MINUTE_GROUP]);
        }
        if (minute >= 60 || hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
        }
        if (match[AM_PM_HOUR_GROUP] != null) {
            if (hour > 12)
                return null;
            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM;
                if (hour == 12) {
                    hour = 0;
                }
            }
            if (ampm == "p") {
                meridiem = _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM;
                if (hour != 12) {
                    hour += 12;
                }
            }
        }
        extractingComponents.assign("hour", hour);
        extractingComponents.assign("minute", minute);
        if (meridiem !== null) {
            extractingComponents.assign("meridiem", meridiem);
        }
        else {
            if (hour < 12) {
                extractingComponents.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM);
            }
            else {
                extractingComponents.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM);
            }
        }
        if (match[SECOND_GROUP] != null) {
            const second = parseInt(match[SECOND_GROUP]);
            if (second >= 60)
                return null;
            extractingComponents.assign("second", second);
        }
        return extractingComponents;
    }
}
//# sourceMappingURL=FRSpecificTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeExpressionParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeExpressionParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js");

class FRTimeExpressionParser extends _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__.AbstractTimeExpressionParser {
    primaryPrefix() {
        return "(?:(?:[àa])\\s*)?";
    }
    followingPhase() {
        return "\\s*(?:\\-|\\–|\\~|\\〜|[àa]|\\?)\\s*";
    }
    extractPrimaryTimeComponents(context, match) {
        if (match[0].match(/^\s*\d{4}\s*$/)) {
            return null;
        }
        return super.extractPrimaryTimeComponents(context, match);
    }
}
//# sourceMappingURL=FRTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitAgoFormatParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitAgoFormatParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRTimeUnitAgoFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/fr/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");




class FRTimeUnitAgoFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    constructor() {
        super();
    }
    innerPattern() {
        return new RegExp(`il y a\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN})(?=(?:\\W|$))`, "i");
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[1]);
        const outputTimeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
}
//# sourceMappingURL=FRTimeUnitAgoFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitRelativeFormatParser.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitRelativeFormatParser.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRTimeUnitAgoFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/fr/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");





class FRTimeUnitAgoFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    constructor() {
        super();
    }
    innerPattern() {
        return new RegExp(`(?:les?|la|l'|du|des?)\\s*` +
            `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER_PATTERN})?` +
            `(?:\\s*(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?))?` +
            `\\s*(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNIT_DICTIONARY)})` +
            `(?:\\s*(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?))?`, "i");
    }
    innerExtract(context, match) {
        const num = match[1] ? (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseNumberPattern)(match[1]) : 1;
        const unit = _constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNIT_DICTIONARY[match[3].toLowerCase()];
        let timeUnits = {};
        timeUnits[unit] = num;
        let modifier = match[2] || match[4] || "";
        modifier = modifier.toLowerCase();
        if (!modifier) {
            return;
        }
        if (/derni[eè]re?s?/.test(modifier) || /pass[ée]e?s?/.test(modifier) || /pr[ée]c[ée]dents?/.test(modifier)) {
            timeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_3__.reverseTimeUnits)(timeUnits);
        }
        return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=FRTimeUnitRelativeFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitWithinFormatParser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRTimeUnitWithinFormatParser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRTimeUnitWithinFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/fr/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



class FRTimeUnitWithinFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return new RegExp(`(?:dans|en|pour|pendant|de)\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[1]);
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=FRTimeUnitWithinFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRWeekdayParser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/parsers/FRWeekdayParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRWeekdayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/fr/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/calculation/weekdays.js */ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js");




const PATTERN = new RegExp("(?:(?:\\,|\\(|\\（)\\s*)?" +
    "(?:(?:ce)\\s*)?" +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY)})` +
    "(?:\\s*(?:\\,|\\)|\\）))?" +
    "(?:\\s*(dernier|prochain)\\s*)?" +
    "(?=\\W|\\d|$)", "i");
const WEEKDAY_GROUP = 1;
const POSTFIX_GROUP = 2;
class FRWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const weekday = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY[dayOfWeek];
        if (weekday === undefined) {
            return null;
        }
        let suffix = match[POSTFIX_GROUP];
        suffix = suffix || "";
        suffix = suffix.toLowerCase();
        let modifier = null;
        if (suffix == "dernier") {
            modifier = "last";
        }
        else if (suffix == "prochain") {
            modifier = "next";
        }
        return (0,_common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__.createParsingComponentsAtWeekday)(context.reference, weekday, modifier);
    }
}
//# sourceMappingURL=FRWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/refiners/FRMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/refiners/FRMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class FRMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(à|a|au|-)\s*$/i;
    }
}
//# sourceMappingURL=FRMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/fr/refiners/FRMergeDateTimeRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/fr/refiners/FRMergeDateTimeRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FRMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class FRMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return new RegExp("^\\s*(T|à|a|au|vers|de|,|-)?\\s*$");
    }
}
//# sourceMappingURL=FRMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ja/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ja/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   toHankaku: () => (/* binding */ toHankaku)
/* harmony export */ });
function toHankaku(text) {
    return String(text)
        .replace(/\u2019/g, "\u0027")
        .replace(/\u201D/g, "\u0022")
        .replace(/\u3000/g, "\u0020")
        .replace(/\uFFE5/g, "\u00A5")
        .replace(/[\uFF01\uFF03-\uFF06\uFF08\uFF09\uFF0C-\uFF19\uFF1C-\uFF1F\uFF21-\uFF3B\uFF3D\uFF3F\uFF41-\uFF5B\uFF5D\uFF5E]/g, alphaNum);
}
function alphaNum(token) {
    return String.fromCharCode(token.charCodeAt(0) - 65248);
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ja/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ja/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _parsers_JPStandardParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/JPStandardParser.js */ "./node_modules/chrono-node/dist/esm/locales/ja/parsers/JPStandardParser.js");
/* harmony import */ var _refiners_JPMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./refiners/JPMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/ja/refiners/JPMergeDateRangeRefiner.js");
/* harmony import */ var _parsers_JPCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/JPCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/ja/parsers/JPCasualDateParser.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");








const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration());
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration() {
    const option = createConfiguration();
    option.parsers.unshift(new _parsers_JPCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    return option;
}
function createConfiguration() {
    return {
        parsers: [new _parsers_JPStandardParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]()],
        refiners: [new _refiners_JPMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_5__["default"]()],
    };
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ja/parsers/JPCasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ja/parsers/JPCasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ JPCasualDateParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");



const PATTERN = /今日|きょう|当日|とうじつ|昨日|きのう|明日|あした|今夜|こんや|今夕|こんゆう|今晩|こんばん|今朝|けさ/i;
function normalizeTextToKanji(text) {
    switch (text) {
        case "きょう":
            return "今日";
        case "とうじつ":
            return "当日";
        case "きのう":
            return "昨日";
        case "あした":
            return "明日";
        case "こんや":
            return "今夜";
        case "こんゆう":
            return "今夕";
        case "こんばん":
            return "今晩";
        case "けさ":
            return "今朝";
        default:
            return text;
    }
}
class JPCasualDateParser {
    pattern() {
        return PATTERN;
    }
    extract(context, match) {
        const text = normalizeTextToKanji(match[0]);
        const date = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const components = context.createParsingComponents();
        switch (text) {
            case "昨日":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.yesterday(context.reference);
            case "明日":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.tomorrow(context.reference);
            case "今日":
            case "当日":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.today(context.reference);
        }
        if (text == "今夜" || text == "今夕" || text == "今晩") {
            components.imply("hour", 22);
            components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
        }
        else if (text.match("今朝")) {
            components.imply("hour", 6);
            components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
        }
        components.assign("day", date.date());
        components.assign("month", date.month() + 1);
        components.assign("year", date.year());
        return components;
    }
}
//# sourceMappingURL=JPCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ja/parsers/JPStandardParser.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ja/parsers/JPStandardParser.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ JPStandardParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ja/constants.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");



const PATTERN = /(?:(?:([同今本])|((昭和|平成|令和)?([0-9０-９]{1,4}|元)))年\s*)?([0-9０-９]{1,2})月\s*([0-9０-９]{1,2})日/i;
const SPECIAL_YEAR_GROUP = 1;
const TYPICAL_YEAR_GROUP = 2;
const ERA_GROUP = 3;
const YEAR_NUMBER_GROUP = 4;
const MONTH_GROUP = 5;
const DAY_GROUP = 6;
class JPStandardParser {
    pattern() {
        return PATTERN;
    }
    extract(context, match) {
        const month = parseInt((0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.toHankaku)(match[MONTH_GROUP]));
        const day = parseInt((0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.toHankaku)(match[DAY_GROUP]));
        const components = context.createParsingComponents({
            day: day,
            month: month,
        });
        if (match[SPECIAL_YEAR_GROUP] && match[SPECIAL_YEAR_GROUP].match("同|今|本")) {
            const moment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
            components.assign("year", moment.year());
        }
        if (match[TYPICAL_YEAR_GROUP]) {
            const yearNumText = match[YEAR_NUMBER_GROUP];
            let year = yearNumText == "元" ? 1 : parseInt((0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.toHankaku)(yearNumText));
            if (match[ERA_GROUP] == "令和") {
                year += 2018;
            }
            else if (match[ERA_GROUP] == "平成") {
                year += 1988;
            }
            else if (match[ERA_GROUP] == "昭和") {
                year += 1925;
            }
            components.assign("year", year);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_2__.findYearClosestToRef)(context.refDate, day, month);
            components.imply("year", year);
        }
        return components;
    }
}
//# sourceMappingURL=JPStandardParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ja/refiners/JPMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ja/refiners/JPMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ JPMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class JPMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(から|ー|-)\s*$/i;
    }
}
//# sourceMappingURL=JPMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   INTEGER_WORD_DICTIONARY: () => (/* binding */ INTEGER_WORD_DICTIONARY),
/* harmony export */   MONTH_DICTIONARY: () => (/* binding */ MONTH_DICTIONARY),
/* harmony export */   NUMBER_PATTERN: () => (/* binding */ NUMBER_PATTERN),
/* harmony export */   ORDINAL_NUMBER_PATTERN: () => (/* binding */ ORDINAL_NUMBER_PATTERN),
/* harmony export */   ORDINAL_WORD_DICTIONARY: () => (/* binding */ ORDINAL_WORD_DICTIONARY),
/* harmony export */   TIME_UNITS_PATTERN: () => (/* binding */ TIME_UNITS_PATTERN),
/* harmony export */   TIME_UNIT_DICTIONARY: () => (/* binding */ TIME_UNIT_DICTIONARY),
/* harmony export */   WEEKDAY_DICTIONARY: () => (/* binding */ WEEKDAY_DICTIONARY),
/* harmony export */   YEAR_PATTERN: () => (/* binding */ YEAR_PATTERN),
/* harmony export */   parseNumberPattern: () => (/* binding */ parseNumberPattern),
/* harmony export */   parseOrdinalNumberPattern: () => (/* binding */ parseOrdinalNumberPattern),
/* harmony export */   parseTimeUnits: () => (/* binding */ parseTimeUnits),
/* harmony export */   parseYear: () => (/* binding */ parseYear)
/* harmony export */ });
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");


const WEEKDAY_DICTIONARY = {
    zondag: 0,
    zon: 0,
    "zon.": 0,
    zo: 0,
    "zo.": 0,
    maandag: 1,
    ma: 1,
    "ma.": 1,
    dinsdag: 2,
    din: 2,
    "din.": 2,
    di: 2,
    "di.": 2,
    woensdag: 3,
    woe: 3,
    "woe.": 3,
    wo: 3,
    "wo.": 3,
    donderdag: 4,
    dond: 4,
    "dond.": 4,
    do: 4,
    "do.": 4,
    vrijdag: 5,
    vrij: 5,
    "vrij.": 5,
    vr: 5,
    "vr.": 5,
    zaterdag: 6,
    zat: 6,
    "zat.": 6,
    "za": 6,
    "za.": 6,
};
const MONTH_DICTIONARY = {
    januari: 1,
    jan: 1,
    "jan.": 1,
    februari: 2,
    feb: 2,
    "feb.": 2,
    maart: 3,
    mar: 3,
    "mar.": 3,
    mrt: 3,
    "mrt.": 3,
    april: 4,
    apr: 4,
    "apr.": 4,
    mei: 5,
    juni: 6,
    jun: 6,
    "jun.": 6,
    juli: 7,
    jul: 7,
    "jul.": 7,
    augustus: 8,
    aug: 8,
    "aug.": 8,
    september: 9,
    sep: 9,
    "sep.": 9,
    sept: 9,
    "sept.": 9,
    oktober: 10,
    okt: 10,
    "okt.": 10,
    november: 11,
    nov: 11,
    "nov.": 11,
    december: 12,
    dec: 12,
    "dec.": 12,
};
const INTEGER_WORD_DICTIONARY = {
    een: 1,
    twee: 2,
    drie: 3,
    vier: 4,
    vijf: 5,
    zes: 6,
    zeven: 7,
    acht: 8,
    negen: 9,
    tien: 10,
    elf: 11,
    twaalf: 12,
};
const ORDINAL_WORD_DICTIONARY = {
    eerste: 1,
    tweede: 2,
    derde: 3,
    vierde: 4,
    vijfde: 5,
    zesde: 6,
    zevende: 7,
    achtste: 8,
    negende: 9,
    tiende: 10,
    elfde: 11,
    twaalfde: 12,
    dertiende: 13,
    veertiende: 14,
    vijftiende: 15,
    zestiende: 16,
    zeventiende: 17,
    achttiende: 18,
    negentiende: 19,
    twintigste: 20,
    "eenentwintigste": 21,
    "tweeëntwintigste": 22,
    "drieentwintigste": 23,
    "vierentwintigste": 24,
    "vijfentwintigste": 25,
    "zesentwintigste": 26,
    "zevenentwintigste": 27,
    "achtentwintig": 28,
    "negenentwintig": 29,
    "dertigste": 30,
    "eenendertigste": 31,
};
const TIME_UNIT_DICTIONARY = {
    sec: "second",
    second: "second",
    seconden: "second",
    min: "minute",
    mins: "minute",
    minute: "minute",
    minuut: "minute",
    minuten: "minute",
    minuutje: "minute",
    h: "hour",
    hr: "hour",
    hrs: "hour",
    uur: "hour",
    u: "hour",
    uren: "hour",
    dag: "d",
    dagen: "d",
    week: "week",
    weken: "week",
    maand: "month",
    maanden: "month",
    jaar: "year",
    jr: "year",
    jaren: "year",
};
const NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+[\\.,][0-9]+|halve?|half|paar)`;
function parseNumberPattern(match) {
    const num = match.toLowerCase();
    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {
        return INTEGER_WORD_DICTIONARY[num];
    }
    else if (num === "paar") {
        return 2;
    }
    else if (num === "half" || num.match(/halve?/)) {
        return 0.5;
    }
    return parseFloat(num.replace(",", "."));
}
const ORDINAL_NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:ste|de)?)`;
function parseOrdinalNumberPattern(match) {
    let num = match.toLowerCase();
    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {
        return ORDINAL_WORD_DICTIONARY[num];
    }
    num = num.replace(/(?:ste|de)$/i, "");
    return parseInt(num);
}
const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\s*(?:voor Christus|na Christus)|[1-2][0-9]{3}|[5-9][0-9])`;
function parseYear(match) {
    if (/voor Christus/i.test(match)) {
        match = match.replace(/voor Christus/i, "");
        return -parseInt(match);
    }
    if (/na Christus/i.test(match)) {
        match = match.replace(/na Christus/i, "");
        return parseInt(match);
    }
    const rawYearNumber = parseInt(match);
    return (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_1__.findMostLikelyADYear)(rawYearNumber);
}
const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,5}(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(TIME_UNIT_DICTIONARY)})\\s{0,5}`;
const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
const TIME_UNITS_PATTERN = (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.repeatedTimeunitPattern)(`(?:(?:binnen|in)\\s*)?`, SINGLE_TIME_UNIT_PATTERN);
function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length);
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
}
function collectDateTimeFragment(fragments, match) {
    const num = parseNumberPattern(match[1]);
    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
    fragments[unit] = num;
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _refiners_NLMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./refiners/NLMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/nl/refiners/NLMergeDateRangeRefiner.js");
/* harmony import */ var _refiners_NLMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./refiners/NLMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/nl/refiners/NLMergeDateTimeRefiner.js");
/* harmony import */ var _parsers_NLCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/NLCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualDateParser.js");
/* harmony import */ var _parsers_NLCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/NLCasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualTimeParser.js");
/* harmony import */ var _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/parsers/SlashDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js");
/* harmony import */ var _parsers_NLTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/NLTimeUnitWithinFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitWithinFormatParser.js");
/* harmony import */ var _parsers_NLWeekdayParser_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/NLWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLWeekdayParser.js");
/* harmony import */ var _parsers_NLMonthNameMiddleEndianParser_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/NLMonthNameMiddleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLMonthNameMiddleEndianParser.js");
/* harmony import */ var _parsers_NLMonthNameParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/NLMonthNameParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLMonthNameParser.js");
/* harmony import */ var _parsers_NLSlashMonthFormatParser_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./parsers/NLSlashMonthFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLSlashMonthFormatParser.js");
/* harmony import */ var _parsers_NLTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./parsers/NLTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeExpressionParser.js");
/* harmony import */ var _parsers_NLCasualYearMonthDayParser_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parsers/NLCasualYearMonthDayParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualYearMonthDayParser.js");
/* harmony import */ var _parsers_NLCasualDateTimeParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/NLCasualDateTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualDateTimeParser.js");
/* harmony import */ var _parsers_NLTimeUnitCasualRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/NLTimeUnitCasualRelativeFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitCasualRelativeFormatParser.js");
/* harmony import */ var _parsers_NLRelativeDateFormatParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/NLRelativeDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLRelativeDateFormatParser.js");
/* harmony import */ var _parsers_NLTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./parsers/NLTimeUnitAgoFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitAgoFormatParser.js");
/* harmony import */ var _parsers_NLTimeUnitLaterFormatParser_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./parsers/NLTimeUnitLaterFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitLaterFormatParser.js");























const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration(true));
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration(littleEndian = true) {
    const option = createConfiguration(false, littleEndian);
    option.parsers.unshift(new _parsers_NLCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    option.parsers.unshift(new _parsers_NLCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
    option.parsers.unshift(new _parsers_NLCasualDateTimeParser_js__WEBPACK_IMPORTED_MODULE_5__["default"]());
    option.parsers.unshift(new _parsers_NLMonthNameParser_js__WEBPACK_IMPORTED_MODULE_6__["default"]());
    option.parsers.unshift(new _parsers_NLRelativeDateFormatParser_js__WEBPACK_IMPORTED_MODULE_7__["default"]());
    option.parsers.unshift(new _parsers_NLTimeUnitCasualRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_8__["default"]());
    return option;
}
function createConfiguration(strictMode = true, littleEndian = true) {
    return (0,_configurations_js__WEBPACK_IMPORTED_MODULE_9__.includeCommonConfiguration)({
        parsers: [
            new _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_10__["default"](littleEndian),
            new _parsers_NLTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_11__["default"](),
            new _parsers_NLMonthNameMiddleEndianParser_js__WEBPACK_IMPORTED_MODULE_12__["default"](),
            new _parsers_NLMonthNameParser_js__WEBPACK_IMPORTED_MODULE_6__["default"](),
            new _parsers_NLWeekdayParser_js__WEBPACK_IMPORTED_MODULE_13__["default"](),
            new _parsers_NLCasualYearMonthDayParser_js__WEBPACK_IMPORTED_MODULE_14__["default"](),
            new _parsers_NLSlashMonthFormatParser_js__WEBPACK_IMPORTED_MODULE_15__["default"](),
            new _parsers_NLTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_16__["default"](strictMode),
            new _parsers_NLTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_17__["default"](strictMode),
            new _parsers_NLTimeUnitLaterFormatParser_js__WEBPACK_IMPORTED_MODULE_18__["default"](strictMode),
        ],
        refiners: [new _refiners_NLMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_19__["default"](), new _refiners_NLMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_20__["default"]()],
    }, strictMode);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLCasualDateParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");


class NLCasualDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return /(nu|vandaag|morgen|morgend|gisteren)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
            case "nu":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.now(context.reference);
            case "vandaag":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.today(context.reference);
            case "morgen":
            case "morgend":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.tomorrow(context.reference);
            case "gisteren":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.yesterday(context.reference);
        }
        return component;
    }
}
//# sourceMappingURL=NLCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualDateTimeParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualDateTimeParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLCasualDateTimeParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");




const DATE_GROUP = 1;
const TIME_OF_DAY_GROUP = 2;
class NLCasualDateTimeParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return /(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const dateText = match[DATE_GROUP].toLowerCase();
        const timeText = match[TIME_OF_DAY_GROUP].toLowerCase();
        const component = context.createParsingComponents();
        const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        switch (dateText) {
            case "gisteren":
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarDate)(component, targetDate.add(-1, "day"));
                break;
            case "van":
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignSimilarDate)(component, targetDate);
                break;
            case "morgen":
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_2__.assignTheNextDay)(component, targetDate);
                break;
        }
        switch (timeText) {
            case "ochtend":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.AM);
                component.imply("hour", 6);
                break;
            case "middag":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.AM);
                component.imply("hour", 12);
                break;
            case "namiddag":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
                component.imply("hour", 15);
                break;
            case "avond":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_3__.Meridiem.PM);
                component.imply("hour", 20);
                break;
        }
        return component;
    }
}
//# sourceMappingURL=NLCasualDateTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualTimeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualTimeParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLCasualTimeParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");




const DAY_GROUP = 1;
const MOMENT_GROUP = 2;
class NLCasualTimeParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return /(deze)?\s*(namiddag|avond|middernacht|ochtend|middag|'s middags|'s avonds|'s ochtends)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const component = context.createParsingComponents();
        if (match[DAY_GROUP] === "deze") {
            component.assign("day", context.refDate.getDate());
            component.assign("month", context.refDate.getMonth() + 1);
            component.assign("year", context.refDate.getFullYear());
        }
        switch (match[MOMENT_GROUP].toLowerCase()) {
            case "namiddag":
            case "'s namiddags":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                component.imply("hour", 15);
                break;
            case "avond":
            case "'s avonds'":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                component.imply("hour", 20);
                break;
            case "middernacht":
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignTheNextDay)(component, targetDate);
                component.imply("hour", 0);
                component.imply("minute", 0);
                component.imply("second", 0);
                break;
            case "ochtend":
            case "'s ochtends":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                component.imply("hour", 6);
                break;
            case "middag":
            case "'s middags":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                component.imply("hour", 12);
                break;
        }
        return component;
    }
}
//# sourceMappingURL=NLCasualTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualYearMonthDayParser.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLCasualYearMonthDayParser.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLCasualYearMonthDayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



const PATTERN = new RegExp(`([0-9]{4})[\\.\\/\\s]` +
    `(?:(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})|([0-9]{1,2}))[\\.\\/\\s]` +
    `([0-9]{1,2})` +
    "(?=\\W|$)", "i");
const YEAR_NUMBER_GROUP = 1;
const MONTH_NAME_GROUP = 2;
const MONTH_NUMBER_GROUP = 3;
const DATE_NUMBER_GROUP = 4;
class NLCasualYearMonthDayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const month = match[MONTH_NUMBER_GROUP]
            ? parseInt(match[MONTH_NUMBER_GROUP])
            : _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        if (month < 1 || month > 12) {
            return null;
        }
        const year = parseInt(match[YEAR_NUMBER_GROUP]);
        const day = parseInt(match[DATE_NUMBER_GROUP]);
        return {
            day: day,
            month: month,
            year: year,
        };
    }
}
//# sourceMappingURL=NLCasualYearMonthDayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLMonthNameMiddleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLMonthNameMiddleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLMonthNameMiddleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");






const PATTERN = new RegExp("(?:on\\s*?)?" +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.ORDINAL_NUMBER_PATTERN})` +
    "(?:\\s*" +
    "(?:tot|\\-|\\–|until|through|till|\\s)\\s*" +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.ORDINAL_NUMBER_PATTERN})` +
    ")?" +
    "(?:-|/|\\s*(?:of)?\\s*)" +
    "(" +
    (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_0__.MONTH_DICTIONARY) +
    ")" +
    "(?:" +
    "(?:-|/|,?\\s*)" +
    `(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.YEAR_PATTERN}(?![^\\s]\\d))` +
    ")?" +
    "(?=\\W|$)", "i");
const MONTH_NAME_GROUP = 3;
const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const YEAR_GROUP = 4;
class NLMonthNameMiddleEndianParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_0__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseOrdinalNumberPattern)(match[DATE_GROUP]);
        if (day > 31) {
            match.index = match.index + match[DATE_GROUP].length;
            return null;
        }
        const components = context.createParsingComponents({
            day: day,
            month: month,
        });
        if (match[YEAR_GROUP]) {
            const year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseYear)(match[YEAR_GROUP]);
            components.assign("year", year);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, day, month);
            components.imply("year", year);
        }
        if (!match[DATE_TO_GROUP]) {
            return components;
        }
        const endDate = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseOrdinalNumberPattern)(match[DATE_TO_GROUP]);
        const result = context.createParsingResult(match.index, match[0]);
        result.start = components;
        result.end = components.clone();
        result.end.assign("day", endDate);
        return result;
    }
}
//# sourceMappingURL=NLMonthNameMiddleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLMonthNameParser.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLMonthNameParser.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLMonthNameParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");





const PATTERN = new RegExp(`(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})` +
    `\\s*` +
    `(?:` +
    `[,-]?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.YEAR_PATTERN})?` +
    ")?" +
    "(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)", "i");
const MONTH_NAME_GROUP = 1;
const YEAR_GROUP = 2;
class NLMonthNameParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const components = context.createParsingComponents();
        components.imply("day", 1);
        const monthName = match[MONTH_NAME_GROUP];
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[monthName.toLowerCase()];
        components.assign("month", month);
        if (match[YEAR_GROUP]) {
            const year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseYear)(match[YEAR_GROUP]);
            components.assign("year", year);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, 1, month);
            components.imply("year", year);
        }
        return components;
    }
}
//# sourceMappingURL=NLMonthNameParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLRelativeDateFormatParser.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLRelativeDateFormatParser.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLRelativeDateFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");





const PATTERN = new RegExp(`(dit|deze|(?:aan)?komend|volgend|afgelopen|vorig)e?\\s*(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_2__.TIME_UNIT_DICTIONARY)})(?=\\s*)` +
    "(?=\\W|$)", "i");
const MODIFIER_WORD_GROUP = 1;
const RELATIVE_WORD_GROUP = 2;
class NLRelativeDateFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_3__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();
        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        const timeunit = _constants_js__WEBPACK_IMPORTED_MODULE_2__.TIME_UNIT_DICTIONARY[unitWord];
        if (modifier == "volgend" || modifier == "komend" || modifier == "aankomend") {
            const timeUnits = {};
            timeUnits[timeunit] = 1;
            return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        if (modifier == "afgelopen" || modifier == "vorig") {
            const timeUnits = {};
            timeUnits[timeunit] = -1;
            return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        const components = context.createParsingComponents();
        let date = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.reference.instant);
        if (unitWord.match(/week/i)) {
            date = date.add(-date.get("d"), "d");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.imply("year", date.year());
        }
        else if (unitWord.match(/maand/i)) {
            date = date.add(-date.date() + 1, "d");
            components.imply("day", date.date());
            components.assign("year", date.year());
            components.assign("month", date.month() + 1);
        }
        else if (unitWord.match(/jaar/i)) {
            date = date.add(-date.date() + 1, "d");
            date = date.add(-date.month(), "month");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.assign("year", date.year());
        }
        return components;
    }
}
//# sourceMappingURL=NLRelativeDateFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLSlashMonthFormatParser.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLSlashMonthFormatParser.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLSlashMonthFormatParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");

const PATTERN = new RegExp("([0-9]|0[1-9]|1[012])/([0-9]{4})" + "", "i");
const MONTH_GROUP = 1;
const YEAR_GROUP = 2;
class NLSlashMonthFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const year = parseInt(match[YEAR_GROUP]);
        const month = parseInt(match[MONTH_GROUP]);
        return context.createParsingComponents().imply("day", 1).assign("month", month).assign("year", year);
    }
}
//# sourceMappingURL=NLSlashMonthFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeExpressionParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeExpressionParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js");

class NLTimeExpressionParser extends _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__.AbstractTimeExpressionParser {
    primaryPrefix() {
        return "(?:(?:om)\\s*)?";
    }
    followingPhase() {
        return "\\s*(?:\\-|\\–|\\~|\\〜|om|\\?)\\s*";
    }
    primarySuffix() {
        return "(?:\\s*(?:uur))?(?!/)(?=\\W|$)";
    }
    extractPrimaryTimeComponents(context, match) {
        if (match[0].match(/^\s*\d{4}\s*$/)) {
            return null;
        }
        return super.extractPrimaryTimeComponents(context, match);
    }
}
//# sourceMappingURL=NLTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitAgoFormatParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitAgoFormatParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLTimeUnitAgoFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");




const PATTERN = new RegExp("" + "(" + _constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN + ")" + "(?:geleden|voor|eerder)(?=(?:\\W|$))", "i");
const STRICT_PATTERN = new RegExp("" + "(" + _constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN + ")" + "geleden(?=(?:\\W|$))", "i");
class NLTimeUnitAgoFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
        super();
        this.strictMode = strictMode;
    }
    innerPattern() {
        return this.strictMode ? STRICT_PATTERN : PATTERN;
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[1]);
        const outputTimeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
}
//# sourceMappingURL=NLTimeUnitAgoFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitCasualRelativeFormatParser.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitCasualRelativeFormatParser.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLTimeUnitCasualRelativeFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");




const PATTERN = new RegExp(`(dit|deze|vorig|afgelopen|(?:aan)?komend|over|\\+|-)e?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN})(?=\\W|$)`, "i");
const PREFIX_WORD_GROUP = 1;
const TIME_UNIT_WORD_GROUP = 2;
class NLTimeUnitCasualRelativeFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const prefix = match[PREFIX_WORD_GROUP].toLowerCase();
        let timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[TIME_UNIT_WORD_GROUP]);
        switch (prefix) {
            case "vorig":
            case "afgelopen":
            case "-":
                timeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
                break;
        }
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=NLTimeUnitCasualRelativeFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitLaterFormatParser.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitLaterFormatParser.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLTimeUnitLaterFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



const PATTERN = new RegExp("" + "(" + _constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN + ")" + "(later|na|vanaf nu|voortaan|vooruit|uit)" + "(?=(?:\\W|$))", "i");
const STRICT_PATTERN = new RegExp("" + "(" + _constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN + ")" + "(later|vanaf nu)" + "(?=(?:\\W|$))", "i");
const GROUP_NUM_TIMEUNITS = 1;
class NLTimeUnitLaterFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    constructor(strictMode) {
        super();
        this.strictMode = strictMode;
    }
    innerPattern() {
        return this.strictMode ? STRICT_PATTERN : PATTERN;
    }
    innerExtract(context, match) {
        const fragments = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[GROUP_NUM_TIMEUNITS]);
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, fragments);
    }
}
//# sourceMappingURL=NLTimeUnitLaterFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitWithinFormatParser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLTimeUnitWithinFormatParser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLTimeUnitWithinFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



class NLTimeUnitWithinFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return new RegExp(`(?:binnen|in|binnen de|voor)\\s*` + "(" + _constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN + ")" + `(?=\\W|$)`, "i");
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[1]);
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=NLTimeUnitWithinFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLWeekdayParser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/parsers/NLWeekdayParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLWeekdayParser)
/* harmony export */ });
/* harmony import */ var _nl_constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../nl/constants.js */ "./node_modules/chrono-node/dist/esm/locales/nl/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/calculation/weekdays.js */ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js");




const PATTERN = new RegExp("(?:(?:\\,|\\(|\\（)\\s*)?" +
    "(?:op\\s*?)?" +
    "(?:(deze|vorige|volgende)\\s*(?:week\\s*)?)?" +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_nl_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY)})` +
    "(?=\\W|$)", "i");
const PREFIX_GROUP = 1;
const WEEKDAY_GROUP = 2;
const POSTFIX_GROUP = 3;
class NLWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const weekday = _nl_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLowerCase();
        let modifier = null;
        if (modifierWord == "vorige") {
            modifier = "last";
        }
        else if (modifierWord == "volgende") {
            modifier = "next";
        }
        else if (modifierWord == "deze") {
            modifier = "this";
        }
        return (0,_common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__.createParsingComponentsAtWeekday)(context.reference, weekday, modifier);
    }
}
//# sourceMappingURL=NLWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/refiners/NLMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/refiners/NLMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class NLMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(tot|-)\s*$/i;
    }
}
//# sourceMappingURL=NLMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/nl/refiners/NLMergeDateTimeRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/nl/refiners/NLMergeDateTimeRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NLMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class NLMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return new RegExp("^\\s*(om|na|voor|in de|,|-)?\\s*$");
    }
}
//# sourceMappingURL=NLMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MONTH_DICTIONARY: () => (/* binding */ MONTH_DICTIONARY),
/* harmony export */   WEEKDAY_DICTIONARY: () => (/* binding */ WEEKDAY_DICTIONARY),
/* harmony export */   YEAR_PATTERN: () => (/* binding */ YEAR_PATTERN),
/* harmony export */   parseYear: () => (/* binding */ parseYear)
/* harmony export */ });
const WEEKDAY_DICTIONARY = {
    "domingo": 0,
    "dom": 0,
    "segunda": 1,
    "segunda-feira": 1,
    "seg": 1,
    "terça": 2,
    "terça-feira": 2,
    "ter": 2,
    "quarta": 3,
    "quarta-feira": 3,
    "qua": 3,
    "quinta": 4,
    "quinta-feira": 4,
    "qui": 4,
    "sexta": 5,
    "sexta-feira": 5,
    "sex": 5,
    "sábado": 6,
    "sabado": 6,
    "sab": 6,
};
const MONTH_DICTIONARY = {
    "janeiro": 1,
    "jan": 1,
    "jan.": 1,
    "fevereiro": 2,
    "fev": 2,
    "fev.": 2,
    "março": 3,
    "mar": 3,
    "mar.": 3,
    "abril": 4,
    "abr": 4,
    "abr.": 4,
    "maio": 5,
    "mai": 5,
    "mai.": 5,
    "junho": 6,
    "jun": 6,
    "jun.": 6,
    "julho": 7,
    "jul": 7,
    "jul.": 7,
    "agosto": 8,
    "ago": 8,
    "ago.": 8,
    "setembro": 9,
    "set": 9,
    "set.": 9,
    "outubro": 10,
    "out": 10,
    "out.": 10,
    "novembro": 11,
    "nov": 11,
    "nov.": 11,
    "dezembro": 12,
    "dez": 12,
    "dez.": 12,
};
const YEAR_PATTERN = "[0-9]{1,4}(?![^\\s]\\d)(?:\\s*[a|d]\\.?\\s*c\\.?|\\s*a\\.?\\s*d\\.?)?";
function parseYear(match) {
    if (match.match(/^[0-9]{1,4}$/)) {
        let yearNumber = parseInt(match);
        if (yearNumber < 100) {
            if (yearNumber > 50) {
                yearNumber = yearNumber + 1900;
            }
            else {
                yearNumber = yearNumber + 2000;
            }
        }
        return yearNumber;
    }
    if (match.match(/a\.?\s*c\.?/i)) {
        match = match.replace(/a\.?\s*c\.?/i, "");
        return -parseInt(match);
    }
    return parseInt(match);
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../common/parsers/SlashDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js");
/* harmony import */ var _parsers_PTWeekdayParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/PTWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTWeekdayParser.js");
/* harmony import */ var _parsers_PTTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/PTTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTTimeExpressionParser.js");
/* harmony import */ var _refiners_PTMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./refiners/PTMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/pt/refiners/PTMergeDateTimeRefiner.js");
/* harmony import */ var _refiners_PTMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./refiners/PTMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/pt/refiners/PTMergeDateRangeRefiner.js");
/* harmony import */ var _parsers_PTMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/PTMonthNameLittleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTMonthNameLittleEndianParser.js");
/* harmony import */ var _parsers_PTCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/PTCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTCasualDateParser.js");
/* harmony import */ var _parsers_PTCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/PTCasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTCasualTimeParser.js");














const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration(true));
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration(littleEndian = true) {
    const option = createConfiguration(false, littleEndian);
    option.parsers.push(new _parsers_PTCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    option.parsers.push(new _parsers_PTCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
    return option;
}
function createConfiguration(strictMode = true, littleEndian = true) {
    return (0,_configurations_js__WEBPACK_IMPORTED_MODULE_5__.includeCommonConfiguration)({
        parsers: [
            new _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__["default"](littleEndian),
            new _parsers_PTWeekdayParser_js__WEBPACK_IMPORTED_MODULE_7__["default"](),
            new _parsers_PTTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_8__["default"](),
            new _parsers_PTMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](),
        ],
        refiners: [new _refiners_PTMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_10__["default"](), new _refiners_PTMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_11__["default"]()],
    }, strictMode);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTCasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTCasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PTCasualDateParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");


class PTCasualDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return /(agora|hoje|amanha|amanhã|ontem)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
            case "agora":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.now(context.reference);
            case "hoje":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.today(context.reference);
            case "amanha":
            case "amanhã":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.tomorrow(context.reference);
            case "ontem":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.yesterday(context.reference);
        }
        return component;
    }
}
//# sourceMappingURL=PTCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTCasualTimeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTCasualTimeParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PTCasualTimeParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");




class PTCasualTimeParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return /(?:esta\s*)?(manha|manhã|tarde|meia-noite|meio-dia|noite)(?=\W|$)/i;
    }
    innerExtract(context, match) {
        const targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const component = context.createParsingComponents();
        switch (match[1].toLowerCase()) {
            case "tarde":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                component.imply("hour", 15);
                break;
            case "noite":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                component.imply("hour", 22);
                break;
            case "manha":
            case "manhã":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                component.imply("hour", 6);
                break;
            case "meia-noite":
                (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignTheNextDay)(component, targetDate);
                component.imply("hour", 0);
                component.imply("minute", 0);
                component.imply("second", 0);
                break;
            case "meio-dia":
                component.imply("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                component.imply("hour", 12);
                break;
        }
        return component;
    }
}
//# sourceMappingURL=PTCasualTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTMonthNameLittleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTMonthNameLittleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PTMonthNameLittleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/pt/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");





const PATTERN = new RegExp(`([0-9]{1,2})(?:º|ª|°)?` +
    "(?:\\s*(?:desde|de|\\-|\\–|ao?|\\s)\\s*([0-9]{1,2})(?:º|ª|°)?)?\\s*(?:de)?\\s*" +
    `(?:-|/|\\s*(?:de|,)?\\s*)` +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})` +
    `(?:\\s*(?:de|,)?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.YEAR_PATTERN}))?` +
    `(?=\\W|$)`, "i");
const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const MONTH_NAME_GROUP = 3;
const YEAR_GROUP = 4;
class PTMonthNameLittleEndianParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = parseInt(match[DATE_GROUP]);
        if (day > 31) {
            match.index = match.index + match[DATE_GROUP].length;
            return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
            const yearNumber = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseYear)(match[YEAR_GROUP]);
            result.start.assign("year", yearNumber);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, day, month);
            result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
            const endDate = parseInt(match[DATE_TO_GROUP]);
            result.end = result.start.clone();
            result.end.assign("day", endDate);
        }
        return result;
    }
}
//# sourceMappingURL=PTMonthNameLittleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTTimeExpressionParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTTimeExpressionParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PTTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js");

class PTTimeExpressionParser extends _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__.AbstractTimeExpressionParser {
    primaryPrefix() {
        return "(?:(?:ao?|às?|das|da|de|do)\\s*)?";
    }
    followingPhase() {
        return "\\s*(?:\\-|\\–|\\~|\\〜|a(?:o)?|\\?)\\s*";
    }
}
//# sourceMappingURL=PTTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTWeekdayParser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/parsers/PTWeekdayParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PTWeekdayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/pt/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/calculation/weekdays.js */ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js");




const PATTERN = new RegExp("(?:(?:\\,|\\(|\\（)\\s*)?" +
    "(?:(este|esta|passado|pr[oó]ximo)\\s*)?" +
    `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY)})` +
    "(?:\\s*(?:\\,|\\)|\\）))?" +
    "(?:\\s*(este|esta|passado|pr[óo]ximo)\\s*semana)?" +
    "(?=\\W|\\d|$)", "i");
const PREFIX_GROUP = 1;
const WEEKDAY_GROUP = 2;
const POSTFIX_GROUP = 3;
class PTWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const weekday = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_DICTIONARY[dayOfWeek];
        if (weekday === undefined) {
            return null;
        }
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let norm = prefix || postfix || "";
        norm = norm.toLowerCase();
        let modifier = null;
        if (norm == "passado") {
            modifier = "this";
        }
        else if (norm == "próximo" || norm == "proximo") {
            modifier = "next";
        }
        else if (norm == "este") {
            modifier = "this";
        }
        return (0,_common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__.createParsingComponentsAtWeekday)(context.reference, weekday, modifier);
    }
}
//# sourceMappingURL=PTWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/refiners/PTMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/refiners/PTMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PTMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class PTMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(?:-)\s*$/i;
    }
}
//# sourceMappingURL=PTMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/pt/refiners/PTMergeDateTimeRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/pt/refiners/PTMergeDateTimeRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PTMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class PTMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return new RegExp("^\\s*(?:,|à)?\\s*$");
    }
}
//# sourceMappingURL=PTMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FULL_MONTH_NAME_DICTIONARY: () => (/* binding */ FULL_MONTH_NAME_DICTIONARY),
/* harmony export */   INTEGER_WORD_DICTIONARY: () => (/* binding */ INTEGER_WORD_DICTIONARY),
/* harmony export */   MONTH_DICTIONARY: () => (/* binding */ MONTH_DICTIONARY),
/* harmony export */   NUMBER_PATTERN: () => (/* binding */ NUMBER_PATTERN),
/* harmony export */   ORDINAL_NUMBER_PATTERN: () => (/* binding */ ORDINAL_NUMBER_PATTERN),
/* harmony export */   ORDINAL_WORD_DICTIONARY: () => (/* binding */ ORDINAL_WORD_DICTIONARY),
/* harmony export */   REGEX_PARTS: () => (/* binding */ REGEX_PARTS),
/* harmony export */   TIME_UNITS_PATTERN: () => (/* binding */ TIME_UNITS_PATTERN),
/* harmony export */   TIME_UNIT_DICTIONARY: () => (/* binding */ TIME_UNIT_DICTIONARY),
/* harmony export */   WEEKDAY_DICTIONARY: () => (/* binding */ WEEKDAY_DICTIONARY),
/* harmony export */   YEAR_PATTERN: () => (/* binding */ YEAR_PATTERN),
/* harmony export */   parseNumberPattern: () => (/* binding */ parseNumberPattern),
/* harmony export */   parseOrdinalNumberPattern: () => (/* binding */ parseOrdinalNumberPattern),
/* harmony export */   parseTimeUnits: () => (/* binding */ parseTimeUnits),
/* harmony export */   parseYear: () => (/* binding */ parseYear)
/* harmony export */ });
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");


const REGEX_PARTS = {
    leftBoundary: "([^\\p{L}\\p{N}_]|^)",
    rightBoundary: "(?=[^\\p{L}\\p{N}_]|$)",
    flags: "iu",
};
const WEEKDAY_DICTIONARY = {
    воскресенье: 0,
    воскресенья: 0,
    вск: 0,
    "вск.": 0,
    понедельник: 1,
    понедельника: 1,
    пн: 1,
    "пн.": 1,
    вторник: 2,
    вторника: 2,
    вт: 2,
    "вт.": 2,
    среда: 3,
    среды: 3,
    среду: 3,
    ср: 3,
    "ср.": 3,
    четверг: 4,
    четверга: 4,
    чт: 4,
    "чт.": 4,
    пятница: 5,
    пятницу: 5,
    пятницы: 5,
    пт: 5,
    "пт.": 5,
    суббота: 6,
    субботу: 6,
    субботы: 6,
    сб: 6,
    "сб.": 6,
};
const FULL_MONTH_NAME_DICTIONARY = {
    январь: 1,
    января: 1,
    январе: 1,
    февраль: 2,
    февраля: 2,
    феврале: 2,
    март: 3,
    марта: 3,
    марте: 3,
    апрель: 4,
    апреля: 4,
    апреле: 4,
    май: 5,
    мая: 5,
    мае: 5,
    июнь: 6,
    июня: 6,
    июне: 6,
    июль: 7,
    июля: 7,
    июле: 7,
    август: 8,
    августа: 8,
    августе: 8,
    сентябрь: 9,
    сентября: 9,
    сентябре: 9,
    октябрь: 10,
    октября: 10,
    октябре: 10,
    ноябрь: 11,
    ноября: 11,
    ноябре: 11,
    декабрь: 12,
    декабря: 12,
    декабре: 12,
};
const MONTH_DICTIONARY = {
    ...FULL_MONTH_NAME_DICTIONARY,
    янв: 1,
    "янв.": 1,
    фев: 2,
    "фев.": 2,
    мар: 3,
    "мар.": 3,
    апр: 4,
    "апр.": 4,
    авг: 8,
    "авг.": 8,
    сен: 9,
    "сен.": 9,
    окт: 10,
    "окт.": 10,
    ноя: 11,
    "ноя.": 11,
    дек: 12,
    "дек.": 12,
};
const INTEGER_WORD_DICTIONARY = {
    один: 1,
    одна: 1,
    одной: 1,
    одну: 1,
    две: 2,
    два: 2,
    двух: 2,
    три: 3,
    трех: 3,
    трёх: 3,
    четыре: 4,
    четырех: 4,
    четырёх: 4,
    пять: 5,
    пяти: 5,
    шесть: 6,
    шести: 6,
    семь: 7,
    семи: 7,
    восемь: 8,
    восьми: 8,
    девять: 9,
    девяти: 9,
    десять: 10,
    десяти: 10,
    одиннадцать: 11,
    одиннадцати: 11,
    двенадцать: 12,
    двенадцати: 12,
};
const ORDINAL_WORD_DICTIONARY = {
    первое: 1,
    первого: 1,
    второе: 2,
    второго: 2,
    третье: 3,
    третьего: 3,
    четвертое: 4,
    четвертого: 4,
    пятое: 5,
    пятого: 5,
    шестое: 6,
    шестого: 6,
    седьмое: 7,
    седьмого: 7,
    восьмое: 8,
    восьмого: 8,
    девятое: 9,
    девятого: 9,
    десятое: 10,
    десятого: 10,
    одиннадцатое: 11,
    одиннадцатого: 11,
    двенадцатое: 12,
    двенадцатого: 12,
    тринадцатое: 13,
    тринадцатого: 13,
    четырнадцатое: 14,
    четырнадцатого: 14,
    пятнадцатое: 15,
    пятнадцатого: 15,
    шестнадцатое: 16,
    шестнадцатого: 16,
    семнадцатое: 17,
    семнадцатого: 17,
    восемнадцатое: 18,
    восемнадцатого: 18,
    девятнадцатое: 19,
    девятнадцатого: 19,
    двадцатое: 20,
    двадцатого: 20,
    "двадцать первое": 21,
    "двадцать первого": 21,
    "двадцать второе": 22,
    "двадцать второго": 22,
    "двадцать третье": 23,
    "двадцать третьего": 23,
    "двадцать четвертое": 24,
    "двадцать четвертого": 24,
    "двадцать пятое": 25,
    "двадцать пятого": 25,
    "двадцать шестое": 26,
    "двадцать шестого": 26,
    "двадцать седьмое": 27,
    "двадцать седьмого": 27,
    "двадцать восьмое": 28,
    "двадцать восьмого": 28,
    "двадцать девятое": 29,
    "двадцать девятого": 29,
    "тридцатое": 30,
    "тридцатого": 30,
    "тридцать первое": 31,
    "тридцать первого": 31,
};
const TIME_UNIT_DICTIONARY = {
    сек: "second",
    секунда: "second",
    секунд: "second",
    секунды: "second",
    секунду: "second",
    секундочка: "second",
    секундочки: "second",
    секундочек: "second",
    секундочку: "second",
    мин: "minute",
    минута: "minute",
    минут: "minute",
    минуты: "minute",
    минуту: "minute",
    минуток: "minute",
    минутки: "minute",
    минутку: "minute",
    минуточек: "minute",
    минуточки: "minute",
    минуточку: "minute",
    час: "hour",
    часов: "hour",
    часа: "hour",
    часу: "hour",
    часиков: "hour",
    часика: "hour",
    часике: "hour",
    часик: "hour",
    день: "d",
    дня: "d",
    дней: "d",
    суток: "d",
    сутки: "d",
    неделя: "week",
    неделе: "week",
    недели: "week",
    неделю: "week",
    недель: "week",
    недельке: "week",
    недельки: "week",
    неделек: "week",
    месяц: "month",
    месяце: "month",
    месяцев: "month",
    месяца: "month",
    квартал: "quarter",
    квартале: "quarter",
    кварталов: "quarter",
    год: "year",
    года: "year",
    году: "year",
    годов: "year",
    лет: "year",
    годик: "year",
    годика: "year",
    годиков: "year",
};
const NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|пол|несколько|пар(?:ы|у)|\\s{0,3})`;
function parseNumberPattern(match) {
    const num = match.toLowerCase();
    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {
        return INTEGER_WORD_DICTIONARY[num];
    }
    if (num.match(/несколько/)) {
        return 3;
    }
    else if (num.match(/пол/)) {
        return 0.5;
    }
    else if (num.match(/пар/)) {
        return 2;
    }
    else if (num === "") {
        return 1;
    }
    return parseFloat(num);
}
const ORDINAL_NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:го|ого|е|ое)?)`;
function parseOrdinalNumberPattern(match) {
    const num = match.toLowerCase();
    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {
        return ORDINAL_WORD_DICTIONARY[num];
    }
    return parseInt(num);
}
const year = "(?:\\s+(?:году|года|год|г|г.))?";
const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}${year}\\s*(?:н.э.|до н.э.|н. э.|до н. э.)|[1-2][0-9]{3}${year}|[5-9][0-9]${year})`;
function parseYear(match) {
    if (/(год|года|г|г.)/i.test(match)) {
        match = match.replace(/(год|года|г|г.)/i, "");
    }
    if (/(до н.э.|до н. э.)/i.test(match)) {
        match = match.replace(/(до н.э.|до н. э.)/i, "");
        return -parseInt(match);
    }
    if (/(н. э.|н.э.)/i.test(match)) {
        match = match.replace(/(н. э.|н.э.)/i, "");
        return parseInt(match);
    }
    const rawYearNumber = parseInt(match);
    return (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_1__.findMostLikelyADYear)(rawYearNumber);
}
const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,3}(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(TIME_UNIT_DICTIONARY)})`;
const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
const TIME_UNITS_PATTERN = (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.repeatedTimeunitPattern)(`(?:(?:около|примерно)\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);
function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length).trim();
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
}
function collectDateTimeFragment(fragments, match) {
    const num = parseNumberPattern(match[1]);
    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
    fragments[unit] = num;
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _parsers_RUTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parsers/RUTimeUnitWithinFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitWithinFormatParser.js");
/* harmony import */ var _parsers_RUMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/RUMonthNameLittleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUMonthNameLittleEndianParser.js");
/* harmony import */ var _parsers_RUMonthNameParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/RUMonthNameParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUMonthNameParser.js");
/* harmony import */ var _parsers_RUTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/RUTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeExpressionParser.js");
/* harmony import */ var _parsers_RUTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parsers/RUTimeUnitAgoFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitAgoFormatParser.js");
/* harmony import */ var _refiners_RUMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./refiners/RUMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/ru/refiners/RUMergeDateRangeRefiner.js");
/* harmony import */ var _refiners_RUMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./refiners/RUMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/ru/refiners/RUMergeDateTimeRefiner.js");
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _parsers_RUCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/RUCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUCasualDateParser.js");
/* harmony import */ var _parsers_RUCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/RUCasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUCasualTimeParser.js");
/* harmony import */ var _parsers_RUWeekdayParser_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/RUWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUWeekdayParser.js");
/* harmony import */ var _parsers_RURelativeDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/RURelativeDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RURelativeDateFormatParser.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/parsers/SlashDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js");
/* harmony import */ var _parsers_RUTimeUnitCasualRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/RUTimeUnitCasualRelativeFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitCasualRelativeFormatParser.js");



















const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration(true));
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration() {
    const option = createConfiguration(false);
    option.parsers.unshift(new _parsers_RUCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    option.parsers.unshift(new _parsers_RUCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
    option.parsers.unshift(new _parsers_RUMonthNameParser_js__WEBPACK_IMPORTED_MODULE_5__["default"]());
    option.parsers.unshift(new _parsers_RURelativeDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__["default"]());
    option.parsers.unshift(new _parsers_RUTimeUnitCasualRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_7__["default"]());
    return option;
}
function createConfiguration(strictMode = true) {
    return (0,_configurations_js__WEBPACK_IMPORTED_MODULE_8__.includeCommonConfiguration)({
        parsers: [
            new _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](true),
            new _parsers_RUTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_10__["default"](),
            new _parsers_RUMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_11__["default"](),
            new _parsers_RUWeekdayParser_js__WEBPACK_IMPORTED_MODULE_12__["default"](),
            new _parsers_RUTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_13__["default"](strictMode),
            new _parsers_RUTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_14__["default"](),
        ],
        refiners: [new _refiners_RUMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_15__["default"](), new _refiners_RUMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_16__["default"]()],
    }, strictMode);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractParserWithLeftBoundaryChecking: () => (/* binding */ AbstractParserWithLeftBoundaryChecking),
/* harmony export */   AbstractParserWithLeftRightBoundaryChecking: () => (/* binding */ AbstractParserWithLeftRightBoundaryChecking)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");


class AbstractParserWithLeftBoundaryChecking extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
        return _constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.leftBoundary;
    }
    innerPattern(context) {
        return new RegExp(this.innerPatternString(context), _constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.flags);
    }
    innerPatternHasChange(context, currentInnerPattern) {
        return false;
    }
}
class AbstractParserWithLeftRightBoundaryChecking extends AbstractParserWithLeftBoundaryChecking {
    innerPattern(context) {
        return new RegExp(`${this.innerPatternString(context)}${_constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.rightBoundary}`, _constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.flags);
    }
}
//# sourceMappingURL=AbstractParserWithWordBoundaryChecking.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUCasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUCasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUCasualDateParser)
/* harmony export */ });
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js");


class RUCasualDateParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return `(?:с|со)?\\s*(сегодня|вчера|завтра|послезавтра|послепослезавтра|позапозавчера|позавчера)`;
    }
    innerExtract(context, match) {
        const lowerText = match[1].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
            case "сегодня":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.today(context.reference);
            case "вчера":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.yesterday(context.reference);
            case "завтра":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.tomorrow(context.reference);
            case "послезавтра":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.theDayAfter(context.reference, 2);
            case "послепослезавтра":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.theDayAfter(context.reference, 3);
            case "позавчера":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.theDayBefore(context.reference, 2);
            case "позапозавчера":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.theDayBefore(context.reference, 3);
        }
        return component;
    }
}
//# sourceMappingURL=RUCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUCasualTimeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUCasualTimeParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUCasualTimeParser)
/* harmony export */ });
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js");




class RUCasualTimeParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return `(сейчас|прошлым\\s*вечером|прошлой\\s*ночью|следующей\\s*ночью|сегодня\\s*ночью|этой\\s*ночью|ночью|этим утром|утром|утра|в\\s*полдень|вечером|вечера|в\\s*полночь)`;
    }
    innerExtract(context, match) {
        let targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        if (lowerText === "сейчас") {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.now(context.reference);
        }
        if (lowerText === "вечером" || lowerText === "вечера") {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.evening(context.reference);
        }
        if (lowerText.endsWith("утром") || lowerText.endsWith("утра")) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.morning(context.reference);
        }
        if (lowerText.match(/в\s*полдень/)) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.noon(context.reference);
        }
        if (lowerText.match(/прошлой\s*ночью/)) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.lastNight(context.reference);
        }
        if (lowerText.match(/прошлым\s*вечером/)) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.yesterdayEvening(context.reference);
        }
        if (lowerText.match(/следующей\s*ночью/)) {
            const daysToAdd = targetDate.hour() < 22 ? 1 : 2;
            targetDate = targetDate.add(daysToAdd, "day");
            (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(component, targetDate);
            component.imply("hour", 0);
        }
        if (lowerText.match(/в\s*полночь/) || lowerText.endsWith("ночью")) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.midnight(context.reference);
        }
        return component;
    }
}
//# sourceMappingURL=RUCasualTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUMonthNameLittleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUMonthNameLittleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUMonthNameLittleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js");






const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const MONTH_NAME_GROUP = 3;
const YEAR_GROUP = 4;
class RUMonthNameLittleEndianParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return `(?:с)?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.ORDINAL_NUMBER_PATTERN})` +
            `(?:` +
            `\\s{0,3}(?:по|-|–|до)?\\s{0,3}` +
            `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.ORDINAL_NUMBER_PATTERN})` +
            `)?` +
            `(?:-|\\/|\\s{0,3}(?:of)?\\s{0,3})` +
            `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})` +
            `(?:` +
            `(?:-|\\/|,?\\s{0,3})` +
            `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.YEAR_PATTERN}(?![^\\s]\\d))` +
            `)?`;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseOrdinalNumberPattern)(match[DATE_GROUP]);
        if (day > 31) {
            match.index = match.index + match[DATE_GROUP].length;
            return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
            const yearNumber = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseYear)(match[YEAR_GROUP]);
            result.start.assign("year", yearNumber);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, day, month);
            result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
            const endDate = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseOrdinalNumberPattern)(match[DATE_TO_GROUP]);
            result.end = result.start.clone();
            result.end.assign("day", endDate);
        }
        return result;
    }
}
//# sourceMappingURL=RUMonthNameLittleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUMonthNameParser.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUMonthNameParser.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUMonthNameParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js");





const MONTH_NAME_GROUP = 2;
const YEAR_GROUP = 3;
class RUMonthNameParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftBoundaryChecking {
    innerPatternString(context) {
        return (`((?:в)\\s*)?` +
            `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_2__.MONTH_DICTIONARY)})` +
            `\\s*` +
            `(?:` +
            `[,-]?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_2__.YEAR_PATTERN})?` +
            `)?` +
            `(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`);
    }
    innerExtract(context, match) {
        const monthName = match[MONTH_NAME_GROUP].toLowerCase();
        if (match[0].length <= 3 && !_constants_js__WEBPACK_IMPORTED_MODULE_2__.FULL_MONTH_NAME_DICTIONARY[monthName]) {
            return null;
        }
        const result = context.createParsingResult(match.index, match.index + match[0].length);
        result.start.imply("day", 1);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_2__.MONTH_DICTIONARY[monthName];
        result.start.assign("month", month);
        if (match[YEAR_GROUP]) {
            const year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_2__.parseYear)(match[YEAR_GROUP]);
            result.start.assign("year", year);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.refDate, 1, month);
            result.start.imply("year", year);
        }
        return result;
    }
}
//# sourceMappingURL=RUMonthNameParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RURelativeDateFormatParser.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RURelativeDateFormatParser.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RURelativeDateFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js");





const MODIFIER_WORD_GROUP = 1;
const RELATIVE_WORD_GROUP = 2;
class RURelativeDateFormatParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return `(в прошлом|на прошлой|на следующей|в следующем|на этой|в этом)\\s*(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_3__.TIME_UNIT_DICTIONARY)})`;
    }
    innerExtract(context, match) {
        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();
        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        const timeunit = _constants_js__WEBPACK_IMPORTED_MODULE_3__.TIME_UNIT_DICTIONARY[unitWord];
        if (modifier == "на следующей" || modifier == "в следующем") {
            const timeUnits = {};
            timeUnits[timeunit] = 1;
            return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        if (modifier == "в прошлом" || modifier == "на прошлой") {
            const timeUnits = {};
            timeUnits[timeunit] = -1;
            return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        const components = context.createParsingComponents();
        let date = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.reference.instant);
        if (timeunit.match(/week/i)) {
            date = date.add(-date.get("d"), "d");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.imply("year", date.year());
        }
        else if (timeunit.match(/month/i)) {
            date = date.add(-date.date() + 1, "d");
            components.imply("day", date.date());
            components.assign("year", date.year());
            components.assign("month", date.month() + 1);
        }
        else if (timeunit.match(/year/i)) {
            date = date.add(-date.date() + 1, "d");
            date = date.add(-date.month(), "month");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.assign("year", date.year());
        }
        return components;
    }
}
//# sourceMappingURL=RURelativeDateFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeExpressionParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeExpressionParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");



class RUTimeExpressionParser extends _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__.AbstractTimeExpressionParser {
    constructor(strictMode) {
        super(strictMode);
    }
    patternFlags() {
        return _constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.flags;
    }
    primaryPatternLeftBoundary() {
        return `(^|\\s|T|(?:[^\\p{L}\\p{N}_]))`;
    }
    followingPhase() {
        return `\\s*(?:\\-|\\–|\\~|\\〜|до|и|по|\\?)\\s*`;
    }
    primaryPrefix() {
        return `(?:(?:в|с)\\s*)??`;
    }
    primarySuffix() {
        return `(?:\\s*(?:утра|вечера|после полудня))?(?!\\/)${_constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.rightBoundary}`;
    }
    extractPrimaryTimeComponents(context, match) {
        const components = super.extractPrimaryTimeComponents(context, match);
        if (components) {
            if (match[0].endsWith("вечера")) {
                const hour = components.get("hour");
                if (hour >= 6 && hour < 12) {
                    components.assign("hour", components.get("hour") + 12);
                    components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                }
                else if (hour < 6) {
                    components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                }
            }
            if (match[0].endsWith("после полудня")) {
                components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                const hour = components.get("hour");
                if (hour >= 0 && hour <= 6) {
                    components.assign("hour", components.get("hour") + 12);
                }
            }
            if (match[0].endsWith("утра")) {
                components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                const hour = components.get("hour");
                if (hour < 12) {
                    components.assign("hour", components.get("hour"));
                }
            }
        }
        return components;
    }
}
//# sourceMappingURL=RUTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitAgoFormatParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitAgoFormatParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUTimeUnitAgoFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js");




class RUTimeUnitAgoFormatParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftBoundaryChecking {
    innerPatternString(context) {
        return `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN})\\s{0,5}назад(?=(?:\\W|$))`;
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[1]);
        const outputTimeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
}
//# sourceMappingURL=RUTimeUnitAgoFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitCasualRelativeFormatParser.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitCasualRelativeFormatParser.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUTimeUnitCasualRelativeFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js");




class RUTimeUnitCasualRelativeFormatParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return `(эти|последние|прошлые|следующие|после|спустя|через|\\+|-)\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN})`;
    }
    innerExtract(context, match) {
        const prefix = match[1].toLowerCase();
        let timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[2]);
        switch (prefix) {
            case "последние":
            case "прошлые":
            case "-":
                timeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
                break;
        }
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=RUTimeUnitCasualRelativeFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitWithinFormatParser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUTimeUnitWithinFormatParser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUTimeUnitWithinFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



const PATTERN = `(?:(?:около|примерно)\\s*(?:~\\s*)?)?(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN})${_constants_js__WEBPACK_IMPORTED_MODULE_0__.REGEX_PARTS.rightBoundary}`;
class RUTimeUnitWithinFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
        return _constants_js__WEBPACK_IMPORTED_MODULE_0__.REGEX_PARTS.leftBoundary;
    }
    innerPattern(context) {
        return context.option.forwardDate
            ? new RegExp(PATTERN, _constants_js__WEBPACK_IMPORTED_MODULE_0__.REGEX_PARTS.flags)
            : new RegExp(`(?:в течение|в течении)\\s*${PATTERN}`, _constants_js__WEBPACK_IMPORTED_MODULE_0__.REGEX_PARTS.flags);
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[1]);
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=RUTimeUnitWithinFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUWeekdayParser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/parsers/RUWeekdayParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUWeekdayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/ru/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/calculation/weekdays.js */ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/ru/parsers/AbstractParserWithWordBoundaryChecking.js");




const PREFIX_GROUP = 1;
const WEEKDAY_GROUP = 2;
const POSTFIX_GROUP = 3;
class RUWeekdayParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return (`(?:(?:,|\\(|（)\\s*)?` +
            `(?:в\\s*?)?` +
            `(?:(эту|этот|прошлый|прошлую|следующий|следующую|следующего)\\s*)?` +
            `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_2__.WEEKDAY_DICTIONARY)})` +
            `(?:\\s*(?:,|\\)|）))?` +
            `(?:\\s*на\\s*(этой|прошлой|следующей)\\s*неделе)?`);
    }
    innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();
        const weekday = _constants_js__WEBPACK_IMPORTED_MODULE_2__.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLowerCase();
        let modifier = null;
        if (modifierWord == "прошлый" || modifierWord == "прошлую" || modifierWord == "прошлой") {
            modifier = "last";
        }
        else if (modifierWord == "следующий" ||
            modifierWord == "следующую" ||
            modifierWord == "следующей" ||
            modifierWord == "следующего") {
            modifier = "next";
        }
        else if (modifierWord == "этот" || modifierWord == "эту" || modifierWord == "этой") {
            modifier = "this";
        }
        return (0,_common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__.createParsingComponentsAtWeekday)(context.reference, weekday, modifier);
    }
}
//# sourceMappingURL=RUWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/refiners/RUMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/refiners/RUMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class RUMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(и до|и по|до|по|-)\s*$/i;
    }
}
//# sourceMappingURL=RUMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/ru/refiners/RUMergeDateTimeRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/ru/refiners/RUMergeDateTimeRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RUMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class RUMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return new RegExp(`^\\s*(T|в|,|-)?\\s*$`);
    }
}
//# sourceMappingURL=RUMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/constants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FULL_MONTH_NAME_DICTIONARY: () => (/* binding */ FULL_MONTH_NAME_DICTIONARY),
/* harmony export */   INTEGER_WORD_DICTIONARY: () => (/* binding */ INTEGER_WORD_DICTIONARY),
/* harmony export */   MONTH_DICTIONARY: () => (/* binding */ MONTH_DICTIONARY),
/* harmony export */   NUMBER_PATTERN: () => (/* binding */ NUMBER_PATTERN),
/* harmony export */   ORDINAL_NUMBER_PATTERN: () => (/* binding */ ORDINAL_NUMBER_PATTERN),
/* harmony export */   ORDINAL_WORD_DICTIONARY: () => (/* binding */ ORDINAL_WORD_DICTIONARY),
/* harmony export */   REGEX_PARTS: () => (/* binding */ REGEX_PARTS),
/* harmony export */   TIME_UNITS_PATTERN: () => (/* binding */ TIME_UNITS_PATTERN),
/* harmony export */   TIME_UNIT_DICTIONARY: () => (/* binding */ TIME_UNIT_DICTIONARY),
/* harmony export */   WEEKDAY_DICTIONARY: () => (/* binding */ WEEKDAY_DICTIONARY),
/* harmony export */   YEAR_PATTERN: () => (/* binding */ YEAR_PATTERN),
/* harmony export */   parseNumberPattern: () => (/* binding */ parseNumberPattern),
/* harmony export */   parseOrdinalNumberPattern: () => (/* binding */ parseOrdinalNumberPattern),
/* harmony export */   parseTimeUnits: () => (/* binding */ parseTimeUnits),
/* harmony export */   parseYearPattern: () => (/* binding */ parseYearPattern)
/* harmony export */ });
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");


const REGEX_PARTS = {
    leftBoundary: "([^\\p{L}\\p{N}_]|^)",
    rightBoundary: "(?=[^\\p{L}\\p{N}_]|$)",
    flags: "iu",
};
const WEEKDAY_DICTIONARY = {
    "неділя": 0,
    "неділі": 0,
    "неділю": 0,
    "нд": 0,
    "нд.": 0,
    "понеділок": 1,
    "понеділка": 1,
    "пн": 1,
    "пн.": 1,
    "вівторок": 2,
    "вівторка": 2,
    "вт": 2,
    "вт.": 2,
    "середа": 3,
    "середи": 3,
    "середу": 3,
    "ср": 3,
    "ср.": 3,
    "четвер": 4,
    "четверга": 4,
    "четвергу": 4,
    "чт": 4,
    "чт.": 4,
    "п'ятниця": 5,
    "п'ятниці": 5,
    "п'ятницю": 5,
    "пт": 5,
    "пт.": 5,
    "субота": 6,
    "суботи": 6,
    "суботу": 6,
    "сб": 6,
    "сб.": 6,
};
const FULL_MONTH_NAME_DICTIONARY = {
    "січень": 1,
    "січня": 1,
    "січні": 1,
    "лютий": 2,
    "лютого": 2,
    "лютому": 2,
    "березень": 3,
    "березня": 3,
    "березні": 3,
    "квітень": 4,
    "квітня": 4,
    "квітні": 4,
    "травень": 5,
    "травня": 5,
    "травні": 5,
    "червень": 6,
    "червня": 6,
    "червні": 6,
    "липень": 7,
    "липня": 7,
    "липні": 7,
    "серпень": 8,
    "серпня": 8,
    "серпні": 8,
    "вересень": 9,
    "вересня": 9,
    "вересні": 9,
    "жовтень": 10,
    "жовтня": 10,
    "жовтні": 10,
    "листопад": 11,
    "листопада": 11,
    "листопаду": 11,
    "грудень": 12,
    "грудня": 12,
    "грудні": 12,
};
const MONTH_DICTIONARY = {
    ...FULL_MONTH_NAME_DICTIONARY,
    "січ": 1,
    "січ.": 1,
    "лют": 2,
    "лют.": 2,
    "бер": 3,
    "бер.": 3,
    "квіт": 4,
    "квіт.": 4,
    "трав": 5,
    "трав.": 5,
    "черв": 6,
    "черв.": 6,
    "лип": 7,
    "лип.": 7,
    "серп": 8,
    "серп.": 8,
    "сер": 8,
    "cер.": 8,
    "вер": 9,
    "вер.": 9,
    "верес": 9,
    "верес.": 9,
    "жовт": 10,
    "жовт.": 10,
    "листоп": 11,
    "листоп.": 11,
    "груд": 12,
    "груд.": 12,
};
const INTEGER_WORD_DICTIONARY = {
    "один": 1,
    "одна": 1,
    "одної": 1,
    "одну": 1,
    "дві": 2,
    "два": 2,
    "двох": 2,
    "три": 3,
    "трьох": 3,
    "чотири": 4,
    "чотирьох": 4,
    "п'ять": 5,
    "п'яти": 5,
    "шість": 6,
    "шести": 6,
    "сім": 7,
    "семи": 7,
    "вісім": 8,
    "восьми": 8,
    "дев'ять": 9,
    "дев'яти": 9,
    "десять": 10,
    "десяти": 10,
    "одинадцять": 11,
    "одинадцяти": 11,
    "дванадцять": 12,
    "дванадцяти": 12,
};
const ORDINAL_WORD_DICTIONARY = {
    "перше": 1,
    "першого": 1,
    "друге": 2,
    "другого": 2,
    "третє": 3,
    "третього": 3,
    "четверте": 4,
    "четвертого": 4,
    "п'яте": 5,
    "п'ятого": 5,
    "шосте": 6,
    "шостого": 6,
    "сьоме": 7,
    "сьомого": 7,
    "восьме": 8,
    "восьмого": 8,
    "дев'яте": 9,
    "дев'ятого": 9,
    "десяте": 10,
    "десятого": 10,
    "одинадцяте": 11,
    "одинадцятого": 11,
    "дванадцяте": 12,
    "дванадцятого": 12,
    "тринадцяте": 13,
    "тринадцятого": 13,
    "чотирнадцяте": 14,
    "чотинрнадцятого": 14,
    "п'ятнадцяте": 15,
    "п'ятнадцятого": 15,
    "шістнадцяте": 16,
    "шістнадцятого": 16,
    "сімнадцяте": 17,
    "сімнадцятого": 17,
    "вісімнадцяте": 18,
    "вісімнадцятого": 18,
    "дев'ятнадцяте": 19,
    "дев'ятнадцятого": 19,
    "двадцяте": 20,
    "двадцятого": 20,
    "двадцять перше": 21,
    "двадцять першого": 21,
    "двадцять друге": 22,
    "двадцять другого": 22,
    "двадцять третє": 23,
    "двадцять третього": 23,
    "двадцять четверте": 24,
    "двадцять четвертого": 24,
    "двадцять п'яте": 25,
    "двадцять п'ятого": 25,
    "двадцять шосте": 26,
    "двадцять шостого": 26,
    "двадцять сьоме": 27,
    "двадцять сьомого": 27,
    "двадцять восьме": 28,
    "двадцять восьмого": 28,
    "двадцять дев'яте": 29,
    "двадцять дев'ятого": 29,
    "тридцяте": 30,
    "тридцятого": 30,
    "тридцять перше": 31,
    "тридцять першого": 31,
};
const TIME_UNIT_DICTIONARY = {
    сек: "second",
    секунда: "second",
    секунд: "second",
    секунди: "second",
    секунду: "second",
    секундочок: "second",
    секундочки: "second",
    секундочку: "second",
    хв: "minute",
    хвилина: "minute",
    хвилин: "minute",
    хвилини: "minute",
    хвилину: "minute",
    хвилинок: "minute",
    хвилинки: "minute",
    хвилинку: "minute",
    хвилиночок: "minute",
    хвилиночки: "minute",
    хвилиночку: "minute",
    год: "hour",
    година: "hour",
    годин: "hour",
    години: "hour",
    годину: "hour",
    годинка: "hour",
    годинок: "hour",
    годинки: "hour",
    годинку: "hour",
    день: "d",
    дня: "d",
    днів: "d",
    дні: "d",
    доба: "d",
    добу: "d",
    тиждень: "week",
    тижню: "week",
    тижня: "week",
    тижні: "week",
    тижнів: "week",
    місяць: "month",
    місяців: "month",
    місяці: "month",
    місяця: "month",
    квартал: "quarter",
    кварталу: "quarter",
    квартала: "quarter",
    кварталів: "quarter",
    кварталі: "quarter",
    рік: "year",
    року: "year",
    році: "year",
    років: "year",
    роки: "year",
};
const NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|пів|декілька|пар(?:у)|\\s{0,3})`;
function parseNumberPattern(match) {
    const num = match.toLowerCase();
    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {
        return INTEGER_WORD_DICTIONARY[num];
    }
    if (num.match(/декілька/)) {
        return 2;
    }
    else if (num.match(/пів/)) {
        return 0.5;
    }
    else if (num.match(/пар/)) {
        return 2;
    }
    else if (num === "") {
        return 1;
    }
    return parseFloat(num);
}
const ORDINAL_NUMBER_PATTERN = `(?:${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:го|ого|е)?)`;
function parseOrdinalNumberPattern(match) {
    const num = match.toLowerCase();
    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {
        return ORDINAL_WORD_DICTIONARY[num];
    }
    return parseInt(num);
}
const year = "(?:\\s+(?:року|рік|р|р.))?";
const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}${year}\\s*(?:н.е.|до н.е.|н. е.|до н. е.)|[1-2][0-9]{3}${year}|[5-9][0-9]${year})`;
function parseYearPattern(match) {
    if (/(рік|року|р|р.)/i.test(match)) {
        match = match.replace(/(рік|року|р|р.)/i, "");
    }
    if (/(до н.е.|до н. е.)/i.test(match)) {
        match = match.replace(/(до н.е.|до н. е.)/i, "");
        return -parseInt(match);
    }
    if (/(н. е.|н.е.)/i.test(match)) {
        match = match.replace(/(н. е.|н.е.)/i, "");
        return parseInt(match);
    }
    const rawYearNumber = parseInt(match);
    return (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_1__.findMostLikelyADYear)(rawYearNumber);
}
const SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\s{0,3}(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.matchAnyPattern)(TIME_UNIT_DICTIONARY)})`;
const SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, "i");
const TIME_UNITS_PATTERN = (0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_0__.repeatedTimeunitPattern)(`(?:(?:близько|приблизно)\\s{0,3})?`, SINGLE_TIME_UNIT_PATTERN);
function parseTimeUnits(timeunitText) {
    const fragments = {};
    let remainingText = timeunitText;
    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    while (match) {
        collectDateTimeFragment(fragments, match);
        remainingText = remainingText.substring(match[0].length).trim();
        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);
    }
    return fragments;
}
function collectDateTimeFragment(fragments, match) {
    const num = parseNumberPattern(match[1]);
    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];
    fragments[unit] = num;
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _parsers_UKTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./parsers/UKTimeUnitWithinFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitWithinFormatParser.js");
/* harmony import */ var _parsers_UKMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parsers/UKMonthNameLittleEndianParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKMonthNameLittleEndianParser.js");
/* harmony import */ var _parsers_UKMonthNameParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/UKMonthNameParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKMonthNameParser.js");
/* harmony import */ var _parsers_UKTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./parsers/UKTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeExpressionParser.js");
/* harmony import */ var _parsers_UKTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./parsers/UKTimeUnitAgoFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitAgoFormatParser.js");
/* harmony import */ var _refiners_UKMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./refiners/UKMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/uk/refiners/UKMergeDateRangeRefiner.js");
/* harmony import */ var _refiners_UKMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./refiners/UKMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/uk/refiners/UKMergeDateTimeRefiner.js");
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _parsers_UKCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/UKCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKCasualDateParser.js");
/* harmony import */ var _parsers_UKCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parsers/UKCasualTimeParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKCasualTimeParser.js");
/* harmony import */ var _parsers_UKWeekdayParser_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./parsers/UKWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKWeekdayParser.js");
/* harmony import */ var _parsers_UKRelativeDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/UKRelativeDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKRelativeDateFormatParser.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../common/parsers/SlashDateFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/SlashDateFormatParser.js");
/* harmony import */ var _parsers_UKTimeUnitCasualRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/UKTimeUnitCasualRelativeFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitCasualRelativeFormatParser.js");
/* harmony import */ var _common_parsers_ISOFormatParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../common/parsers/ISOFormatParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/ISOFormatParser.js");




















const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration(true));
function createCasualConfiguration() {
    const option = createConfiguration(false);
    option.parsers.unshift(new _parsers_UKCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    option.parsers.unshift(new _parsers_UKCasualTimeParser_js__WEBPACK_IMPORTED_MODULE_4__["default"]());
    option.parsers.unshift(new _parsers_UKMonthNameParser_js__WEBPACK_IMPORTED_MODULE_5__["default"]());
    option.parsers.unshift(new _parsers_UKRelativeDateFormatParser_js__WEBPACK_IMPORTED_MODULE_6__["default"]());
    option.parsers.unshift(new _parsers_UKTimeUnitCasualRelativeFormatParser_js__WEBPACK_IMPORTED_MODULE_7__["default"]());
    return option;
}
function createConfiguration(strictMode) {
    return (0,_configurations_js__WEBPACK_IMPORTED_MODULE_8__.includeCommonConfiguration)({
        parsers: [
            new _common_parsers_ISOFormatParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](),
            new _common_parsers_SlashDateFormatParser_js__WEBPACK_IMPORTED_MODULE_10__["default"](true),
            new _parsers_UKTimeUnitWithinFormatParser_js__WEBPACK_IMPORTED_MODULE_11__["default"](),
            new _parsers_UKMonthNameLittleEndianParser_js__WEBPACK_IMPORTED_MODULE_12__["default"](),
            new _parsers_UKWeekdayParser_js__WEBPACK_IMPORTED_MODULE_13__["default"](),
            new _parsers_UKTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_14__["default"](strictMode),
            new _parsers_UKTimeUnitAgoFormatParser_js__WEBPACK_IMPORTED_MODULE_15__["default"](),
        ],
        refiners: [new _refiners_UKMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_16__["default"](), new _refiners_UKMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_17__["default"]()],
    }, strictMode);
}
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractParserWithLeftBoundaryChecking: () => (/* binding */ AbstractParserWithLeftBoundaryChecking),
/* harmony export */   AbstractParserWithLeftRightBoundaryChecking: () => (/* binding */ AbstractParserWithLeftRightBoundaryChecking)
/* harmony export */ });
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");


class AbstractParserWithLeftBoundaryChecking extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
        return _constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.leftBoundary;
    }
    innerPattern(context) {
        return new RegExp(this.innerPatternString(context), _constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.flags);
    }
    innerPatternHasChange(context, currentInnerPattern) {
        return false;
    }
}
class AbstractParserWithLeftRightBoundaryChecking extends AbstractParserWithLeftBoundaryChecking {
    innerPattern(context) {
        return new RegExp(`${this.innerPatternString(context)}${_constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.rightBoundary}`, _constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.flags);
    }
}
//# sourceMappingURL=AbstractParserWithWordBoundaryChecking.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKCasualDateParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKCasualDateParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKCasualDateParser)
/* harmony export */ });
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js");


class UKCasualDateParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return `(?:з|із|від)?\\s*(сьогодні|вчора|завтра|післязавтра|післяпіслязавтра|позапозавчора|позавчора)`;
    }
    innerExtract(context, match) {
        const lowerText = match[1].toLowerCase();
        const component = context.createParsingComponents();
        switch (lowerText) {
            case "сьогодні":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.today(context.reference);
            case "вчора":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.yesterday(context.reference);
            case "завтра":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.tomorrow(context.reference);
            case "післязавтра":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.theDayAfter(context.reference, 2);
            case "післяпіслязавтра":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.theDayAfter(context.reference, 3);
            case "позавчора":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.theDayBefore(context.reference, 2);
            case "позапозавчора":
                return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_1__.theDayBefore(context.reference, 3);
        }
        return component;
    }
}
//# sourceMappingURL=UKCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKCasualTimeParser.js":
/*!************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKCasualTimeParser.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKCasualTimeParser)
/* harmony export */ });
/* harmony import */ var _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/casualReferences.js */ "./node_modules/chrono-node/dist/esm/common/casualReferences.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js");




class UKCasualTimeParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return `(зараз|минулого\\s*вечора|минулої\\s*ночі|наступної\\s*ночі|сьогодні\\s*вночі|цієї\\s*ночі|цього ранку|вранці|ранку|зранку|опівдні|ввечері|вечора|опівночі|вночі)`;
    }
    innerExtract(context, match) {
        let targetDate = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.reference.instant);
        const lowerText = match[0].toLowerCase();
        const component = context.createParsingComponents();
        if (lowerText === "зараз") {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.now(context.reference);
        }
        if (lowerText === "ввечері" || lowerText === "вечора") {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.evening(context.reference);
        }
        if (lowerText.endsWith("вранці") || lowerText.endsWith("ранку") || lowerText.endsWith("зранку")) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.morning(context.reference);
        }
        if (lowerText.endsWith("опівдні")) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.noon(context.reference);
        }
        if (lowerText.match(/минулої\s*ночі/)) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.lastNight(context.reference);
        }
        if (lowerText.match(/минулого\s*вечора/)) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.yesterdayEvening(context.reference);
        }
        if (lowerText.match(/наступної\s*ночі/)) {
            const daysToAdd = targetDate.hour() < 22 ? 1 : 2;
            targetDate = targetDate.add(daysToAdd, "day");
            (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(component, targetDate);
            component.imply("hour", 1);
        }
        if (lowerText.match(/цієї\s*ночі/)) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.midnight(context.reference);
        }
        if (lowerText.endsWith("опівночі") || lowerText.endsWith("вночі")) {
            return _common_casualReferences_js__WEBPACK_IMPORTED_MODULE_2__.midnight(context.reference);
        }
        return component;
    }
}
//# sourceMappingURL=UKCasualTimeParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKMonthNameLittleEndianParser.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKMonthNameLittleEndianParser.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKMonthNameLittleEndianParser)
/* harmony export */ });
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js");






const DATE_GROUP = 1;
const DATE_TO_GROUP = 2;
const MONTH_NAME_GROUP = 3;
const YEAR_GROUP = 4;
class UKMonthNameLittleEndianParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return (`(?:з|із)?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.ORDINAL_NUMBER_PATTERN})` +
            `(?:` +
            `\\s{0,3}(?:по|-|–|до)?\\s{0,3}` +
            `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.ORDINAL_NUMBER_PATTERN})` +
            `)?` +
            `(?:-|\\/|\\s{0,3}(?:of)?\\s{0,3})` +
            `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY)})` +
            `(?:` +
            `(?:-|\\/|,?\\s{0,3})` +
            `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.YEAR_PATTERN}(?![^\\s]\\d))` +
            `)?`);
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_1__.MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];
        const day = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseOrdinalNumberPattern)(match[DATE_GROUP]);
        if (day > 31) {
            match.index = match.index + match[DATE_GROUP].length;
            return null;
        }
        result.start.assign("month", month);
        result.start.assign("day", day);
        if (match[YEAR_GROUP]) {
            const yearNumber = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseYearPattern)(match[YEAR_GROUP]);
            result.start.assign("year", yearNumber);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.reference.instant, day, month);
            result.start.imply("year", year);
        }
        if (match[DATE_TO_GROUP]) {
            const endDate = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseOrdinalNumberPattern)(match[DATE_TO_GROUP]);
            result.end = result.start.clone();
            result.end.assign("day", endDate);
        }
        return result;
    }
}
//# sourceMappingURL=UKMonthNameLittleEndianParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKMonthNameParser.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKMonthNameParser.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UkMonthNameParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");
/* harmony import */ var _calculation_years_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../calculation/years.js */ "./node_modules/chrono-node/dist/esm/calculation/years.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js");





const MONTH_NAME_GROUP = 2;
const YEAR_GROUP = 3;
class UkMonthNameParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftBoundaryChecking {
    innerPatternString(context) {
        return (`((?:в|у)\\s*)?` +
            `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_2__.MONTH_DICTIONARY)})` +
            `\\s*` +
            `(?:` +
            `[,-]?\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_2__.YEAR_PATTERN})?` +
            `)?` +
            `(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`);
    }
    innerExtract(context, match) {
        const monthName = match[MONTH_NAME_GROUP].toLowerCase();
        if (match[0].length <= 3 && !_constants_js__WEBPACK_IMPORTED_MODULE_2__.FULL_MONTH_NAME_DICTIONARY[monthName]) {
            return null;
        }
        const result = context.createParsingResult(match.index, match.index + match[0].length);
        result.start.imply("day", 1);
        const month = _constants_js__WEBPACK_IMPORTED_MODULE_2__.MONTH_DICTIONARY[monthName];
        result.start.assign("month", month);
        if (match[YEAR_GROUP]) {
            const year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_2__.parseYearPattern)(match[YEAR_GROUP]);
            result.start.assign("year", year);
        }
        else {
            const year = (0,_calculation_years_js__WEBPACK_IMPORTED_MODULE_3__.findYearClosestToRef)(context.reference.instant, 1, month);
            result.start.imply("year", year);
        }
        return result;
    }
}
//# sourceMappingURL=UKMonthNameParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKRelativeDateFormatParser.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKRelativeDateFormatParser.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKRelativeDateFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js");





const MODIFIER_WORD_GROUP = 1;
const RELATIVE_WORD_GROUP = 2;
class UKRelativeDateFormatParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return (`(в минулому|у минулому|на минулому|минулого|на наступному|в наступному|у наступному|наступного|на цьому|в цьому|у цьому|цього)\\s*` +
            `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_2__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_3__.TIME_UNIT_DICTIONARY)})(?=\\s*)`);
    }
    innerExtract(context, match) {
        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();
        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();
        const timeunit = _constants_js__WEBPACK_IMPORTED_MODULE_3__.TIME_UNIT_DICTIONARY[unitWord];
        if (modifier == "на наступному" ||
            modifier == "в наступному" ||
            modifier == "у наступному" ||
            modifier == "наступного") {
            const timeUnits = {};
            timeUnits[timeunit] = 1;
            return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        if (modifier == "на минулому" ||
            modifier == "в минулому" ||
            modifier == "у минулому" ||
            modifier == "минулого") {
            const timeUnits = {};
            timeUnits[timeunit] = -1;
            return _results_js__WEBPACK_IMPORTED_MODULE_4__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
        }
        const components = context.createParsingComponents();
        let date = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.reference.instant);
        if (timeunit.match(/week/i)) {
            date = date.add(-date.get("d"), "d");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.imply("year", date.year());
        }
        else if (timeunit.match(/month/i)) {
            date = date.add(-date.date() + 1, "d");
            components.imply("day", date.date());
            components.assign("year", date.year());
            components.assign("month", date.month() + 1);
        }
        else if (timeunit.match(/year/i)) {
            date = date.add(-date.date() + 1, "d");
            date = date.add(-date.month(), "month");
            components.imply("day", date.date());
            components.imply("month", date.month() + 1);
            components.assign("year", date.year());
        }
        return components;
    }
}
//# sourceMappingURL=UKRelativeDateFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeExpressionParser.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeExpressionParser.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/parsers/AbstractTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractTimeExpressionParser.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");



class UKTimeExpressionParser extends _common_parsers_AbstractTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_0__.AbstractTimeExpressionParser {
    constructor(strictMode) {
        super(strictMode);
    }
    patternFlags() {
        return _constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.flags;
    }
    primaryPatternLeftBoundary() {
        return `(^|\\s|T|(?:[^\\p{L}\\p{N}_]))`;
    }
    followingPhase() {
        return `\\s*(?:\\-|\\–|\\~|\\〜|до|і|по|\\?)\\s*`;
    }
    primaryPrefix() {
        return `(?:(?:в|у|о|об|з|із|від)\\s*)??`;
    }
    primarySuffix() {
        return `(?:\\s*(?:ранку|вечора|по обіді|після обіду))?(?!\\/)${_constants_js__WEBPACK_IMPORTED_MODULE_1__.REGEX_PARTS.rightBoundary}`;
    }
    extractPrimaryTimeComponents(context, match) {
        const components = super.extractPrimaryTimeComponents(context, match);
        if (components) {
            if (match[0].endsWith("вечора")) {
                const hour = components.get("hour");
                if (hour >= 6 && hour < 12) {
                    components.assign("hour", components.get("hour") + 12);
                    components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                }
                else if (hour < 6) {
                    components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                }
            }
            if (match[0].endsWith("по обіді") || match[0].endsWith("після обіду")) {
                components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.PM);
                const hour = components.get("hour");
                if (hour >= 0 && hour <= 6) {
                    components.assign("hour", components.get("hour") + 12);
                }
            }
            if (match[0].endsWith("ранку")) {
                components.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem.AM);
                const hour = components.get("hour");
                if (hour < 12) {
                    components.assign("hour", components.get("hour"));
                }
            }
        }
        return components;
    }
}
//# sourceMappingURL=UKTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitAgoFormatParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitAgoFormatParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKTimeUnitAgoFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js");




class UKTimeUnitAgoFormatParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftBoundaryChecking {
    innerPatternString(context) {
        return `(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN})\\s{0,5}тому(?=(?:\\W|$))`;
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[1]);
        const outputTimeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);
    }
}
//# sourceMappingURL=UKTimeUnitAgoFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitCasualRelativeFormatParser.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitCasualRelativeFormatParser.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKTimeUnitCasualRelativeFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/timeunits.js */ "./node_modules/chrono-node/dist/esm/utils/timeunits.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js");




class UKTimeUnitCasualRelativeFormatParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return `(ці|останні|минулі|майбутні|наступні|після|через|\\+|-)\\s*(${_constants_js__WEBPACK_IMPORTED_MODULE_1__.TIME_UNITS_PATTERN})`;
    }
    innerExtract(context, match) {
        const prefix = match[1].toLowerCase();
        let timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.parseTimeUnits)(match[3]);
        switch (prefix) {
            case "останні":
            case "минулі":
            case "-":
                timeUnits = (0,_utils_timeunits_js__WEBPACK_IMPORTED_MODULE_2__.reverseTimeUnits)(timeUnits);
                break;
        }
        return _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=UKTimeUnitCasualRelativeFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitWithinFormatParser.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKTimeUnitWithinFormatParser.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKTimeUnitWithinFormatParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");



const PATTERN = `(?:(?:приблизно|орієнтовно)\\s*(?:~\\s*)?)?(${_constants_js__WEBPACK_IMPORTED_MODULE_0__.TIME_UNITS_PATTERN})${_constants_js__WEBPACK_IMPORTED_MODULE_0__.REGEX_PARTS.rightBoundary}`;
class UKTimeUnitWithinFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    patternLeftBoundary() {
        return _constants_js__WEBPACK_IMPORTED_MODULE_0__.REGEX_PARTS.leftBoundary;
    }
    innerPattern(context) {
        return context.option.forwardDate
            ? new RegExp(PATTERN, "i")
            : new RegExp(`(?:протягом|на протязі|протягом|упродовж|впродовж)\\s*${PATTERN}`, _constants_js__WEBPACK_IMPORTED_MODULE_0__.REGEX_PARTS.flags);
    }
    innerExtract(context, match) {
        const timeUnits = (0,_constants_js__WEBPACK_IMPORTED_MODULE_0__.parseTimeUnits)(match[1]);
        return _results_js__WEBPACK_IMPORTED_MODULE_2__.ParsingComponents.createRelativeFromReference(context.reference, timeUnits);
    }
}
//# sourceMappingURL=UKTimeUnitWithinFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKWeekdayParser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/parsers/UKWeekdayParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKWeekdayParser)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/uk/constants.js");
/* harmony import */ var _utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../utils/pattern.js */ "./node_modules/chrono-node/dist/esm/utils/pattern.js");
/* harmony import */ var _common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../common/calculation/weekdays.js */ "./node_modules/chrono-node/dist/esm/common/calculation/weekdays.js");
/* harmony import */ var _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractParserWithWordBoundaryChecking.js */ "./node_modules/chrono-node/dist/esm/locales/uk/parsers/AbstractParserWithWordBoundaryChecking.js");




const PREFIX_GROUP = 1;
const WEEKDAY_GROUP = 2;
const POSTFIX_GROUP = 3;
class UKWeekdayParser extends _AbstractParserWithWordBoundaryChecking_js__WEBPACK_IMPORTED_MODULE_0__.AbstractParserWithLeftRightBoundaryChecking {
    innerPatternString(context) {
        return (`(?:(?:,|\\(|（)\\s*)?` +
            `(?:в\\s*?)?` +
            `(?:у\\s*?)?` +
            `(?:(цей|минулого|минулий|попередній|попереднього|наступного|наступний|наступному)\\s*)?` +
            `(${(0,_utils_pattern_js__WEBPACK_IMPORTED_MODULE_1__.matchAnyPattern)(_constants_js__WEBPACK_IMPORTED_MODULE_2__.WEEKDAY_DICTIONARY)})` +
            `(?:\\s*(?:,|\\)|）))?` +
            `(?:\\s*(на|у|в)\\s*(цьому|минулому|наступному)\\s*тижні)?`);
    }
    innerExtract(context, match) {
        const dayOfWeek = match[WEEKDAY_GROUP].toLocaleLowerCase();
        const weekday = _constants_js__WEBPACK_IMPORTED_MODULE_2__.WEEKDAY_DICTIONARY[dayOfWeek];
        const prefix = match[PREFIX_GROUP];
        const postfix = match[POSTFIX_GROUP];
        let modifierWord = prefix || postfix;
        modifierWord = modifierWord || "";
        modifierWord = modifierWord.toLocaleLowerCase();
        let modifier = null;
        if (modifierWord == "минулого" ||
            modifierWord == "минулий" ||
            modifierWord == "попередній" ||
            modifierWord == "попереднього") {
            modifier = "last";
        }
        else if (modifierWord == "наступного" || modifierWord == "наступний") {
            modifier = "next";
        }
        else if (modifierWord == "цей" || modifierWord == "цього" || modifierWord == "цьому") {
            modifier = "this";
        }
        return (0,_common_calculation_weekdays_js__WEBPACK_IMPORTED_MODULE_3__.createParsingComponentsAtWeekday)(context.reference, weekday, modifier);
    }
}
//# sourceMappingURL=UKWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/refiners/UKMergeDateRangeRefiner.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/refiners/UKMergeDateRangeRefiner.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class UKMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(і до|і по|до|по|-)\s*$/i;
    }
}
//# sourceMappingURL=UKMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/uk/refiners/UKMergeDateTimeRefiner.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/uk/refiners/UKMergeDateTimeRefiner.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UKMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class UKMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return new RegExp(`^\\s*(T|в|у|о|,|-)?\\s*$`);
    }
}
//# sourceMappingURL=UKMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NUMBER: () => (/* binding */ NUMBER),
/* harmony export */   WEEKDAY_OFFSET: () => (/* binding */ WEEKDAY_OFFSET),
/* harmony export */   zhStringToNumber: () => (/* binding */ zhStringToNumber),
/* harmony export */   zhStringToYear: () => (/* binding */ zhStringToYear)
/* harmony export */ });
const NUMBER = {
    "零": 0,
    "〇": 0,
    "一": 1,
    "二": 2,
    "两": 2,
    "三": 3,
    "四": 4,
    "五": 5,
    "六": 6,
    "七": 7,
    "八": 8,
    "九": 9,
    "十": 10,
};
const WEEKDAY_OFFSET = {
    "天": 0,
    "日": 0,
    "一": 1,
    "二": 2,
    "三": 3,
    "四": 4,
    "五": 5,
    "六": 6,
};
function zhStringToNumber(text) {
    let number = 0;
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        if (char === "十") {
            number = number === 0 ? NUMBER[char] : number * NUMBER[char];
        }
        else {
            number += NUMBER[char];
        }
    }
    return number;
}
function zhStringToYear(text) {
    let string = "";
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        string = string + NUMBER[char];
    }
    return parseInt(string);
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   hans: () => (/* binding */ hans),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _common_refiners_ExtractTimezoneOffsetRefiner_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../common/refiners/ExtractTimezoneOffsetRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneOffsetRefiner.js");
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _parsers_ZHHansCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/ZHHansCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansCasualDateParser.js");
/* harmony import */ var _parsers_ZHHansDateParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/ZHHansDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansDateParser.js");
/* harmony import */ var _parsers_ZHHansDeadlineFormatParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/ZHHansDeadlineFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansDeadlineFormatParser.js");
/* harmony import */ var _parsers_ZHHansRelationWeekdayParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/ZHHansRelationWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansRelationWeekdayParser.js");
/* harmony import */ var _parsers_ZHHansTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/ZHHansTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansTimeExpressionParser.js");
/* harmony import */ var _parsers_ZHHansWeekdayParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/ZHHansWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansWeekdayParser.js");
/* harmony import */ var _refiners_ZHHansMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./refiners/ZHHansMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/refiners/ZHHansMergeDateRangeRefiner.js");
/* harmony import */ var _refiners_ZHHansMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./refiners/ZHHansMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/refiners/ZHHansMergeDateTimeRefiner.js");















const hans = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration());
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration() {
    const option = createConfiguration();
    option.parsers.unshift(new _parsers_ZHHansCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    return option;
}
function createConfiguration() {
    const configuration = (0,_configurations_js__WEBPACK_IMPORTED_MODULE_4__.includeCommonConfiguration)({
        parsers: [
            new _parsers_ZHHansDateParser_js__WEBPACK_IMPORTED_MODULE_5__["default"](),
            new _parsers_ZHHansRelationWeekdayParser_js__WEBPACK_IMPORTED_MODULE_6__["default"](),
            new _parsers_ZHHansWeekdayParser_js__WEBPACK_IMPORTED_MODULE_7__["default"](),
            new _parsers_ZHHansTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_8__["default"](),
            new _parsers_ZHHansDeadlineFormatParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](),
        ],
        refiners: [new _refiners_ZHHansMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_10__["default"](), new _refiners_ZHHansMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_11__["default"]()],
    });
    configuration.refiners = configuration.refiners.filter((refiner) => !(refiner instanceof _common_refiners_ExtractTimezoneOffsetRefiner_js__WEBPACK_IMPORTED_MODULE_12__["default"]));
    return configuration;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansCasualDateParser.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansCasualDateParser.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHansCasualDateParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");


const NOW_GROUP = 1;
const DAY_GROUP_1 = 2;
const TIME_GROUP_1 = 3;
const TIME_GROUP_2 = 4;
const DAY_GROUP_3 = 5;
const TIME_GROUP_3 = 6;
class ZHHansCasualDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return new RegExp("(现在|立(?:刻|即)|即刻)|" +
            "(今|明|前|大前|后|大后|昨)(早|晚)|" +
            "(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|" +
            "(今|明|前|大前|后|大后|昨)(?:日|天)" +
            "(?:[\\s|,|，]*)" +
            "(?:(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?", "i");
    }
    innerExtract(context, match) {
        const index = match.index;
        const result = context.createParsingResult(index, match[0]);
        const refMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        let startMoment = refMoment;
        if (match[NOW_GROUP]) {
            result.start.imply("hour", refMoment.hour());
            result.start.imply("minute", refMoment.minute());
            result.start.imply("second", refMoment.second());
            result.start.imply("millisecond", refMoment.millisecond());
        }
        else if (match[DAY_GROUP_1]) {
            const day1 = match[DAY_GROUP_1];
            const time1 = match[TIME_GROUP_1];
            if (day1 == "明") {
                if (refMoment.hour() > 1) {
                    startMoment = startMoment.add(1, "day");
                }
            }
            else if (day1 == "昨") {
                startMoment = startMoment.add(-1, "day");
            }
            else if (day1 == "前") {
                startMoment = startMoment.add(-2, "day");
            }
            else if (day1 == "大前") {
                startMoment = startMoment.add(-3, "day");
            }
            else if (day1 == "后") {
                startMoment = startMoment.add(2, "day");
            }
            else if (day1 == "大后") {
                startMoment = startMoment.add(3, "day");
            }
            if (time1 == "早") {
                result.start.imply("hour", 6);
            }
            else if (time1 == "晚") {
                result.start.imply("hour", 22);
                result.start.imply("meridiem", 1);
            }
        }
        else if (match[TIME_GROUP_2]) {
            const timeString2 = match[TIME_GROUP_2];
            const time2 = timeString2[0];
            if (time2 == "早" || time2 == "上") {
                result.start.imply("hour", 6);
            }
            else if (time2 == "下") {
                result.start.imply("hour", 15);
                result.start.imply("meridiem", 1);
            }
            else if (time2 == "中") {
                result.start.imply("hour", 12);
                result.start.imply("meridiem", 1);
            }
            else if (time2 == "夜" || time2 == "晚") {
                result.start.imply("hour", 22);
                result.start.imply("meridiem", 1);
            }
            else if (time2 == "凌") {
                result.start.imply("hour", 0);
            }
        }
        else if (match[DAY_GROUP_3]) {
            const day3 = match[DAY_GROUP_3];
            if (day3 == "明") {
                if (refMoment.hour() > 1) {
                    startMoment = startMoment.add(1, "day");
                }
            }
            else if (day3 == "昨") {
                startMoment = startMoment.add(-1, "day");
            }
            else if (day3 == "前") {
                startMoment = startMoment.add(-2, "day");
            }
            else if (day3 == "大前") {
                startMoment = startMoment.add(-3, "day");
            }
            else if (day3 == "后") {
                startMoment = startMoment.add(2, "day");
            }
            else if (day3 == "大后") {
                startMoment = startMoment.add(3, "day");
            }
            const timeString3 = match[TIME_GROUP_3];
            if (timeString3) {
                const time3 = timeString3[0];
                if (time3 == "早" || time3 == "上") {
                    result.start.imply("hour", 6);
                }
                else if (time3 == "下") {
                    result.start.imply("hour", 15);
                    result.start.imply("meridiem", 1);
                }
                else if (time3 == "中") {
                    result.start.imply("hour", 12);
                    result.start.imply("meridiem", 1);
                }
                else if (time3 == "夜" || time3 == "晚") {
                    result.start.imply("hour", 22);
                    result.start.imply("meridiem", 1);
                }
                else if (time3 == "凌") {
                    result.start.imply("hour", 0);
                }
            }
        }
        result.start.assign("day", startMoment.date());
        result.start.assign("month", startMoment.month() + 1);
        result.start.assign("year", startMoment.year());
        return result;
    }
}
//# sourceMappingURL=ZHHansCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansDateParser.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansDateParser.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHansDateParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/constants.js");



const YEAR_GROUP = 1;
const MONTH_GROUP = 2;
const DAY_GROUP = 3;
class ZHHansDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return new RegExp("(" +
            "\\d{2,4}|" +
            "[" +
            Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_2__.NUMBER).join("") +
            "]{4}|" +
            "[" +
            Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_2__.NUMBER).join("") +
            "]{2}" +
            ")?" +
            "(?:\\s*)" +
            "(?:年)?" +
            "(?:[\\s|,|，]*)" +
            "(" +
            "\\d{1,2}|" +
            "[" +
            Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_2__.NUMBER).join("") +
            "]{1,3}" +
            ")" +
            "(?:\\s*)" +
            "(?:月)" +
            "(?:\\s*)" +
            "(" +
            "\\d{1,2}|" +
            "[" +
            Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_2__.NUMBER).join("") +
            "]{1,3}" +
            ")?" +
            "(?:\\s*)" +
            "(?:日|号)?");
    }
    innerExtract(context, match) {
        const startMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const result = context.createParsingResult(match.index, match[0]);
        let month = parseInt(match[MONTH_GROUP]);
        if (isNaN(month))
            month = (0,_constants_js__WEBPACK_IMPORTED_MODULE_2__.zhStringToNumber)(match[MONTH_GROUP]);
        result.start.assign("month", month);
        if (match[DAY_GROUP]) {
            let day = parseInt(match[DAY_GROUP]);
            if (isNaN(day))
                day = (0,_constants_js__WEBPACK_IMPORTED_MODULE_2__.zhStringToNumber)(match[DAY_GROUP]);
            result.start.assign("day", day);
        }
        else {
            result.start.imply("day", startMoment.date());
        }
        if (match[YEAR_GROUP]) {
            let year = parseInt(match[YEAR_GROUP]);
            if (isNaN(year))
                year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_2__.zhStringToYear)(match[YEAR_GROUP]);
            result.start.assign("year", year);
        }
        else {
            result.start.imply("year", startMoment.year());
        }
        return result;
    }
}
//# sourceMappingURL=ZHHansDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansDeadlineFormatParser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansDeadlineFormatParser.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHansDeadlineFormatParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/constants.js");



const PATTERN = new RegExp("(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+|半|几)(?:\\s*)" +
    "(?:个)?" +
    "(秒(?:钟)?|分钟|小时|钟|日|天|星期|礼拜|月|年)" +
    "(?:(?:之|过)?后|(?:之)?内)", "i");
const NUMBER_GROUP = 1;
const UNIT_GROUP = 2;
class ZHHansDeadlineFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        let number = parseInt(match[NUMBER_GROUP]);
        if (isNaN(number)) {
            number = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[NUMBER_GROUP]);
        }
        if (isNaN(number)) {
            const string = match[NUMBER_GROUP];
            if (string === "几") {
                number = 3;
            }
            else if (string === "半") {
                number = 0.5;
            }
            else {
                return null;
            }
        }
        let date = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const unit = match[UNIT_GROUP];
        const unitAbbr = unit[0];
        if (unitAbbr.match(/[日天星礼月年]/)) {
            if (unitAbbr == "日" || unitAbbr == "天") {
                date = date.add(number, "d");
            }
            else if (unitAbbr == "星" || unitAbbr == "礼") {
                date = date.add(number * 7, "d");
            }
            else if (unitAbbr == "月") {
                date = date.add(number, "month");
            }
            else if (unitAbbr == "年") {
                date = date.add(number, "year");
            }
            result.start.assign("year", date.year());
            result.start.assign("month", date.month() + 1);
            result.start.assign("day", date.date());
            return result;
        }
        if (unitAbbr == "秒") {
            date = date.add(number, "second");
        }
        else if (unitAbbr == "分") {
            date = date.add(number, "minute");
        }
        else if (unitAbbr == "小" || unitAbbr == "钟") {
            date = date.add(number, "hour");
        }
        result.start.imply("year", date.year());
        result.start.imply("month", date.month() + 1);
        result.start.imply("day", date.date());
        result.start.assign("hour", date.hour());
        result.start.assign("minute", date.minute());
        result.start.assign("second", date.second());
        return result;
    }
}
//# sourceMappingURL=ZHHansDeadlineFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansRelationWeekdayParser.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansRelationWeekdayParser.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHansRelationWeekdayParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/constants.js");



const PATTERN = new RegExp("(?<prefix>上|下|这)(?:个)?(?:星期|礼拜|周)(?<weekday>" + Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_OFFSET).join("|") + ")");
class ZHHansRelationWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const dayOfWeek = match.groups.weekday;
        const offset = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_OFFSET[dayOfWeek];
        if (offset === undefined)
            return null;
        let modifier = null;
        const prefix = match.groups.prefix;
        if (prefix == "上") {
            modifier = "last";
        }
        else if (prefix == "下") {
            modifier = "next";
        }
        else if (prefix == "这") {
            modifier = "this";
        }
        let startMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        let startMomentFixed = false;
        const refOffset = startMoment.day();
        if (modifier == "last" || modifier == "past") {
            startMoment = startMoment.day(offset - 7);
            startMomentFixed = true;
        }
        else if (modifier == "next") {
            startMoment = startMoment.day(offset + 7);
            startMomentFixed = true;
        }
        else if (modifier == "this") {
            startMoment = startMoment.day(offset);
        }
        else {
            if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
                startMoment = startMoment.day(offset - 7);
            }
            else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
                startMoment = startMoment.day(offset + 7);
            }
            else {
                startMoment = startMoment.day(offset);
            }
        }
        result.start.assign("weekday", offset);
        if (startMomentFixed) {
            result.start.assign("day", startMoment.date());
            result.start.assign("month", startMoment.month() + 1);
            result.start.assign("year", startMoment.year());
        }
        else {
            result.start.imply("day", startMoment.date());
            result.start.imply("month", startMoment.month() + 1);
            result.start.imply("year", startMoment.year());
        }
        return result;
    }
}
//# sourceMappingURL=ZHHansRelationWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansTimeExpressionParser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansTimeExpressionParser.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHansTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/constants.js");



const FIRST_REG_PATTERN = new RegExp("(?:从|自)?" +
    "(?:" +
    "(今|明|前|大前|后|大后|昨)(早|朝|晚)|" +
    "(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|" +
    "(今|明|前|大前|后|大后|昨)(?:日|天)" +
    "(?:[\\s,，]*)" +
    "(?:(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?" +
    ")?" +
    "(?:[\\s,，]*)" +
    "(?:(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)(?:\\s*)(?:点|时|:|：)" +
    "(?:\\s*)" +
    "(\\d+|半|正|整|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)?(?:\\s*)(?:分|:|：)?" +
    "(?:\\s*)" +
    "(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)?(?:\\s*)(?:秒)?)" +
    "(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
const SECOND_REG_PATTERN = new RegExp("(?:^\\s*(?:到|至|\\-|\\–|\\~|\\〜)\\s*)" +
    "(?:" +
    "(今|明|前|大前|后|大后|昨)(早|朝|晚)|" +
    "(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|" +
    "(今|明|前|大前|后|大后|昨)(?:日|天)" +
    "(?:[\\s,，]*)" +
    "(?:(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?" +
    ")?" +
    "(?:[\\s,，]*)" +
    "(?:(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)(?:\\s*)(?:点|时|:|：)" +
    "(?:\\s*)" +
    "(\\d+|半|正|整|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)?(?:\\s*)(?:分|:|：)?" +
    "(?:\\s*)" +
    "(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)?(?:\\s*)(?:秒)?)" +
    "(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
const DAY_GROUP_1 = 1;
const ZH_AM_PM_HOUR_GROUP_1 = 2;
const ZH_AM_PM_HOUR_GROUP_2 = 3;
const DAY_GROUP_3 = 4;
const ZH_AM_PM_HOUR_GROUP_3 = 5;
const HOUR_GROUP = 6;
const MINUTE_GROUP = 7;
const SECOND_GROUP = 8;
const AM_PM_HOUR_GROUP = 9;
class ZHHansTimeExpressionParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return FIRST_REG_PATTERN;
    }
    innerExtract(context, match) {
        if (match.index > 0 && context.text[match.index - 1].match(/\w/)) {
            return null;
        }
        const refMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const result = context.createParsingResult(match.index, match[0]);
        let startMoment = refMoment.clone();
        if (match[DAY_GROUP_1]) {
            const day1 = match[DAY_GROUP_1];
            if (day1 == "明") {
                if (refMoment.hour() > 1) {
                    startMoment = startMoment.add(1, "day");
                }
            }
            else if (day1 == "昨") {
                startMoment = startMoment.add(-1, "day");
            }
            else if (day1 == "前") {
                startMoment = startMoment.add(-2, "day");
            }
            else if (day1 == "大前") {
                startMoment = startMoment.add(-3, "day");
            }
            else if (day1 == "后") {
                startMoment = startMoment.add(2, "day");
            }
            else if (day1 == "大后") {
                startMoment = startMoment.add(3, "day");
            }
            result.start.assign("day", startMoment.date());
            result.start.assign("month", startMoment.month() + 1);
            result.start.assign("year", startMoment.year());
        }
        else if (match[DAY_GROUP_3]) {
            const day3 = match[DAY_GROUP_3];
            if (day3 == "明") {
                startMoment = startMoment.add(1, "day");
            }
            else if (day3 == "昨") {
                startMoment = startMoment.add(-1, "day");
            }
            else if (day3 == "前") {
                startMoment = startMoment.add(-2, "day");
            }
            else if (day3 == "大前") {
                startMoment = startMoment.add(-3, "day");
            }
            else if (day3 == "后") {
                startMoment = startMoment.add(2, "day");
            }
            else if (day3 == "大后") {
                startMoment = startMoment.add(3, "day");
            }
            result.start.assign("day", startMoment.date());
            result.start.assign("month", startMoment.month() + 1);
            result.start.assign("year", startMoment.year());
        }
        else {
            result.start.imply("day", startMoment.date());
            result.start.imply("month", startMoment.month() + 1);
            result.start.imply("year", startMoment.year());
        }
        let hour = 0;
        let minute = 0;
        let meridiem = -1;
        if (match[SECOND_GROUP]) {
            let second = parseInt(match[SECOND_GROUP]);
            if (isNaN(second)) {
                second = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[SECOND_GROUP]);
            }
            if (second >= 60)
                return null;
            result.start.assign("second", second);
        }
        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
            hour = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP]) {
            if (match[MINUTE_GROUP] == "半") {
                minute = 30;
            }
            else if (match[MINUTE_GROUP] == "正" || match[MINUTE_GROUP] == "整") {
                minute = 0;
            }
            else {
                minute = parseInt(match[MINUTE_GROUP]);
                if (isNaN(minute)) {
                    minute = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[MINUTE_GROUP]);
                }
            }
        }
        else if (hour > 100) {
            minute = hour % 100;
            hour = Math.floor(hour / 100);
        }
        if (minute >= 60) {
            return null;
        }
        if (hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }
        if (match[AM_PM_HOUR_GROUP]) {
            if (hour > 12)
                return null;
            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            if (ampm == "p") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
            const zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
            const zhAMPM1 = zhAMPMString1[0];
            if (zhAMPM1 == "早") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM1 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
            const zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
            const zhAMPM2 = zhAMPMString2[0];
            if (zhAMPM2 == "上" || zhAMPM2 == "早" || zhAMPM2 == "凌") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM2 == "下" || zhAMPM2 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
            const zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
            const zhAMPM3 = zhAMPMString3[0];
            if (zhAMPM3 == "上" || zhAMPM3 == "早" || zhAMPM3 == "凌") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM3 == "下" || zhAMPM3 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        result.start.assign("hour", hour);
        result.start.assign("minute", minute);
        if (meridiem >= 0) {
            result.start.assign("meridiem", meridiem);
        }
        else {
            if (hour < 12) {
                result.start.imply("meridiem", 0);
            }
            else {
                result.start.imply("meridiem", 1);
            }
        }
        match = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));
        if (!match) {
            if (result.text.match(/^\d+$/)) {
                return null;
            }
            return result;
        }
        let endMoment = startMoment.clone();
        result.end = context.createParsingComponents();
        if (match[DAY_GROUP_1]) {
            const day1 = match[DAY_GROUP_1];
            if (day1 == "明") {
                if (refMoment.hour() > 1) {
                    endMoment = endMoment.add(1, "day");
                }
            }
            else if (day1 == "昨") {
                endMoment = endMoment.add(-1, "day");
            }
            else if (day1 == "前") {
                endMoment = endMoment.add(-2, "day");
            }
            else if (day1 == "大前") {
                endMoment = endMoment.add(-3, "day");
            }
            else if (day1 == "后") {
                endMoment = endMoment.add(2, "day");
            }
            else if (day1 == "大后") {
                endMoment = endMoment.add(3, "day");
            }
            result.end.assign("day", endMoment.date());
            result.end.assign("month", endMoment.month() + 1);
            result.end.assign("year", endMoment.year());
        }
        else if (match[DAY_GROUP_3]) {
            const day3 = match[DAY_GROUP_3];
            if (day3 == "明") {
                endMoment = endMoment.add(1, "day");
            }
            else if (day3 == "昨") {
                endMoment = endMoment.add(-1, "day");
            }
            else if (day3 == "前") {
                endMoment = endMoment.add(-2, "day");
            }
            else if (day3 == "大前") {
                endMoment = endMoment.add(-3, "day");
            }
            else if (day3 == "后") {
                endMoment = endMoment.add(2, "day");
            }
            else if (day3 == "大后") {
                endMoment = endMoment.add(3, "day");
            }
            result.end.assign("day", endMoment.date());
            result.end.assign("month", endMoment.month() + 1);
            result.end.assign("year", endMoment.year());
        }
        else {
            result.end.imply("day", endMoment.date());
            result.end.imply("month", endMoment.month() + 1);
            result.end.imply("year", endMoment.year());
        }
        hour = 0;
        minute = 0;
        meridiem = -1;
        if (match[SECOND_GROUP]) {
            let second = parseInt(match[SECOND_GROUP]);
            if (isNaN(second)) {
                second = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[SECOND_GROUP]);
            }
            if (second >= 60)
                return null;
            result.end.assign("second", second);
        }
        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
            hour = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP]) {
            if (match[MINUTE_GROUP] == "半") {
                minute = 30;
            }
            else if (match[MINUTE_GROUP] == "正" || match[MINUTE_GROUP] == "整") {
                minute = 0;
            }
            else {
                minute = parseInt(match[MINUTE_GROUP]);
                if (isNaN(minute)) {
                    minute = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[MINUTE_GROUP]);
                }
            }
        }
        else if (hour > 100) {
            minute = hour % 100;
            hour = Math.floor(hour / 100);
        }
        if (minute >= 60) {
            return null;
        }
        if (hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }
        if (match[AM_PM_HOUR_GROUP]) {
            if (hour > 12)
                return null;
            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            if (ampm == "p") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
            if (!result.start.isCertain("meridiem")) {
                if (meridiem == 0) {
                    result.start.imply("meridiem", 0);
                    if (result.start.get("hour") == 12) {
                        result.start.assign("hour", 0);
                    }
                }
                else {
                    result.start.imply("meridiem", 1);
                    if (result.start.get("hour") != 12) {
                        result.start.assign("hour", result.start.get("hour") + 12);
                    }
                }
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
            const zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
            const zhAMPM1 = zhAMPMString1[0];
            if (zhAMPM1 == "早") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM1 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
            const zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
            const zhAMPM2 = zhAMPMString2[0];
            if (zhAMPM2 == "上" || zhAMPM2 == "早" || zhAMPM2 == "凌") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM2 == "下" || zhAMPM2 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
            const zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
            const zhAMPM3 = zhAMPMString3[0];
            if (zhAMPM3 == "上" || zhAMPM3 == "早" || zhAMPM3 == "凌") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM3 == "下" || zhAMPM3 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        result.text = result.text + match[0];
        result.end.assign("hour", hour);
        result.end.assign("minute", minute);
        if (meridiem >= 0) {
            result.end.assign("meridiem", meridiem);
        }
        else {
            const startAtPM = result.start.isCertain("meridiem") && result.start.get("meridiem") == 1;
            if (startAtPM && result.start.get("hour") > hour) {
                result.end.imply("meridiem", 0);
            }
            else if (hour > 12) {
                result.end.imply("meridiem", 1);
            }
        }
        if (result.end.date().getTime() < result.start.date().getTime()) {
            result.end.imply("day", result.end.get("day") + 1);
        }
        return result;
    }
}
//# sourceMappingURL=ZHHansTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansWeekdayParser.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansWeekdayParser.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHansWeekdayParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/constants.js");



const PATTERN = new RegExp("(?:星期|礼拜|周)(?<weekday>" + Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_OFFSET).join("|") + ")");
class ZHHansWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const dayOfWeek = match.groups.weekday;
        const offset = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_OFFSET[dayOfWeek];
        if (offset === undefined)
            return null;
        let startMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const startMomentFixed = false;
        const refOffset = startMoment.day();
        if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment = startMoment.day(offset - 7);
        }
        else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment = startMoment.day(offset + 7);
        }
        else {
            startMoment = startMoment.day(offset);
        }
        result.start.assign("weekday", offset);
        if (startMomentFixed) {
            result.start.assign("day", startMoment.date());
            result.start.assign("month", startMoment.month() + 1);
            result.start.assign("year", startMoment.year());
        }
        else {
            result.start.imply("day", startMoment.date());
            result.start.imply("month", startMoment.month() + 1);
            result.start.imply("year", startMoment.year());
        }
        return result;
    }
}
//# sourceMappingURL=ZHHansWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/refiners/ZHHansMergeDateRangeRefiner.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/refiners/ZHHansMergeDateRangeRefiner.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHansMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class ZHHansMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(至|到|-|~|～|－|ー)\s*$/i;
    }
}
//# sourceMappingURL=ZHHansMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hans/refiners/ZHHansMergeDateTimeRefiner.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hans/refiners/ZHHansMergeDateTimeRefiner.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHansMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class ZHHansMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*$/i;
    }
}
//# sourceMappingURL=ZHHansMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NUMBER: () => (/* binding */ NUMBER),
/* harmony export */   WEEKDAY_OFFSET: () => (/* binding */ WEEKDAY_OFFSET),
/* harmony export */   zhStringToNumber: () => (/* binding */ zhStringToNumber),
/* harmony export */   zhStringToYear: () => (/* binding */ zhStringToYear)
/* harmony export */ });
const NUMBER = {
    "零": 0,
    "一": 1,
    "二": 2,
    "兩": 2,
    "三": 3,
    "四": 4,
    "五": 5,
    "六": 6,
    "七": 7,
    "八": 8,
    "九": 9,
    "十": 10,
    "廿": 20,
    "卅": 30,
};
const WEEKDAY_OFFSET = {
    "天": 0,
    "日": 0,
    "一": 1,
    "二": 2,
    "三": 3,
    "四": 4,
    "五": 5,
    "六": 6,
};
function zhStringToNumber(text) {
    let number = 0;
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        if (char === "十") {
            number = number === 0 ? NUMBER[char] : number * NUMBER[char];
        }
        else {
            number += NUMBER[char];
        }
    }
    return number;
}
function zhStringToYear(text) {
    let string = "";
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        string = string + NUMBER[char];
    }
    return parseInt(string);
}
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_1__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_2__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   hant: () => (/* binding */ hant),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _common_refiners_ExtractTimezoneOffsetRefiner_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../../common/refiners/ExtractTimezoneOffsetRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneOffsetRefiner.js");
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _parsers_ZHHantCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./parsers/ZHHantCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantCasualDateParser.js");
/* harmony import */ var _parsers_ZHHantDateParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parsers/ZHHantDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantDateParser.js");
/* harmony import */ var _parsers_ZHHantDeadlineFormatParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parsers/ZHHantDeadlineFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantDeadlineFormatParser.js");
/* harmony import */ var _parsers_ZHHantRelationWeekdayParser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/ZHHantRelationWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantRelationWeekdayParser.js");
/* harmony import */ var _parsers_ZHHantTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parsers/ZHHantTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantTimeExpressionParser.js");
/* harmony import */ var _parsers_ZHHantWeekdayParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parsers/ZHHantWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantWeekdayParser.js");
/* harmony import */ var _refiners_ZHHantMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./refiners/ZHHantMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/refiners/ZHHantMergeDateRangeRefiner.js");
/* harmony import */ var _refiners_ZHHantMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./refiners/ZHHantMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/refiners/ZHHantMergeDateTimeRefiner.js");















const hant = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_0__.Chrono(createConfiguration());
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration() {
    const option = createConfiguration();
    option.parsers.unshift(new _parsers_ZHHantCasualDateParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]());
    return option;
}
function createConfiguration() {
    const configuration = (0,_configurations_js__WEBPACK_IMPORTED_MODULE_4__.includeCommonConfiguration)({
        parsers: [
            new _parsers_ZHHantDateParser_js__WEBPACK_IMPORTED_MODULE_5__["default"](),
            new _parsers_ZHHantRelationWeekdayParser_js__WEBPACK_IMPORTED_MODULE_6__["default"](),
            new _parsers_ZHHantWeekdayParser_js__WEBPACK_IMPORTED_MODULE_7__["default"](),
            new _parsers_ZHHantTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_8__["default"](),
            new _parsers_ZHHantDeadlineFormatParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](),
        ],
        refiners: [new _refiners_ZHHantMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_10__["default"](), new _refiners_ZHHantMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_11__["default"]()],
    });
    configuration.refiners = configuration.refiners.filter((refiner) => !(refiner instanceof _common_refiners_ExtractTimezoneOffsetRefiner_js__WEBPACK_IMPORTED_MODULE_12__["default"]));
    return configuration;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantCasualDateParser.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantCasualDateParser.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHantCasualDateParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");


const NOW_GROUP = 1;
const DAY_GROUP_1 = 2;
const TIME_GROUP_1 = 3;
const TIME_GROUP_2 = 4;
const DAY_GROUP_3 = 5;
const TIME_GROUP_3 = 6;
class ZHHantCasualDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern(context) {
        return new RegExp("(而家|立(?:刻|即)|即刻)|" +
            "(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|" +
            "(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|" +
            "(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)" +
            "(?:[\\s|,|，]*)" +
            "(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?", "i");
    }
    innerExtract(context, match) {
        const index = match.index;
        const result = context.createParsingResult(index, match[0]);
        const refMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        let startMoment = refMoment;
        if (match[NOW_GROUP]) {
            result.start.imply("hour", refMoment.hour());
            result.start.imply("minute", refMoment.minute());
            result.start.imply("second", refMoment.second());
            result.start.imply("millisecond", refMoment.millisecond());
        }
        else if (match[DAY_GROUP_1]) {
            const day1 = match[DAY_GROUP_1];
            const time1 = match[TIME_GROUP_1];
            if (day1 == "明" || day1 == "聽") {
                if (refMoment.hour() > 1) {
                    startMoment = startMoment.add(1, "day");
                }
            }
            else if (day1 == "昨" || day1 == "尋" || day1 == "琴") {
                startMoment = startMoment.add(-1, "day");
            }
            else if (day1 == "前") {
                startMoment = startMoment.add(-2, "day");
            }
            else if (day1 == "大前") {
                startMoment = startMoment.add(-3, "day");
            }
            else if (day1 == "後") {
                startMoment = startMoment.add(2, "day");
            }
            else if (day1 == "大後") {
                startMoment = startMoment.add(3, "day");
            }
            if (time1 == "早" || time1 == "朝") {
                result.start.imply("hour", 6);
            }
            else if (time1 == "晚") {
                result.start.imply("hour", 22);
                result.start.imply("meridiem", 1);
            }
        }
        else if (match[TIME_GROUP_2]) {
            const timeString2 = match[TIME_GROUP_2];
            const time2 = timeString2[0];
            if (time2 == "早" || time2 == "朝" || time2 == "上") {
                result.start.imply("hour", 6);
            }
            else if (time2 == "下" || time2 == "晏") {
                result.start.imply("hour", 15);
                result.start.imply("meridiem", 1);
            }
            else if (time2 == "中") {
                result.start.imply("hour", 12);
                result.start.imply("meridiem", 1);
            }
            else if (time2 == "夜" || time2 == "晚") {
                result.start.imply("hour", 22);
                result.start.imply("meridiem", 1);
            }
            else if (time2 == "凌") {
                result.start.imply("hour", 0);
            }
        }
        else if (match[DAY_GROUP_3]) {
            const day3 = match[DAY_GROUP_3];
            if (day3 == "明" || day3 == "聽") {
                if (refMoment.hour() > 1) {
                    startMoment = startMoment.add(1, "day");
                }
            }
            else if (day3 == "昨" || day3 == "尋" || day3 == "琴") {
                startMoment = startMoment.add(-1, "day");
            }
            else if (day3 == "前") {
                startMoment = startMoment.add(-2, "day");
            }
            else if (day3 == "大前") {
                startMoment = startMoment.add(-3, "day");
            }
            else if (day3 == "後") {
                startMoment = startMoment.add(2, "day");
            }
            else if (day3 == "大後") {
                startMoment = startMoment.add(3, "day");
            }
            const timeString3 = match[TIME_GROUP_3];
            if (timeString3) {
                const time3 = timeString3[0];
                if (time3 == "早" || time3 == "朝" || time3 == "上") {
                    result.start.imply("hour", 6);
                }
                else if (time3 == "下" || time3 == "晏") {
                    result.start.imply("hour", 15);
                    result.start.imply("meridiem", 1);
                }
                else if (time3 == "中") {
                    result.start.imply("hour", 12);
                    result.start.imply("meridiem", 1);
                }
                else if (time3 == "夜" || time3 == "晚") {
                    result.start.imply("hour", 22);
                    result.start.imply("meridiem", 1);
                }
                else if (time3 == "凌") {
                    result.start.imply("hour", 0);
                }
            }
        }
        result.start.assign("day", startMoment.date());
        result.start.assign("month", startMoment.month() + 1);
        result.start.assign("year", startMoment.year());
        return result;
    }
}
//# sourceMappingURL=ZHHantCasualDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantDateParser.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantDateParser.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHantDateParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/constants.js");



const YEAR_GROUP = 1;
const MONTH_GROUP = 2;
const DAY_GROUP = 3;
class ZHHantDateParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_1__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return new RegExp("(" +
            "\\d{2,4}|" +
            "[" + Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_2__.NUMBER).join("") + "]{4}|" +
            "[" + Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_2__.NUMBER).join("") + "]{2}" +
            ")?" +
            "(?:\\s*)" +
            "(?:年)?" +
            "(?:[\\s|,|，]*)" +
            "(" +
            "\\d{1,2}|" +
            "[" + Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_2__.NUMBER).join("") + "]{1,2}" +
            ")" +
            "(?:\\s*)" +
            "(?:月)" +
            "(?:\\s*)" +
            "(" +
            "\\d{1,2}|" +
            "[" + Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_2__.NUMBER).join("") + "]{1,2}" +
            ")?" +
            "(?:\\s*)" +
            "(?:日|號)?");
    }
    innerExtract(context, match) {
        const startMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const result = context.createParsingResult(match.index, match[0]);
        let month = parseInt(match[MONTH_GROUP]);
        if (isNaN(month))
            month = (0,_constants_js__WEBPACK_IMPORTED_MODULE_2__.zhStringToNumber)(match[MONTH_GROUP]);
        result.start.assign("month", month);
        if (match[DAY_GROUP]) {
            let day = parseInt(match[DAY_GROUP]);
            if (isNaN(day))
                day = (0,_constants_js__WEBPACK_IMPORTED_MODULE_2__.zhStringToNumber)(match[DAY_GROUP]);
            result.start.assign("day", day);
        }
        else {
            result.start.imply("day", startMoment.date());
        }
        if (match[YEAR_GROUP]) {
            let year = parseInt(match[YEAR_GROUP]);
            if (isNaN(year))
                year = (0,_constants_js__WEBPACK_IMPORTED_MODULE_2__.zhStringToYear)(match[YEAR_GROUP]);
            result.start.assign("year", year);
        }
        else {
            result.start.imply("year", startMoment.year());
        }
        return result;
    }
}
//# sourceMappingURL=ZHHantDateParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantDeadlineFormatParser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantDeadlineFormatParser.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHantDeadlineFormatParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/constants.js");



const PATTERN = new RegExp("(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+|半|幾)(?:\\s*)" +
    "(?:個)?" +
    "(秒(?:鐘)?|分鐘|小時|鐘|日|天|星期|禮拜|月|年)" +
    "(?:(?:之|過)?後|(?:之)?內)", "i");
const NUMBER_GROUP = 1;
const UNIT_GROUP = 2;
class ZHHantDeadlineFormatParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        let number = parseInt(match[NUMBER_GROUP]);
        if (isNaN(number)) {
            number = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[NUMBER_GROUP]);
        }
        if (isNaN(number)) {
            const string = match[NUMBER_GROUP];
            if (string === "幾") {
                number = 3;
            }
            else if (string === "半") {
                number = 0.5;
            }
            else {
                return null;
            }
        }
        let date = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const unit = match[UNIT_GROUP];
        const unitAbbr = unit[0];
        if (unitAbbr.match(/[日天星禮月年]/)) {
            if (unitAbbr == "日" || unitAbbr == "天") {
                date = date.add(number, "d");
            }
            else if (unitAbbr == "星" || unitAbbr == "禮") {
                date = date.add(number * 7, "d");
            }
            else if (unitAbbr == "月") {
                date = date.add(number, "month");
            }
            else if (unitAbbr == "年") {
                date = date.add(number, "year");
            }
            result.start.assign("year", date.year());
            result.start.assign("month", date.month() + 1);
            result.start.assign("day", date.date());
            return result;
        }
        if (unitAbbr == "秒") {
            date = date.add(number, "second");
        }
        else if (unitAbbr == "分") {
            date = date.add(number, "minute");
        }
        else if (unitAbbr == "小" || unitAbbr == "鐘") {
            date = date.add(number, "hour");
        }
        result.start.imply("year", date.year());
        result.start.imply("month", date.month() + 1);
        result.start.imply("day", date.date());
        result.start.assign("hour", date.hour());
        result.start.assign("minute", date.minute());
        result.start.assign("second", date.second());
        return result;
    }
}
//# sourceMappingURL=ZHHantDeadlineFormatParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantRelationWeekdayParser.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantRelationWeekdayParser.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHantRelationWeekdayParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/constants.js");



const PATTERN = new RegExp("(?<prefix>上|今|下|這|呢)(?:個)?(?:星期|禮拜|週)(?<weekday>" + Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_OFFSET).join("|") + ")");
class ZHHantRelationWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const dayOfWeek = match.groups.weekday;
        const offset = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_OFFSET[dayOfWeek];
        if (offset === undefined)
            return null;
        let modifier = null;
        const prefix = match.groups.prefix;
        if (prefix == "上") {
            modifier = "last";
        }
        else if (prefix == "下") {
            modifier = "next";
        }
        else if (prefix == "今" || prefix == "這" || prefix == "呢") {
            modifier = "this";
        }
        let startMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        let startMomentFixed = false;
        const refOffset = startMoment.day();
        if (modifier == "last" || modifier == "past") {
            startMoment = startMoment.day(offset - 7);
            startMomentFixed = true;
        }
        else if (modifier == "next") {
            startMoment = startMoment.day(offset + 7);
            startMomentFixed = true;
        }
        else if (modifier == "this") {
            startMoment = startMoment.day(offset);
        }
        else {
            if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
                startMoment = startMoment.day(offset - 7);
            }
            else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
                startMoment = startMoment.day(offset + 7);
            }
            else {
                startMoment = startMoment.day(offset);
            }
        }
        result.start.assign("weekday", offset);
        if (startMomentFixed) {
            result.start.assign("day", startMoment.date());
            result.start.assign("month", startMoment.month() + 1);
            result.start.assign("year", startMoment.year());
        }
        else {
            result.start.imply("day", startMoment.date());
            result.start.imply("month", startMoment.month() + 1);
            result.start.imply("year", startMoment.year());
        }
        return result;
    }
}
//# sourceMappingURL=ZHHantRelationWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantTimeExpressionParser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantTimeExpressionParser.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHantTimeExpressionParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/constants.js");



const FIRST_REG_PATTERN = new RegExp("(?:由|從|自)?" +
    "(?:" +
    "(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|" +
    "(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|" +
    "(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)" +
    "(?:[\\s,，]*)" +
    "(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?" +
    ")?" +
    "(?:[\\s,，]*)" +
    "(?:(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)(?:\\s*)(?:點|時|:|：)" +
    "(?:\\s*)" +
    "(\\d+|半|正|整|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)?(?:\\s*)(?:分|:|：)?" +
    "(?:\\s*)" +
    "(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)?(?:\\s*)(?:秒)?)" +
    "(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
const SECOND_REG_PATTERN = new RegExp("(?:^\\s*(?:到|至|\\-|\\–|\\~|\\〜)\\s*)" +
    "(?:" +
    "(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|" +
    "(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|" +
    "(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)" +
    "(?:[\\s,，]*)" +
    "(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?" +
    ")?" +
    "(?:[\\s,，]*)" +
    "(?:(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)(?:\\s*)(?:點|時|:|：)" +
    "(?:\\s*)" +
    "(\\d+|半|正|整|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)?(?:\\s*)(?:分|:|：)?" +
    "(?:\\s*)" +
    "(\\d+|[" +
    Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.NUMBER).join("") +
    "]+)?(?:\\s*)(?:秒)?)" +
    "(?:\\s*(A.M.|P.M.|AM?|PM?))?", "i");
const DAY_GROUP_1 = 1;
const ZH_AM_PM_HOUR_GROUP_1 = 2;
const ZH_AM_PM_HOUR_GROUP_2 = 3;
const DAY_GROUP_3 = 4;
const ZH_AM_PM_HOUR_GROUP_3 = 5;
const HOUR_GROUP = 6;
const MINUTE_GROUP = 7;
const SECOND_GROUP = 8;
const AM_PM_HOUR_GROUP = 9;
class ZHHantTimeExpressionParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return FIRST_REG_PATTERN;
    }
    innerExtract(context, match) {
        if (match.index > 0 && context.text[match.index - 1].match(/\w/)) {
            return null;
        }
        const refMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const result = context.createParsingResult(match.index, match[0]);
        let startMoment = refMoment.clone();
        if (match[DAY_GROUP_1]) {
            var day1 = match[DAY_GROUP_1];
            if (day1 == "明" || day1 == "聽") {
                if (refMoment.hour() > 1) {
                    startMoment = startMoment.add(1, "day");
                }
            }
            else if (day1 == "昨" || day1 == "尋" || day1 == "琴") {
                startMoment = startMoment.add(-1, "day");
            }
            else if (day1 == "前") {
                startMoment = startMoment.add(-2, "day");
            }
            else if (day1 == "大前") {
                startMoment = startMoment.add(-3, "day");
            }
            else if (day1 == "後") {
                startMoment = startMoment.add(2, "day");
            }
            else if (day1 == "大後") {
                startMoment = startMoment.add(3, "day");
            }
            result.start.assign("day", startMoment.date());
            result.start.assign("month", startMoment.month() + 1);
            result.start.assign("year", startMoment.year());
        }
        else if (match[DAY_GROUP_3]) {
            var day3 = match[DAY_GROUP_3];
            if (day3 == "明" || day3 == "聽") {
                startMoment = startMoment.add(1, "day");
            }
            else if (day3 == "昨" || day3 == "尋" || day3 == "琴") {
                startMoment = startMoment.add(-1, "day");
            }
            else if (day3 == "前") {
                startMoment = startMoment.add(-2, "day");
            }
            else if (day3 == "大前") {
                startMoment = startMoment.add(-3, "day");
            }
            else if (day3 == "後") {
                startMoment = startMoment.add(2, "day");
            }
            else if (day3 == "大後") {
                startMoment = startMoment.add(3, "day");
            }
            result.start.assign("day", startMoment.date());
            result.start.assign("month", startMoment.month() + 1);
            result.start.assign("year", startMoment.year());
        }
        else {
            result.start.imply("day", startMoment.date());
            result.start.imply("month", startMoment.month() + 1);
            result.start.imply("year", startMoment.year());
        }
        let hour = 0;
        let minute = 0;
        let meridiem = -1;
        if (match[SECOND_GROUP]) {
            var second = parseInt(match[SECOND_GROUP]);
            if (isNaN(second)) {
                second = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[SECOND_GROUP]);
            }
            if (second >= 60)
                return null;
            result.start.assign("second", second);
        }
        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
            hour = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP]) {
            if (match[MINUTE_GROUP] == "半") {
                minute = 30;
            }
            else if (match[MINUTE_GROUP] == "正" || match[MINUTE_GROUP] == "整") {
                minute = 0;
            }
            else {
                minute = parseInt(match[MINUTE_GROUP]);
                if (isNaN(minute)) {
                    minute = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[MINUTE_GROUP]);
                }
            }
        }
        else if (hour > 100) {
            minute = hour % 100;
            hour = Math.floor(hour / 100);
        }
        if (minute >= 60) {
            return null;
        }
        if (hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }
        if (match[AM_PM_HOUR_GROUP]) {
            if (hour > 12)
                return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            if (ampm == "p") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
            var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
            var zhAMPM1 = zhAMPMString1[0];
            if (zhAMPM1 == "朝" || zhAMPM1 == "早") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM1 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
            var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
            var zhAMPM2 = zhAMPMString2[0];
            if (zhAMPM2 == "上" || zhAMPM2 == "朝" || zhAMPM2 == "早" || zhAMPM2 == "凌") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM2 == "下" || zhAMPM2 == "晏" || zhAMPM2 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
            var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
            var zhAMPM3 = zhAMPMString3[0];
            if (zhAMPM3 == "上" || zhAMPM3 == "朝" || zhAMPM3 == "早" || zhAMPM3 == "凌") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM3 == "下" || zhAMPM3 == "晏" || zhAMPM3 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        result.start.assign("hour", hour);
        result.start.assign("minute", minute);
        if (meridiem >= 0) {
            result.start.assign("meridiem", meridiem);
        }
        else {
            if (hour < 12) {
                result.start.imply("meridiem", 0);
            }
            else {
                result.start.imply("meridiem", 1);
            }
        }
        match = SECOND_REG_PATTERN.exec(context.text.substring(result.index + result.text.length));
        if (!match) {
            if (result.text.match(/^\d+$/)) {
                return null;
            }
            return result;
        }
        let endMoment = startMoment.clone();
        result.end = context.createParsingComponents();
        if (match[DAY_GROUP_1]) {
            var day1 = match[DAY_GROUP_1];
            if (day1 == "明" || day1 == "聽") {
                if (refMoment.hour() > 1) {
                    endMoment = endMoment.add(1, "day");
                }
            }
            else if (day1 == "昨" || day1 == "尋" || day1 == "琴") {
                endMoment = endMoment.add(-1, "day");
            }
            else if (day1 == "前") {
                endMoment = endMoment.add(-2, "day");
            }
            else if (day1 == "大前") {
                endMoment = endMoment.add(-3, "day");
            }
            else if (day1 == "後") {
                endMoment = endMoment.add(2, "day");
            }
            else if (day1 == "大後") {
                endMoment = endMoment.add(3, "day");
            }
            result.end.assign("day", endMoment.date());
            result.end.assign("month", endMoment.month() + 1);
            result.end.assign("year", endMoment.year());
        }
        else if (match[DAY_GROUP_3]) {
            var day3 = match[DAY_GROUP_3];
            if (day3 == "明" || day3 == "聽") {
                endMoment = endMoment.add(1, "day");
            }
            else if (day3 == "昨" || day3 == "尋" || day3 == "琴") {
                endMoment = endMoment.add(-1, "day");
            }
            else if (day3 == "前") {
                endMoment = endMoment.add(-2, "day");
            }
            else if (day3 == "大前") {
                endMoment = endMoment.add(-3, "day");
            }
            else if (day3 == "後") {
                endMoment = endMoment.add(2, "day");
            }
            else if (day3 == "大後") {
                endMoment = endMoment.add(3, "day");
            }
            result.end.assign("day", endMoment.date());
            result.end.assign("month", endMoment.month() + 1);
            result.end.assign("year", endMoment.year());
        }
        else {
            result.end.imply("day", endMoment.date());
            result.end.imply("month", endMoment.month() + 1);
            result.end.imply("year", endMoment.year());
        }
        hour = 0;
        minute = 0;
        meridiem = -1;
        if (match[SECOND_GROUP]) {
            var second = parseInt(match[SECOND_GROUP]);
            if (isNaN(second)) {
                second = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[SECOND_GROUP]);
            }
            if (second >= 60)
                return null;
            result.end.assign("second", second);
        }
        hour = parseInt(match[HOUR_GROUP]);
        if (isNaN(hour)) {
            hour = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[HOUR_GROUP]);
        }
        if (match[MINUTE_GROUP]) {
            if (match[MINUTE_GROUP] == "半") {
                minute = 30;
            }
            else if (match[MINUTE_GROUP] == "正" || match[MINUTE_GROUP] == "整") {
                minute = 0;
            }
            else {
                minute = parseInt(match[MINUTE_GROUP]);
                if (isNaN(minute)) {
                    minute = (0,_constants_js__WEBPACK_IMPORTED_MODULE_1__.zhStringToNumber)(match[MINUTE_GROUP]);
                }
            }
        }
        else if (hour > 100) {
            minute = hour % 100;
            hour = Math.floor(hour / 100);
        }
        if (minute >= 60) {
            return null;
        }
        if (hour > 24) {
            return null;
        }
        if (hour >= 12) {
            meridiem = 1;
        }
        if (match[AM_PM_HOUR_GROUP]) {
            if (hour > 12)
                return null;
            var ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();
            if (ampm == "a") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            if (ampm == "p") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
            if (!result.start.isCertain("meridiem")) {
                if (meridiem == 0) {
                    result.start.imply("meridiem", 0);
                    if (result.start.get("hour") == 12) {
                        result.start.assign("hour", 0);
                    }
                }
                else {
                    result.start.imply("meridiem", 1);
                    if (result.start.get("hour") != 12) {
                        result.start.assign("hour", result.start.get("hour") + 12);
                    }
                }
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_1]) {
            var zhAMPMString1 = match[ZH_AM_PM_HOUR_GROUP_1];
            var zhAMPM1 = zhAMPMString1[0];
            if (zhAMPM1 == "朝" || zhAMPM1 == "早") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM1 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_2]) {
            var zhAMPMString2 = match[ZH_AM_PM_HOUR_GROUP_2];
            var zhAMPM2 = zhAMPMString2[0];
            if (zhAMPM2 == "上" || zhAMPM2 == "朝" || zhAMPM2 == "早" || zhAMPM2 == "凌") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM2 == "下" || zhAMPM2 == "晏" || zhAMPM2 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        else if (match[ZH_AM_PM_HOUR_GROUP_3]) {
            var zhAMPMString3 = match[ZH_AM_PM_HOUR_GROUP_3];
            var zhAMPM3 = zhAMPMString3[0];
            if (zhAMPM3 == "上" || zhAMPM3 == "朝" || zhAMPM3 == "早" || zhAMPM3 == "凌") {
                meridiem = 0;
                if (hour == 12)
                    hour = 0;
            }
            else if (zhAMPM3 == "下" || zhAMPM3 == "晏" || zhAMPM3 == "晚") {
                meridiem = 1;
                if (hour != 12)
                    hour += 12;
            }
        }
        result.text = result.text + match[0];
        result.end.assign("hour", hour);
        result.end.assign("minute", minute);
        if (meridiem >= 0) {
            result.end.assign("meridiem", meridiem);
        }
        else {
            const startAtPM = result.start.isCertain("meridiem") && result.start.get("meridiem") == 1;
            if (startAtPM && result.start.get("hour") > hour) {
                result.end.imply("meridiem", 0);
            }
            else if (hour > 12) {
                result.end.imply("meridiem", 1);
            }
        }
        if (result.end.date().getTime() < result.start.date().getTime()) {
            result.end.imply("day", result.end.get("day") + 1);
        }
        return result;
    }
}
//# sourceMappingURL=ZHHantTimeExpressionParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantWeekdayParser.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantWeekdayParser.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHantWeekdayParser)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../common/parsers/AbstractParserWithWordBoundary.js */ "./node_modules/chrono-node/dist/esm/common/parsers/AbstractParserWithWordBoundary.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/constants.js");



const PATTERN = new RegExp("(?:星期|禮拜|週)(?<weekday>" + Object.keys(_constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_OFFSET).join("|") + ")");
class ZHHantWeekdayParser extends _common_parsers_AbstractParserWithWordBoundary_js__WEBPACK_IMPORTED_MODULE_2__.AbstractParserWithWordBoundaryChecking {
    innerPattern() {
        return PATTERN;
    }
    innerExtract(context, match) {
        const result = context.createParsingResult(match.index, match[0]);
        const dayOfWeek = match.groups.weekday;
        const offset = _constants_js__WEBPACK_IMPORTED_MODULE_1__.WEEKDAY_OFFSET[dayOfWeek];
        if (offset === undefined)
            return null;
        let startMoment = dayjs__WEBPACK_IMPORTED_MODULE_0__(context.refDate);
        const startMomentFixed = false;
        const refOffset = startMoment.day();
        if (Math.abs(offset - 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment = startMoment.day(offset - 7);
        }
        else if (Math.abs(offset + 7 - refOffset) < Math.abs(offset - refOffset)) {
            startMoment = startMoment.day(offset + 7);
        }
        else {
            startMoment = startMoment.day(offset);
        }
        result.start.assign("weekday", offset);
        if (startMomentFixed) {
            result.start.assign("day", startMoment.date());
            result.start.assign("month", startMoment.month() + 1);
            result.start.assign("year", startMoment.year());
        }
        else {
            result.start.imply("day", startMoment.date());
            result.start.imply("month", startMoment.month() + 1);
            result.start.imply("year", startMoment.year());
        }
        return result;
    }
}
//# sourceMappingURL=ZHHantWeekdayParser.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/refiners/ZHHantMergeDateRangeRefiner.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/refiners/ZHHantMergeDateRangeRefiner.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHantMergeDateRangeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../common/refiners/AbstractMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateRangeRefiner.js");

class ZHHantMergeDateRangeRefiner extends _common_refiners_AbstractMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*(至|到|\-|\~|～|－|ー)\s*$/i;
    }
}
//# sourceMappingURL=ZHHantMergeDateRangeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/hant/refiners/ZHHantMergeDateTimeRefiner.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/hant/refiners/ZHHantMergeDateTimeRefiner.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ZHHantMergeDateTimeRefiner)
/* harmony export */ });
/* harmony import */ var _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../common/refiners/AbstractMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/AbstractMergeDateTimeRefiner.js");

class ZHHantMergeDateTimeRefiner extends _common_refiners_AbstractMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
    patternBetween() {
        return /^\s*$/i;
    }
}
//# sourceMappingURL=ZHHantMergeDateTimeRefiner.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/locales/zh/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/locales/zh/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Chrono: () => (/* reexport safe */ _chrono_js__WEBPACK_IMPORTED_MODULE_2__.Chrono),
/* harmony export */   Meridiem: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.Meridiem),
/* harmony export */   ParsingComponents: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingComponents),
/* harmony export */   ParsingResult: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_3__.ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* reexport safe */ _results_js__WEBPACK_IMPORTED_MODULE_3__.ReferenceWithTimezone),
/* harmony export */   Weekday: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.Weekday),
/* harmony export */   casual: () => (/* binding */ casual),
/* harmony export */   createCasualConfiguration: () => (/* binding */ createCasualConfiguration),
/* harmony export */   createConfiguration: () => (/* binding */ createConfiguration),
/* harmony export */   hans: () => (/* reexport module object */ _hans_index_js__WEBPACK_IMPORTED_MODULE_1__),
/* harmony export */   hant: () => (/* reexport module object */ _hant_index_js__WEBPACK_IMPORTED_MODULE_0__),
/* harmony export */   parse: () => (/* binding */ parse),
/* harmony export */   parseDate: () => (/* binding */ parseDate),
/* harmony export */   strict: () => (/* binding */ strict)
/* harmony export */ });
/* harmony import */ var _configurations_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../configurations.js */ "./node_modules/chrono-node/dist/esm/configurations.js");
/* harmony import */ var _chrono_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chrono.js */ "./node_modules/chrono-node/dist/esm/chrono.js");
/* harmony import */ var _results_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../results.js */ "./node_modules/chrono-node/dist/esm/results.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../types.js */ "./node_modules/chrono-node/dist/esm/types.js");
/* harmony import */ var _common_refiners_ExtractTimezoneOffsetRefiner_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../common/refiners/ExtractTimezoneOffsetRefiner.js */ "./node_modules/chrono-node/dist/esm/common/refiners/ExtractTimezoneOffsetRefiner.js");
/* harmony import */ var _hans_parsers_ZHHansDateParser_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./hans/parsers/ZHHansDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansDateParser.js");
/* harmony import */ var _hans_parsers_ZHHansDeadlineFormatParser_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./hans/parsers/ZHHansDeadlineFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansDeadlineFormatParser.js");
/* harmony import */ var _hans_parsers_ZHHansRelationWeekdayParser_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hans/parsers/ZHHansRelationWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansRelationWeekdayParser.js");
/* harmony import */ var _hans_parsers_ZHHansTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./hans/parsers/ZHHansTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansTimeExpressionParser.js");
/* harmony import */ var _hans_parsers_ZHHansWeekdayParser_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./hans/parsers/ZHHansWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/parsers/ZHHansWeekdayParser.js");
/* harmony import */ var _hant_parsers_ZHHantCasualDateParser_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./hant/parsers/ZHHantCasualDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantCasualDateParser.js");
/* harmony import */ var _hant_parsers_ZHHantDateParser_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hant/parsers/ZHHantDateParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantDateParser.js");
/* harmony import */ var _hant_parsers_ZHHantDeadlineFormatParser_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./hant/parsers/ZHHantDeadlineFormatParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantDeadlineFormatParser.js");
/* harmony import */ var _hant_parsers_ZHHantRelationWeekdayParser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hant/parsers/ZHHantRelationWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantRelationWeekdayParser.js");
/* harmony import */ var _hant_parsers_ZHHantTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./hant/parsers/ZHHantTimeExpressionParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantTimeExpressionParser.js");
/* harmony import */ var _hant_parsers_ZHHantWeekdayParser_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hant/parsers/ZHHantWeekdayParser.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/parsers/ZHHantWeekdayParser.js");
/* harmony import */ var _hant_refiners_ZHHantMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./hant/refiners/ZHHantMergeDateRangeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/refiners/ZHHantMergeDateRangeRefiner.js");
/* harmony import */ var _hant_refiners_ZHHantMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./hant/refiners/ZHHantMergeDateTimeRefiner.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/refiners/ZHHantMergeDateTimeRefiner.js");
/* harmony import */ var _hant_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hant/index.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hant/index.js");
/* harmony import */ var _hans_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hans/index.js */ "./node_modules/chrono-node/dist/esm/locales/zh/hans/index.js");






















const casual = new _chrono_js__WEBPACK_IMPORTED_MODULE_2__.Chrono(createCasualConfiguration());
const strict = new _chrono_js__WEBPACK_IMPORTED_MODULE_2__.Chrono(createConfiguration());
function parse(text, ref, option) {
    return casual.parse(text, ref, option);
}
function parseDate(text, ref, option) {
    return casual.parseDate(text, ref, option);
}
function createCasualConfiguration() {
    const option = createConfiguration();
    option.parsers.unshift(new _hant_parsers_ZHHantCasualDateParser_js__WEBPACK_IMPORTED_MODULE_5__["default"]());
    return option;
}
function createConfiguration() {
    const configuration = (0,_configurations_js__WEBPACK_IMPORTED_MODULE_6__.includeCommonConfiguration)({
        parsers: [
            new _hant_parsers_ZHHantDateParser_js__WEBPACK_IMPORTED_MODULE_7__["default"](),
            new _hans_parsers_ZHHansDateParser_js__WEBPACK_IMPORTED_MODULE_8__["default"](),
            new _hant_parsers_ZHHantRelationWeekdayParser_js__WEBPACK_IMPORTED_MODULE_9__["default"](),
            new _hans_parsers_ZHHansRelationWeekdayParser_js__WEBPACK_IMPORTED_MODULE_10__["default"](),
            new _hant_parsers_ZHHantWeekdayParser_js__WEBPACK_IMPORTED_MODULE_11__["default"](),
            new _hans_parsers_ZHHansWeekdayParser_js__WEBPACK_IMPORTED_MODULE_12__["default"](),
            new _hant_parsers_ZHHantTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_13__["default"](),
            new _hans_parsers_ZHHansTimeExpressionParser_js__WEBPACK_IMPORTED_MODULE_14__["default"](),
            new _hant_parsers_ZHHantDeadlineFormatParser_js__WEBPACK_IMPORTED_MODULE_15__["default"](),
            new _hans_parsers_ZHHansDeadlineFormatParser_js__WEBPACK_IMPORTED_MODULE_16__["default"](),
        ],
        refiners: [new _hant_refiners_ZHHantMergeDateRangeRefiner_js__WEBPACK_IMPORTED_MODULE_17__["default"](), new _hant_refiners_ZHHantMergeDateTimeRefiner_js__WEBPACK_IMPORTED_MODULE_18__["default"]()],
    });
    configuration.refiners = configuration.refiners.filter((refiner) => !(refiner instanceof _common_refiners_ExtractTimezoneOffsetRefiner_js__WEBPACK_IMPORTED_MODULE_19__["default"]));
    return configuration;
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/results.js":
/*!******************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/results.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ParsingComponents: () => (/* binding */ ParsingComponents),
/* harmony export */   ParsingResult: () => (/* binding */ ParsingResult),
/* harmony export */   ReferenceWithTimezone: () => (/* binding */ ReferenceWithTimezone)
/* harmony export */ });
/* harmony import */ var dayjs_plugin_quarterOfYear_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs/plugin/quarterOfYear.js */ "./node_modules/dayjs/plugin/quarterOfYear.js");
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/dayjs.js */ "./node_modules/chrono-node/dist/esm/utils/dayjs.js");
/* harmony import */ var _timezone_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./timezone.js */ "./node_modules/chrono-node/dist/esm/timezone.js");




dayjs__WEBPACK_IMPORTED_MODULE_1__.extend(dayjs_plugin_quarterOfYear_js__WEBPACK_IMPORTED_MODULE_0__);
class ReferenceWithTimezone {
    constructor(input) {
        input = input ?? new Date();
        if (input instanceof Date) {
            this.instant = input;
        }
        else {
            this.instant = input.instant ?? new Date();
            this.timezoneOffset = (0,_timezone_js__WEBPACK_IMPORTED_MODULE_2__.toTimezoneOffset)(input.timezone, this.instant);
        }
    }
    getDateWithAdjustedTimezone() {
        return new Date(this.instant.getTime() + this.getSystemTimezoneAdjustmentMinute(this.instant) * 60000);
    }
    getSystemTimezoneAdjustmentMinute(date, overrideTimezoneOffset) {
        if (!date || date.getTime() < 0) {
            date = new Date();
        }
        const currentTimezoneOffset = -date.getTimezoneOffset();
        const targetTimezoneOffset = overrideTimezoneOffset ?? this.timezoneOffset ?? currentTimezoneOffset;
        return currentTimezoneOffset - targetTimezoneOffset;
    }
}
class ParsingComponents {
    constructor(reference, knownComponents) {
        this._tags = new Set();
        this.reference = reference;
        this.knownValues = {};
        this.impliedValues = {};
        if (knownComponents) {
            for (const key in knownComponents) {
                this.knownValues[key] = knownComponents[key];
            }
        }
        const refDayJs = dayjs__WEBPACK_IMPORTED_MODULE_1__(reference.instant);
        this.imply("day", refDayJs.date());
        this.imply("month", refDayJs.month() + 1);
        this.imply("year", refDayJs.year());
        this.imply("hour", 12);
        this.imply("minute", 0);
        this.imply("second", 0);
        this.imply("millisecond", 0);
    }
    get(component) {
        if (component in this.knownValues) {
            return this.knownValues[component];
        }
        if (component in this.impliedValues) {
            return this.impliedValues[component];
        }
        return null;
    }
    isCertain(component) {
        return component in this.knownValues;
    }
    getCertainComponents() {
        return Object.keys(this.knownValues);
    }
    imply(component, value) {
        if (component in this.knownValues) {
            return this;
        }
        this.impliedValues[component] = value;
        return this;
    }
    assign(component, value) {
        this.knownValues[component] = value;
        delete this.impliedValues[component];
        return this;
    }
    delete(component) {
        delete this.knownValues[component];
        delete this.impliedValues[component];
    }
    clone() {
        const component = new ParsingComponents(this.reference);
        component.knownValues = {};
        component.impliedValues = {};
        for (const key in this.knownValues) {
            component.knownValues[key] = this.knownValues[key];
        }
        for (const key in this.impliedValues) {
            component.impliedValues[key] = this.impliedValues[key];
        }
        return component;
    }
    isOnlyDate() {
        return !this.isCertain("hour") && !this.isCertain("minute") && !this.isCertain("second");
    }
    isOnlyTime() {
        return (!this.isCertain("weekday") && !this.isCertain("day") && !this.isCertain("month") && !this.isCertain("year"));
    }
    isOnlyWeekdayComponent() {
        return this.isCertain("weekday") && !this.isCertain("day") && !this.isCertain("month");
    }
    isDateWithUnknownYear() {
        return this.isCertain("month") && !this.isCertain("year");
    }
    isValidDate() {
        const date = this.dateWithoutTimezoneAdjustment();
        if (date.getFullYear() !== this.get("year"))
            return false;
        if (date.getMonth() !== this.get("month") - 1)
            return false;
        if (date.getDate() !== this.get("day"))
            return false;
        if (this.get("hour") != null && date.getHours() != this.get("hour"))
            return false;
        if (this.get("minute") != null && date.getMinutes() != this.get("minute"))
            return false;
        return true;
    }
    toString() {
        return `[ParsingComponents {
            tags: ${JSON.stringify(Array.from(this._tags).sort())}, 
            knownValues: ${JSON.stringify(this.knownValues)}, 
            impliedValues: ${JSON.stringify(this.impliedValues)}}, 
            reference: ${JSON.stringify(this.reference)}]`;
    }
    dayjs() {
        return dayjs__WEBPACK_IMPORTED_MODULE_1__(this.date());
    }
    date() {
        const date = this.dateWithoutTimezoneAdjustment();
        const timezoneAdjustment = this.reference.getSystemTimezoneAdjustmentMinute(date, this.get("timezoneOffset"));
        return new Date(date.getTime() + timezoneAdjustment * 60000);
    }
    addTag(tag) {
        this._tags.add(tag);
        return this;
    }
    addTags(tags) {
        for (const tag of tags) {
            this._tags.add(tag);
        }
        return this;
    }
    tags() {
        return new Set(this._tags);
    }
    dateWithoutTimezoneAdjustment() {
        const date = new Date(this.get("year"), this.get("month") - 1, this.get("day"), this.get("hour"), this.get("minute"), this.get("second"), this.get("millisecond"));
        date.setFullYear(this.get("year"));
        return date;
    }
    static createRelativeFromReference(reference, fragments) {
        let date = dayjs__WEBPACK_IMPORTED_MODULE_1__(reference.instant);
        for (const key in fragments) {
            date = date.add(fragments[key], key);
        }
        const components = new ParsingComponents(reference);
        if (fragments["hour"] || fragments["minute"] || fragments["second"]) {
            (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarTime)(components, date);
            (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.assignSimilarDate)(components, date);
            if (reference.timezoneOffset !== null) {
                components.assign("timezoneOffset", -reference.instant.getTimezoneOffset());
            }
        }
        else {
            (0,_utils_dayjs_js__WEBPACK_IMPORTED_MODULE_3__.implySimilarTime)(components, date);
            if (reference.timezoneOffset !== null) {
                components.imply("timezoneOffset", -reference.instant.getTimezoneOffset());
            }
            if (fragments["d"]) {
                components.assign("day", date.date());
                components.assign("month", date.month() + 1);
                components.assign("year", date.year());
            }
            else if (fragments["week"]) {
                components.assign("day", date.date());
                components.assign("month", date.month() + 1);
                components.assign("year", date.year());
                components.imply("weekday", date.day());
            }
            else {
                components.imply("day", date.date());
                if (fragments["month"]) {
                    components.assign("month", date.month() + 1);
                    components.assign("year", date.year());
                }
                else {
                    components.imply("month", date.month() + 1);
                    if (fragments["year"]) {
                        components.assign("year", date.year());
                    }
                    else {
                        components.imply("year", date.year());
                    }
                }
            }
        }
        return components;
    }
}
class ParsingResult {
    constructor(reference, index, text, start, end) {
        this.reference = reference;
        this.refDate = reference.instant;
        this.index = index;
        this.text = text;
        this.start = start || new ParsingComponents(reference);
        this.end = end;
    }
    clone() {
        const result = new ParsingResult(this.reference, this.index, this.text);
        result.start = this.start ? this.start.clone() : null;
        result.end = this.end ? this.end.clone() : null;
        return result;
    }
    date() {
        return this.start.date();
    }
    tags() {
        const combinedTags = new Set(this.start.tags());
        if (this.end) {
            for (const tag of this.end.tags()) {
                combinedTags.add(tag);
            }
        }
        return combinedTags;
    }
    toString() {
        const tags = Array.from(this.tags()).sort();
        return `[ParsingResult {index: ${this.index}, text: '${this.text}', tags: ${JSON.stringify(tags)} ...}]`;
    }
}
//# sourceMappingURL=results.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/timezone.js":
/*!*******************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/timezone.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TIMEZONE_ABBR_MAP: () => (/* binding */ TIMEZONE_ABBR_MAP),
/* harmony export */   getLastWeekdayOfMonth: () => (/* binding */ getLastWeekdayOfMonth),
/* harmony export */   getNthWeekdayOfMonth: () => (/* binding */ getNthWeekdayOfMonth),
/* harmony export */   toTimezoneOffset: () => (/* binding */ toTimezoneOffset)
/* harmony export */ });
/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ "./node_modules/chrono-node/dist/esm/types.js");


const TIMEZONE_ABBR_MAP = {
    ACDT: 630,
    ACST: 570,
    ADT: -180,
    AEDT: 660,
    AEST: 600,
    AFT: 270,
    AKDT: -480,
    AKST: -540,
    ALMT: 360,
    AMST: -180,
    AMT: -240,
    ANAST: 720,
    ANAT: 720,
    AQTT: 300,
    ART: -180,
    AST: -240,
    AWDT: 540,
    AWST: 480,
    AZOST: 0,
    AZOT: -60,
    AZST: 300,
    AZT: 240,
    BNT: 480,
    BOT: -240,
    BRST: -120,
    BRT: -180,
    BST: 60,
    BTT: 360,
    CAST: 480,
    CAT: 120,
    CCT: 390,
    CDT: -300,
    CEST: 120,
    CET: {
        timezoneOffsetDuringDst: 2 * 60,
        timezoneOffsetNonDst: 60,
        dstStart: (year) => getLastWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.MARCH, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 2),
        dstEnd: (year) => getLastWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.OCTOBER, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 3),
    },
    CHADT: 825,
    CHAST: 765,
    CKT: -600,
    CLST: -180,
    CLT: -240,
    COT: -300,
    CST: -360,
    CT: {
        timezoneOffsetDuringDst: -5 * 60,
        timezoneOffsetNonDst: -6 * 60,
        dstStart: (year) => getNthWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.MARCH, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 2, 2),
        dstEnd: (year) => getNthWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.NOVEMBER, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 1, 2),
    },
    CVT: -60,
    CXT: 420,
    ChST: 600,
    DAVT: 420,
    EASST: -300,
    EAST: -360,
    EAT: 180,
    ECT: -300,
    EDT: -240,
    EEST: 180,
    EET: 120,
    EGST: 0,
    EGT: -60,
    EST: -300,
    ET: {
        timezoneOffsetDuringDst: -4 * 60,
        timezoneOffsetNonDst: -5 * 60,
        dstStart: (year) => getNthWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.MARCH, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 2, 2),
        dstEnd: (year) => getNthWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.NOVEMBER, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 1, 2),
    },
    FJST: 780,
    FJT: 720,
    FKST: -180,
    FKT: -240,
    FNT: -120,
    GALT: -360,
    GAMT: -540,
    GET: 240,
    GFT: -180,
    GILT: 720,
    GMT: 0,
    GST: 240,
    GYT: -240,
    HAA: -180,
    HAC: -300,
    HADT: -540,
    HAE: -240,
    HAP: -420,
    HAR: -360,
    HAST: -600,
    HAT: -90,
    HAY: -480,
    HKT: 480,
    HLV: -210,
    HNA: -240,
    HNC: -360,
    HNE: -300,
    HNP: -480,
    HNR: -420,
    HNT: -150,
    HNY: -540,
    HOVT: 420,
    ICT: 420,
    IDT: 180,
    IOT: 360,
    IRDT: 270,
    IRKST: 540,
    IRKT: 540,
    IRST: 210,
    IST: 330,
    JST: 540,
    KGT: 360,
    KRAST: 480,
    KRAT: 480,
    KST: 540,
    KUYT: 240,
    LHDT: 660,
    LHST: 630,
    LINT: 840,
    MAGST: 720,
    MAGT: 720,
    MART: -510,
    MAWT: 300,
    MDT: -360,
    MESZ: 120,
    MEZ: 60,
    MHT: 720,
    MMT: 390,
    MSD: 240,
    MSK: 180,
    MST: -420,
    MT: {
        timezoneOffsetDuringDst: -6 * 60,
        timezoneOffsetNonDst: -7 * 60,
        dstStart: (year) => getNthWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.MARCH, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 2, 2),
        dstEnd: (year) => getNthWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.NOVEMBER, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 1, 2),
    },
    MUT: 240,
    MVT: 300,
    MYT: 480,
    NCT: 660,
    NDT: -90,
    NFT: 690,
    NOVST: 420,
    NOVT: 360,
    NPT: 345,
    NST: -150,
    NUT: -660,
    NZDT: 780,
    NZST: 720,
    OMSST: 420,
    OMST: 420,
    PDT: -420,
    PET: -300,
    PETST: 720,
    PETT: 720,
    PGT: 600,
    PHOT: 780,
    PHT: 480,
    PKT: 300,
    PMDT: -120,
    PMST: -180,
    PONT: 660,
    PST: -480,
    PT: {
        timezoneOffsetDuringDst: -7 * 60,
        timezoneOffsetNonDst: -8 * 60,
        dstStart: (year) => getNthWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.MARCH, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 2, 2),
        dstEnd: (year) => getNthWeekdayOfMonth(year, _types_js__WEBPACK_IMPORTED_MODULE_1__.Month.NOVEMBER, _types_js__WEBPACK_IMPORTED_MODULE_1__.Weekday.SUNDAY, 1, 2),
    },
    PWT: 540,
    PYST: -180,
    PYT: -240,
    RET: 240,
    SAMT: 240,
    SAST: 120,
    SBT: 660,
    SCT: 240,
    SGT: 480,
    SRT: -180,
    SST: -660,
    TAHT: -600,
    TFT: 300,
    TJT: 300,
    TKT: 780,
    TLT: 540,
    TMT: 300,
    TVT: 720,
    ULAT: 480,
    UTC: 0,
    UYST: -120,
    UYT: -180,
    UZT: 300,
    VET: -210,
    VLAST: 660,
    VLAT: 660,
    VUT: 660,
    WAST: 120,
    WAT: 60,
    WEST: 60,
    WESZ: 60,
    WET: 0,
    WEZ: 0,
    WFT: 720,
    WGST: -120,
    WGT: -180,
    WIB: 420,
    WIT: 540,
    WITA: 480,
    WST: 780,
    WT: 0,
    YAKST: 600,
    YAKT: 600,
    YAPT: 600,
    YEKST: 360,
    YEKT: 360,
};
function getNthWeekdayOfMonth(year, month, weekday, n, hour = 0) {
    let dayOfMonth = 0;
    let i = 0;
    while (i < n) {
        dayOfMonth++;
        const date = new Date(year, month - 1, dayOfMonth);
        if (date.getDay() === weekday)
            i++;
    }
    return new Date(year, month - 1, dayOfMonth, hour);
}
function getLastWeekdayOfMonth(year, month, weekday, hour = 0) {
    const oneIndexedWeekday = weekday === 0 ? 7 : weekday;
    const date = new Date(year, month - 1 + 1, 1, 12);
    const firstWeekdayNextMonth = date.getDay() === 0 ? 7 : date.getDay();
    let dayDiff;
    if (firstWeekdayNextMonth === oneIndexedWeekday)
        dayDiff = 7;
    else if (firstWeekdayNextMonth < oneIndexedWeekday)
        dayDiff = 7 + firstWeekdayNextMonth - oneIndexedWeekday;
    else
        dayDiff = firstWeekdayNextMonth - oneIndexedWeekday;
    date.setDate(date.getDate() - dayDiff);
    return new Date(year, month - 1, date.getDate(), hour);
}
function toTimezoneOffset(timezoneInput, date, timezoneOverrides = {}) {
    if (timezoneInput == null) {
        return null;
    }
    if (typeof timezoneInput === "number") {
        return timezoneInput;
    }
    const matchedTimezone = timezoneOverrides[timezoneInput] ?? TIMEZONE_ABBR_MAP[timezoneInput];
    if (matchedTimezone == null) {
        return null;
    }
    if (typeof matchedTimezone == "number") {
        return matchedTimezone;
    }
    if (date == null) {
        return null;
    }
    if (dayjs__WEBPACK_IMPORTED_MODULE_0__(date).isAfter(matchedTimezone.dstStart(date.getFullYear())) &&
        !dayjs__WEBPACK_IMPORTED_MODULE_0__(date).isAfter(matchedTimezone.dstEnd(date.getFullYear()))) {
        return matchedTimezone.timezoneOffsetDuringDst;
    }
    return matchedTimezone.timezoneOffsetNonDst;
}
//# sourceMappingURL=timezone.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/types.js":
/*!****************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/types.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Meridiem: () => (/* binding */ Meridiem),
/* harmony export */   Month: () => (/* binding */ Month),
/* harmony export */   Weekday: () => (/* binding */ Weekday)
/* harmony export */ });
var Meridiem;
(function (Meridiem) {
    Meridiem[Meridiem["AM"] = 0] = "AM";
    Meridiem[Meridiem["PM"] = 1] = "PM";
})(Meridiem || (Meridiem = {}));
var Weekday;
(function (Weekday) {
    Weekday[Weekday["SUNDAY"] = 0] = "SUNDAY";
    Weekday[Weekday["MONDAY"] = 1] = "MONDAY";
    Weekday[Weekday["TUESDAY"] = 2] = "TUESDAY";
    Weekday[Weekday["WEDNESDAY"] = 3] = "WEDNESDAY";
    Weekday[Weekday["THURSDAY"] = 4] = "THURSDAY";
    Weekday[Weekday["FRIDAY"] = 5] = "FRIDAY";
    Weekday[Weekday["SATURDAY"] = 6] = "SATURDAY";
})(Weekday || (Weekday = {}));
var Month;
(function (Month) {
    Month[Month["JANUARY"] = 1] = "JANUARY";
    Month[Month["FEBRUARY"] = 2] = "FEBRUARY";
    Month[Month["MARCH"] = 3] = "MARCH";
    Month[Month["APRIL"] = 4] = "APRIL";
    Month[Month["MAY"] = 5] = "MAY";
    Month[Month["JUNE"] = 6] = "JUNE";
    Month[Month["JULY"] = 7] = "JULY";
    Month[Month["AUGUST"] = 8] = "AUGUST";
    Month[Month["SEPTEMBER"] = 9] = "SEPTEMBER";
    Month[Month["OCTOBER"] = 10] = "OCTOBER";
    Month[Month["NOVEMBER"] = 11] = "NOVEMBER";
    Month[Month["DECEMBER"] = 12] = "DECEMBER";
})(Month || (Month = {}));
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/utils/dayjs.js":
/*!**********************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/utils/dayjs.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   assignSimilarDate: () => (/* binding */ assignSimilarDate),
/* harmony export */   assignSimilarTime: () => (/* binding */ assignSimilarTime),
/* harmony export */   assignTheNextDay: () => (/* binding */ assignTheNextDay),
/* harmony export */   implySimilarDate: () => (/* binding */ implySimilarDate),
/* harmony export */   implySimilarTime: () => (/* binding */ implySimilarTime),
/* harmony export */   implyTheNextDay: () => (/* binding */ implyTheNextDay)
/* harmony export */ });
/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ "./node_modules/chrono-node/dist/esm/types.js");

function assignTheNextDay(component, targetDayJs) {
    targetDayJs = targetDayJs.add(1, "day");
    assignSimilarDate(component, targetDayJs);
    implySimilarTime(component, targetDayJs);
}
function implyTheNextDay(component, targetDayJs) {
    targetDayJs = targetDayJs.add(1, "day");
    implySimilarDate(component, targetDayJs);
    implySimilarTime(component, targetDayJs);
}
function assignSimilarDate(component, targetDayJs) {
    component.assign("day", targetDayJs.date());
    component.assign("month", targetDayJs.month() + 1);
    component.assign("year", targetDayJs.year());
}
function assignSimilarTime(component, targetDayJs) {
    component.assign("hour", targetDayJs.hour());
    component.assign("minute", targetDayJs.minute());
    component.assign("second", targetDayJs.second());
    component.assign("millisecond", targetDayJs.millisecond());
    if (component.get("hour") < 12) {
        component.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.AM);
    }
    else {
        component.assign("meridiem", _types_js__WEBPACK_IMPORTED_MODULE_0__.Meridiem.PM);
    }
}
function implySimilarDate(component, targetDayJs) {
    component.imply("day", targetDayJs.date());
    component.imply("month", targetDayJs.month() + 1);
    component.imply("year", targetDayJs.year());
}
function implySimilarTime(component, targetDayJs) {
    component.imply("hour", targetDayJs.hour());
    component.imply("minute", targetDayJs.minute());
    component.imply("second", targetDayJs.second());
    component.imply("millisecond", targetDayJs.millisecond());
}
//# sourceMappingURL=dayjs.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/utils/pattern.js":
/*!************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/utils/pattern.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   extractTerms: () => (/* binding */ extractTerms),
/* harmony export */   matchAnyPattern: () => (/* binding */ matchAnyPattern),
/* harmony export */   repeatedTimeunitPattern: () => (/* binding */ repeatedTimeunitPattern)
/* harmony export */ });
function repeatedTimeunitPattern(prefix, singleTimeunitPattern, connectorPattern = "\\s{0,5},?\\s{0,5}") {
    const singleTimeunitPatternNoCapture = singleTimeunitPattern.replace(/\((?!\?)/g, "(?:");
    return `${prefix}${singleTimeunitPatternNoCapture}(?:${connectorPattern}${singleTimeunitPatternNoCapture}){0,10}`;
}
function extractTerms(dictionary) {
    let keys;
    if (dictionary instanceof Array) {
        keys = [...dictionary];
    }
    else if (dictionary instanceof Map) {
        keys = Array.from(dictionary.keys());
    }
    else {
        keys = Object.keys(dictionary);
    }
    return keys;
}
function matchAnyPattern(dictionary) {
    const joinedTerms = extractTerms(dictionary)
        .sort((a, b) => b.length - a.length)
        .join("|")
        .replace(/\./g, "\\.");
    return `(?:${joinedTerms})`;
}
//# sourceMappingURL=pattern.js.map

/***/ }),

/***/ "./node_modules/chrono-node/dist/esm/utils/timeunits.js":
/*!**************************************************************!*\
  !*** ./node_modules/chrono-node/dist/esm/utils/timeunits.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addImpliedTimeUnits: () => (/* binding */ addImpliedTimeUnits),
/* harmony export */   reverseTimeUnits: () => (/* binding */ reverseTimeUnits)
/* harmony export */ });
function reverseTimeUnits(timeUnits) {
    const reversed = {};
    for (const key in timeUnits) {
        reversed[key] = -timeUnits[key];
    }
    return reversed;
}
function addImpliedTimeUnits(components, timeUnits) {
    const output = components.clone();
    let date = components.dayjs();
    for (const key in timeUnits) {
        date = date.add(timeUnits[key], key);
    }
    if ("day" in timeUnits || "d" in timeUnits || "week" in timeUnits || "month" in timeUnits || "year" in timeUnits) {
        output.imply("day", date.date());
        output.imply("month", date.month() + 1);
        output.imply("year", date.year());
    }
    if ("second" in timeUnits || "minute" in timeUnits || "hour" in timeUnits) {
        output.imply("second", date.second());
        output.imply("minute", date.minute());
        output.imply("hour", date.hour());
    }
    return output;
}
//# sourceMappingURL=timeunits.js.map

/***/ }),

/***/ "./node_modules/date-fns/_lib/defaultOptions.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/_lib/defaultOptions.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDefaultOptions: () => (/* binding */ getDefaultOptions),
/* harmony export */   setDefaultOptions: () => (/* binding */ setDefaultOptions)
/* harmony export */ });
let defaultOptions = {};

function getDefaultOptions() {
  return defaultOptions;
}

function setDefaultOptions(newOptions) {
  defaultOptions = newOptions;
}


/***/ }),

/***/ "./node_modules/date-fns/_lib/getRoundingMethod.js":
/*!*********************************************************!*\
  !*** ./node_modules/date-fns/_lib/getRoundingMethod.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getRoundingMethod: () => (/* binding */ getRoundingMethod)
/* harmony export */ });
function getRoundingMethod(method) {
  return (number) => {
    const round = method ? Math[method] : Math.trunc;
    const result = round(number);
    // Prevent negative zero
    return result === 0 ? 0 : result;
  };
}


/***/ }),

/***/ "./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js":
/*!***********************************************************************!*\
  !*** ./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getTimezoneOffsetInMilliseconds: () => (/* binding */ getTimezoneOffsetInMilliseconds)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds(date) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date);
  const utcDate = new Date(
    Date.UTC(
      _date.getFullYear(),
      _date.getMonth(),
      _date.getDate(),
      _date.getHours(),
      _date.getMinutes(),
      _date.getSeconds(),
      _date.getMilliseconds(),
    ),
  );
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}


/***/ }),

/***/ "./node_modules/date-fns/_lib/normalizeDates.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/_lib/normalizeDates.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   normalizeDates: () => (/* binding */ normalizeDates)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constructFrom.js */ "./node_modules/date-fns/constructFrom.js");


function normalizeDates(context, ...dates) {
  const normalize = _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom.bind(
    null,
    context || dates.find((date) => typeof date === "object"),
  );
  return dates.map(normalize);
}


/***/ }),

/***/ "./node_modules/date-fns/compareAsc.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/compareAsc.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   compareAsc: () => (/* binding */ compareAsc),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */
function compareAsc(dateLeft, dateRight) {
  const diff = +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateLeft) - +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(dateRight);

  if (diff < 0) return -1;
  else if (diff > 0) return 1;

  // Return 0 if diff is 0; return NaN if diff is NaN
  return diff;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (compareAsc);


/***/ }),

/***/ "./node_modules/date-fns/constants.js":
/*!********************************************!*\
  !*** ./node_modules/date-fns/constants.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   constructFromSymbol: () => (/* binding */ constructFromSymbol),
/* harmony export */   daysInWeek: () => (/* binding */ daysInWeek),
/* harmony export */   daysInYear: () => (/* binding */ daysInYear),
/* harmony export */   maxTime: () => (/* binding */ maxTime),
/* harmony export */   millisecondsInDay: () => (/* binding */ millisecondsInDay),
/* harmony export */   millisecondsInHour: () => (/* binding */ millisecondsInHour),
/* harmony export */   millisecondsInMinute: () => (/* binding */ millisecondsInMinute),
/* harmony export */   millisecondsInSecond: () => (/* binding */ millisecondsInSecond),
/* harmony export */   millisecondsInWeek: () => (/* binding */ millisecondsInWeek),
/* harmony export */   minTime: () => (/* binding */ minTime),
/* harmony export */   minutesInDay: () => (/* binding */ minutesInDay),
/* harmony export */   minutesInHour: () => (/* binding */ minutesInHour),
/* harmony export */   minutesInMonth: () => (/* binding */ minutesInMonth),
/* harmony export */   minutesInYear: () => (/* binding */ minutesInYear),
/* harmony export */   monthsInQuarter: () => (/* binding */ monthsInQuarter),
/* harmony export */   monthsInYear: () => (/* binding */ monthsInYear),
/* harmony export */   quartersInYear: () => (/* binding */ quartersInYear),
/* harmony export */   secondsInDay: () => (/* binding */ secondsInDay),
/* harmony export */   secondsInHour: () => (/* binding */ secondsInHour),
/* harmony export */   secondsInMinute: () => (/* binding */ secondsInMinute),
/* harmony export */   secondsInMonth: () => (/* binding */ secondsInMonth),
/* harmony export */   secondsInQuarter: () => (/* binding */ secondsInQuarter),
/* harmony export */   secondsInWeek: () => (/* binding */ secondsInWeek),
/* harmony export */   secondsInYear: () => (/* binding */ secondsInYear)
/* harmony export */ });
/**
 * @module constants
 * @summary Useful constants
 * @description
 * Collection of useful date constants.
 *
 * The constants could be imported from `date-fns/constants`:
 *
 * ```ts
 * import { maxTime, minTime } from "./constants/date-fns/constants";
 *
 * function isAllowedTime(time) {
 *   return time <= maxTime && time >= minTime;
 * }
 * ```
 */

/**
 * @constant
 * @name daysInWeek
 * @summary Days in 1 week.
 */
const daysInWeek = 7;

/**
 * @constant
 * @name daysInYear
 * @summary Days in 1 year.
 *
 * @description
 * How many days in a year.
 *
 * One years equals 365.2425 days according to the formula:
 *
 * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.
 * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days
 */
const daysInYear = 365.2425;

/**
 * @constant
 * @name maxTime
 * @summary Maximum allowed time.
 *
 * @example
 * import { maxTime } from "./constants/date-fns/constants";
 *
 * const isValid = 8640000000000001 <= maxTime;
 * //=> false
 *
 * new Date(8640000000000001);
 * //=> Invalid Date
 */
const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;

/**
 * @constant
 * @name minTime
 * @summary Minimum allowed time.
 *
 * @example
 * import { minTime } from "./constants/date-fns/constants";
 *
 * const isValid = -8640000000000001 >= minTime;
 * //=> false
 *
 * new Date(-8640000000000001)
 * //=> Invalid Date
 */
const minTime = -maxTime;

/**
 * @constant
 * @name millisecondsInWeek
 * @summary Milliseconds in 1 week.
 */
const millisecondsInWeek = 604800000;

/**
 * @constant
 * @name millisecondsInDay
 * @summary Milliseconds in 1 day.
 */
const millisecondsInDay = 86400000;

/**
 * @constant
 * @name millisecondsInMinute
 * @summary Milliseconds in 1 minute
 */
const millisecondsInMinute = 60000;

/**
 * @constant
 * @name millisecondsInHour
 * @summary Milliseconds in 1 hour
 */
const millisecondsInHour = 3600000;

/**
 * @constant
 * @name millisecondsInSecond
 * @summary Milliseconds in 1 second
 */
const millisecondsInSecond = 1000;

/**
 * @constant
 * @name minutesInYear
 * @summary Minutes in 1 year.
 */
const minutesInYear = 525600;

/**
 * @constant
 * @name minutesInMonth
 * @summary Minutes in 1 month.
 */
const minutesInMonth = 43200;

/**
 * @constant
 * @name minutesInDay
 * @summary Minutes in 1 day.
 */
const minutesInDay = 1440;

/**
 * @constant
 * @name minutesInHour
 * @summary Minutes in 1 hour.
 */
const minutesInHour = 60;

/**
 * @constant
 * @name monthsInQuarter
 * @summary Months in 1 quarter.
 */
const monthsInQuarter = 3;

/**
 * @constant
 * @name monthsInYear
 * @summary Months in 1 year.
 */
const monthsInYear = 12;

/**
 * @constant
 * @name quartersInYear
 * @summary Quarters in 1 year
 */
const quartersInYear = 4;

/**
 * @constant
 * @name secondsInHour
 * @summary Seconds in 1 hour.
 */
const secondsInHour = 3600;

/**
 * @constant
 * @name secondsInMinute
 * @summary Seconds in 1 minute.
 */
const secondsInMinute = 60;

/**
 * @constant
 * @name secondsInDay
 * @summary Seconds in 1 day.
 */
const secondsInDay = secondsInHour * 24;

/**
 * @constant
 * @name secondsInWeek
 * @summary Seconds in 1 week.
 */
const secondsInWeek = secondsInDay * 7;

/**
 * @constant
 * @name secondsInYear
 * @summary Seconds in 1 year.
 */
const secondsInYear = secondsInDay * daysInYear;

/**
 * @constant
 * @name secondsInMonth
 * @summary Seconds in 1 month
 */
const secondsInMonth = secondsInYear / 12;

/**
 * @constant
 * @name secondsInQuarter
 * @summary Seconds in 1 quarter.
 */
const secondsInQuarter = secondsInMonth * 3;

/**
 * @constant
 * @name constructFromSymbol
 * @summary Symbol enabling Date extensions to inherit properties from the reference date.
 *
 * The symbol is used to enable the `constructFrom` function to construct a date
 * using a reference date and a value. It allows to transfer extra properties
 * from the reference date to the new date. It's useful for extensions like
 * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as
 * a constructor argument.
 */
const constructFromSymbol = Symbol.for("constructDateFrom");


/***/ }),

/***/ "./node_modules/date-fns/constructFrom.js":
/*!************************************************!*\
  !*** ./node_modules/date-fns/constructFrom.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   constructFrom: () => (/* binding */ constructFrom),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/date-fns/constants.js");


/**
 * @name constructFrom
 * @category Generic Helpers
 * @summary Constructs a date using the reference date and the value
 *
 * @description
 * The function constructs a new date using the constructor from the reference
 * date and the given value. It helps to build generic functions that accept
 * date extensions.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * Starting from v3.7.0, it allows to construct a date using `[Symbol.for("constructDateFrom")]`
 * enabling to transfer extra properties from the reference date to the new date.
 * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)
 * that accept a time zone as a constructor argument.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The reference date to take constructor from
 * @param value - The value to create the date
 *
 * @returns Date initialized using the given date and value
 *
 * @example
 * import { constructFrom } from "./constructFrom/date-fns";
 *
 * // A function that clones a date preserving the original type
 * function cloneDate<DateType extends Date>(date: DateType): DateType {
 *   return constructFrom(
 *     date, // Use constructor from the given date
 *     date.getTime() // Use the date value to create a new date
 *   );
 * }
 */
function constructFrom(date, value) {
  if (typeof date === "function") return date(value);

  if (date && typeof date === "object" && _constants_js__WEBPACK_IMPORTED_MODULE_0__.constructFromSymbol in date)
    return date[_constants_js__WEBPACK_IMPORTED_MODULE_0__.constructFromSymbol](value);

  if (date instanceof Date) return new date.constructor(value);

  return new Date(value);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constructFrom);


/***/ }),

/***/ "./node_modules/date-fns/constructNow.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/constructNow.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   constructNow: () => (/* binding */ constructNow),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");


/**
 * @name constructNow
 * @category Generic Helpers
 * @summary Constructs a new current date using the passed value constructor.
 * @pure false
 *
 * @description
 * The function constructs a new current date using the constructor from
 * the reference date. It helps to build generic functions that accept date
 * extensions and use the current date.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * @param date - The reference date to take constructor from
 *
 * @returns Current date initialized using the given date constructor
 *
 * @example
 * import { constructNow, isSameDay } from 'date-fns'
 *
 * function isToday<DateType extends Date>(
 *   date: DateArg<DateType>,
 * ): boolean {
 *   // If we were to use `new Date()` directly, the function would  behave
 *   // differently in different timezones and return false for the same date.
 *   return isSameDay(date, constructNow(date));
 * }
 */
function constructNow(date) {
  return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(date, Date.now());
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constructNow);


/***/ }),

/***/ "./node_modules/date-fns/differenceInCalendarMonths.js":
/*!*************************************************************!*\
  !*** ./node_modules/date-fns/differenceInCalendarMonths.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInCalendarMonths: () => (/* binding */ differenceInCalendarMonths)
/* harmony export */ });
/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ "./node_modules/date-fns/_lib/normalizeDates.js");


/**
 * The {@link differenceInCalendarMonths} function options.
 */

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */
function differenceInCalendarMonths(laterDate, earlierDate, options) {
  const [laterDate_, earlierDate_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(
    options?.in,
    laterDate,
    earlierDate,
  );

  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();
  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();

  return yearsDiff * 12 + monthsDiff;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInCalendarMonths);


/***/ }),

/***/ "./node_modules/date-fns/differenceInMilliseconds.js":
/*!***********************************************************!*\
  !*** ./node_modules/date-fns/differenceInMilliseconds.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInMilliseconds: () => (/* binding */ differenceInMilliseconds)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 *
 * @returns The number of milliseconds
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */
function differenceInMilliseconds(laterDate, earlierDate) {
  return +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(laterDate) - +(0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(earlierDate);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInMilliseconds);


/***/ }),

/***/ "./node_modules/date-fns/differenceInMonths.js":
/*!*****************************************************!*\
  !*** ./node_modules/date-fns/differenceInMonths.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInMonths: () => (/* binding */ differenceInMonths)
/* harmony export */ });
/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ "./node_modules/date-fns/_lib/normalizeDates.js");
/* harmony import */ var _compareAsc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./compareAsc.js */ "./node_modules/date-fns/compareAsc.js");
/* harmony import */ var _differenceInCalendarMonths_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./differenceInCalendarMonths.js */ "./node_modules/date-fns/differenceInCalendarMonths.js");
/* harmony import */ var _isLastDayOfMonth_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./isLastDayOfMonth.js */ "./node_modules/date-fns/isLastDayOfMonth.js");





/**
 * The {@link differenceInMonths} function options.
 */

/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full months
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */
function differenceInMonths(laterDate, earlierDate, options) {
  const [laterDate_, workingLaterDate, earlierDate_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_0__.normalizeDates)(
    options?.in,
    laterDate,
    laterDate,
    earlierDate,
  );

  const sign = (0,_compareAsc_js__WEBPACK_IMPORTED_MODULE_1__.compareAsc)(workingLaterDate, earlierDate_);
  const difference = Math.abs(
    (0,_differenceInCalendarMonths_js__WEBPACK_IMPORTED_MODULE_2__.differenceInCalendarMonths)(workingLaterDate, earlierDate_),
  );

  if (difference < 1) return 0;

  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)
    workingLaterDate.setDate(30);

  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);

  let isLastMonthNotFull = (0,_compareAsc_js__WEBPACK_IMPORTED_MODULE_1__.compareAsc)(workingLaterDate, earlierDate_) === -sign;

  if (
    (0,_isLastDayOfMonth_js__WEBPACK_IMPORTED_MODULE_3__.isLastDayOfMonth)(laterDate_) &&
    difference === 1 &&
    (0,_compareAsc_js__WEBPACK_IMPORTED_MODULE_1__.compareAsc)(laterDate_, earlierDate_) === 1
  ) {
    isLastMonthNotFull = false;
  }

  const result = sign * (difference - +isLastMonthNotFull);
  return result === 0 ? 0 : result;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInMonths);


/***/ }),

/***/ "./node_modules/date-fns/differenceInSeconds.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/differenceInSeconds.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   differenceInSeconds: () => (/* binding */ differenceInSeconds)
/* harmony export */ });
/* harmony import */ var _lib_getRoundingMethod_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/getRoundingMethod.js */ "./node_modules/date-fns/_lib/getRoundingMethod.js");
/* harmony import */ var _differenceInMilliseconds_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./differenceInMilliseconds.js */ "./node_modules/date-fns/differenceInMilliseconds.js");



/**
 * The {@link differenceInSeconds} function options.
 */

/**
 * @name differenceInSeconds
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @param laterDate - The later date
 * @param earlierDate - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of seconds
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * const result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */
function differenceInSeconds(laterDate, earlierDate, options) {
  const diff = (0,_differenceInMilliseconds_js__WEBPACK_IMPORTED_MODULE_0__.differenceInMilliseconds)(laterDate, earlierDate) / 1000;
  return (0,_lib_getRoundingMethod_js__WEBPACK_IMPORTED_MODULE_1__.getRoundingMethod)(options?.roundingMethod)(diff);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (differenceInSeconds);


/***/ }),

/***/ "./node_modules/date-fns/endOfDay.js":
/*!*******************************************!*\
  !*** ./node_modules/date-fns/endOfDay.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfDay: () => (/* binding */ endOfDay)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * The {@link endOfDay} function options.
 */

/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a day
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */
function endOfDay(date, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfDay);


/***/ }),

/***/ "./node_modules/date-fns/endOfMonth.js":
/*!*********************************************!*\
  !*** ./node_modules/date-fns/endOfMonth.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   endOfMonth: () => (/* binding */ endOfMonth)
/* harmony export */ });
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");


/**
 * The {@link endOfMonth} function options.
 */

/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */
function endOfMonth(date, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (endOfMonth);


/***/ }),

/***/ "./node_modules/date-fns/formatDistance.js":
/*!*************************************************!*\
  !*** ./node_modules/date-fns/formatDistance.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   formatDistance: () => (/* binding */ formatDistance)
/* harmony export */ });
/* harmony import */ var _lib_defaultLocale_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_lib/defaultLocale.js */ "./node_modules/date-fns/locale/en-US.js");
/* harmony import */ var _lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_lib/defaultOptions.js */ "./node_modules/date-fns/_lib/defaultOptions.js");
/* harmony import */ var _lib_getTimezoneOffsetInMilliseconds_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./_lib/getTimezoneOffsetInMilliseconds.js */ "./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js");
/* harmony import */ var _lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_lib/normalizeDates.js */ "./node_modules/date-fns/_lib/normalizeDates.js");
/* harmony import */ var _compareAsc_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./compareAsc.js */ "./node_modules/date-fns/compareAsc.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants.js */ "./node_modules/date-fns/constants.js");
/* harmony import */ var _differenceInMonths_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./differenceInMonths.js */ "./node_modules/date-fns/differenceInMonths.js");
/* harmony import */ var _differenceInSeconds_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./differenceInSeconds.js */ "./node_modules/date-fns/differenceInSeconds.js");









/**
 * The {@link formatDistance} function options.
 */

/**
 * @name formatDistance
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * @param laterDate - The date
 * @param earlierDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * const result = formatDistance(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   { includeSeconds: true }
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> 'pli ol 1 jaro'
 */
function formatDistance(laterDate, earlierDate, options) {
  const defaultOptions = (0,_lib_defaultOptions_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultOptions)();
  const locale = options?.locale ?? defaultOptions.locale ?? _lib_defaultLocale_js__WEBPACK_IMPORTED_MODULE_1__.enUS;
  const minutesInAlmostTwoDays = 2520;

  const comparison = (0,_compareAsc_js__WEBPACK_IMPORTED_MODULE_2__.compareAsc)(laterDate, earlierDate);

  if (isNaN(comparison)) throw new RangeError("Invalid time value");

  const localizeOptions = Object.assign({}, options, {
    addSuffix: options?.addSuffix,
    comparison: comparison,
  });

  const [laterDate_, earlierDate_] = (0,_lib_normalizeDates_js__WEBPACK_IMPORTED_MODULE_3__.normalizeDates)(
    options?.in,
    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),
  );

  const seconds = (0,_differenceInSeconds_js__WEBPACK_IMPORTED_MODULE_4__.differenceInSeconds)(earlierDate_, laterDate_);
  const offsetInSeconds =
    ((0,_lib_getTimezoneOffsetInMilliseconds_js__WEBPACK_IMPORTED_MODULE_5__.getTimezoneOffsetInMilliseconds)(earlierDate_) -
      (0,_lib_getTimezoneOffsetInMilliseconds_js__WEBPACK_IMPORTED_MODULE_5__.getTimezoneOffsetInMilliseconds)(laterDate_)) /
    1000;
  const minutes = Math.round((seconds - offsetInSeconds) / 60);
  let months;

  // 0 up to 2 mins
  if (minutes < 2) {
    if (options?.includeSeconds) {
      if (seconds < 5) {
        return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
      } else if (seconds < 10) {
        return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
      } else if (seconds < 20) {
        return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
      } else if (seconds < 40) {
        return locale.formatDistance("halfAMinute", 0, localizeOptions);
      } else if (seconds < 60) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
      } else {
        return locale.formatDistance("xMinutes", minutes, localizeOptions);
      }
    }

    // 2 mins up to 0.75 hrs
  } else if (minutes < 45) {
    return locale.formatDistance("xMinutes", minutes, localizeOptions);

    // 0.75 hrs up to 1.5 hrs
  } else if (minutes < 90) {
    return locale.formatDistance("aboutXHours", 1, localizeOptions);

    // 1.5 hrs up to 24 hrs
  } else if (minutes < _constants_js__WEBPACK_IMPORTED_MODULE_6__.minutesInDay) {
    const hours = Math.round(minutes / 60);
    return locale.formatDistance("aboutXHours", hours, localizeOptions);

    // 1 day up to 1.75 days
  } else if (minutes < minutesInAlmostTwoDays) {
    return locale.formatDistance("xDays", 1, localizeOptions);

    // 1.75 days up to 30 days
  } else if (minutes < _constants_js__WEBPACK_IMPORTED_MODULE_6__.minutesInMonth) {
    const days = Math.round(minutes / _constants_js__WEBPACK_IMPORTED_MODULE_6__.minutesInDay);
    return locale.formatDistance("xDays", days, localizeOptions);

    // 1 month up to 2 months
  } else if (minutes < _constants_js__WEBPACK_IMPORTED_MODULE_6__.minutesInMonth * 2) {
    months = Math.round(minutes / _constants_js__WEBPACK_IMPORTED_MODULE_6__.minutesInMonth);
    return locale.formatDistance("aboutXMonths", months, localizeOptions);
  }

  months = (0,_differenceInMonths_js__WEBPACK_IMPORTED_MODULE_7__.differenceInMonths)(earlierDate_, laterDate_);

  // 2 months up to 12 months
  if (months < 12) {
    const nearestMonth = Math.round(minutes / _constants_js__WEBPACK_IMPORTED_MODULE_6__.minutesInMonth);
    return locale.formatDistance("xMonths", nearestMonth, localizeOptions);

    // 1 year up to max Date
  } else {
    const monthsSinceStartOfYear = months % 12;
    const years = Math.trunc(months / 12);

    // N years up to 1 years 3 months
    if (monthsSinceStartOfYear < 3) {
      return locale.formatDistance("aboutXYears", years, localizeOptions);

      // N years 3 months up to N years 9 months
    } else if (monthsSinceStartOfYear < 9) {
      return locale.formatDistance("overXYears", years, localizeOptions);

      // N years 9 months up to N year 12 months
    } else {
      return locale.formatDistance("almostXYears", years + 1, localizeOptions);
    }
  }
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formatDistance);


/***/ }),

/***/ "./node_modules/date-fns/formatDistanceToNow.js":
/*!******************************************************!*\
  !*** ./node_modules/date-fns/formatDistanceToNow.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   formatDistanceToNow: () => (/* binding */ formatDistanceToNow)
/* harmony export */ });
/* harmony import */ var _constructNow_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constructNow.js */ "./node_modules/date-fns/constructNow.js");
/* harmony import */ var _formatDistance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./formatDistance.js */ "./node_modules/date-fns/formatDistance.js");




/**
 * The {@link formatDistanceToNow} function options.
 */

/**
 * @name formatDistanceToNow
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given date and now in words.
 *
 * | Distance to now                                                   | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance to now     | Result               |
 * |---------------------|----------------------|
 * | 0 secs ... 5 secs   | less than 5 seconds  |
 * | 5 secs ... 10 secs  | less than 10 seconds |
 * | 10 secs ... 20 secs | less than 20 seconds |
 * | 20 secs ... 40 secs | half a minute        |
 * | 40 secs ... 60 secs | less than a minute   |
 * | 60 secs ... 90 secs | 1 minute             |
 *
 * @param date - The given date
 * @param options - The object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNow(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNow(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNow(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in about 1 year'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 August 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNow(
 *   new Date(2016, 7, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */
function formatDistanceToNow(date, options) {
  return (0,_formatDistance_js__WEBPACK_IMPORTED_MODULE_0__.formatDistance)(date, (0,_constructNow_js__WEBPACK_IMPORTED_MODULE_1__.constructNow)(date), options);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formatDistanceToNow);


/***/ }),

/***/ "./node_modules/date-fns/isLastDayOfMonth.js":
/*!***************************************************!*\
  !*** ./node_modules/date-fns/isLastDayOfMonth.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   isLastDayOfMonth: () => (/* binding */ isLastDayOfMonth)
/* harmony export */ });
/* harmony import */ var _endOfDay_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./endOfDay.js */ "./node_modules/date-fns/endOfDay.js");
/* harmony import */ var _endOfMonth_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./endOfMonth.js */ "./node_modules/date-fns/endOfMonth.js");
/* harmony import */ var _toDate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toDate.js */ "./node_modules/date-fns/toDate.js");




/**
 * @name isLastDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @param date - The date to check
 * @param options - An object with options
 *
 * @returns The date is the last day of a month
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * const result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */
function isLastDayOfMonth(date, options) {
  const _date = (0,_toDate_js__WEBPACK_IMPORTED_MODULE_0__.toDate)(date, options?.in);
  return +(0,_endOfDay_js__WEBPACK_IMPORTED_MODULE_1__.endOfDay)(_date, options) === +(0,_endOfMonth_js__WEBPACK_IMPORTED_MODULE_2__.endOfMonth)(_date, options);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isLastDayOfMonth);


/***/ }),

/***/ "./node_modules/date-fns/locale/_lib/buildFormatLongFn.js":
/*!****************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildFormatLongFn.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildFormatLongFn: () => (/* binding */ buildFormatLongFn)
/* harmony export */ });
function buildFormatLongFn(args) {
  return (options = {}) => {
    // TODO: Remove String()
    const width = options.width ? String(options.width) : args.defaultWidth;
    const format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}


/***/ }),

/***/ "./node_modules/date-fns/locale/_lib/buildLocalizeFn.js":
/*!**************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildLocalizeFn.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildLocalizeFn: () => (/* binding */ buildLocalizeFn)
/* harmony export */ });
/**
 * The localize function argument callback which allows to convert raw value to
 * the actual type.
 *
 * @param value - The value to convert
 *
 * @returns The converted value
 */

/**
 * The map of localized values for each width.
 */

/**
 * The index type of the locale unit value. It types conversion of units of
 * values that don't start at 0 (i.e. quarters).
 */

/**
 * Converts the unit value to the tuple of values.
 */

/**
 * The tuple of localized era values. The first element represents BC,
 * the second element represents AD.
 */

/**
 * The tuple of localized quarter values. The first element represents Q1.
 */

/**
 * The tuple of localized day values. The first element represents Sunday.
 */

/**
 * The tuple of localized month values. The first element represents January.
 */

function buildLocalizeFn(args) {
  return (value, options) => {
    const context = options?.context ? String(options.context) : "standalone";

    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width = options?.width ? String(options.width) : defaultWidth;

      valuesArray =
        args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width = options?.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[width] || args.values[defaultWidth];
    }
    const index = args.argumentCallback ? args.argumentCallback(value) : value;

    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
    return valuesArray[index];
  };
}


/***/ }),

/***/ "./node_modules/date-fns/locale/_lib/buildMatchFn.js":
/*!***********************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildMatchFn.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildMatchFn: () => (/* binding */ buildMatchFn)
/* harmony export */ });
function buildMatchFn(args) {
  return (string, options = {}) => {
    const width = options.width;

    const matchPattern =
      (width && args.matchPatterns[width]) ||
      args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];

    const parsePatterns =
      (width && args.parsePatterns[width]) ||
      args.parsePatterns[args.defaultParseWidth];

    const key = Array.isArray(parsePatterns)
      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))
      : // [TODO] -- I challenge you to fix the type
        findKey(parsePatterns, (pattern) => pattern.test(matchedString));

    let value;

    value = args.valueCallback ? args.valueCallback(key) : key;
    value = options.valueCallback
      ? // [TODO] -- I challenge you to fix the type
        options.valueCallback(value)
      : value;

    const rest = string.slice(matchedString.length);

    return { value, rest };
  };
}

function findKey(object, predicate) {
  for (const key in object) {
    if (
      Object.prototype.hasOwnProperty.call(object, key) &&
      predicate(object[key])
    ) {
      return key;
    }
  }
  return undefined;
}

function findIndex(array, predicate) {
  for (let key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
  return undefined;
}


/***/ }),

/***/ "./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js":
/*!******************************************************************!*\
  !*** ./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildMatchPatternFn: () => (/* binding */ buildMatchPatternFn)
/* harmony export */ });
function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    const matchedString = matchResult[0];

    const parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    let value = args.valueCallback
      ? args.valueCallback(parseResult[0])
      : parseResult[0];

    // [TODO] I challenge you to fix the type
    value = options.valueCallback ? options.valueCallback(value) : value;

    const rest = string.slice(matchedString.length);

    return { value, rest };
  };
}


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US.js":
/*!***********************************************!*\
  !*** ./node_modules/date-fns/locale/en-US.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   enUS: () => (/* binding */ enUS)
/* harmony export */ });
/* harmony import */ var _en_US_lib_formatDistance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./en-US/_lib/formatDistance.js */ "./node_modules/date-fns/locale/en-US/_lib/formatDistance.js");
/* harmony import */ var _en_US_lib_formatLong_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./en-US/_lib/formatLong.js */ "./node_modules/date-fns/locale/en-US/_lib/formatLong.js");
/* harmony import */ var _en_US_lib_formatRelative_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./en-US/_lib/formatRelative.js */ "./node_modules/date-fns/locale/en-US/_lib/formatRelative.js");
/* harmony import */ var _en_US_lib_localize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./en-US/_lib/localize.js */ "./node_modules/date-fns/locale/en-US/_lib/localize.js");
/* harmony import */ var _en_US_lib_match_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./en-US/_lib/match.js */ "./node_modules/date-fns/locale/en-US/_lib/match.js");






/**
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)
 * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)
 */
const enUS = {
  code: "en-US",
  formatDistance: _en_US_lib_formatDistance_js__WEBPACK_IMPORTED_MODULE_0__.formatDistance,
  formatLong: _en_US_lib_formatLong_js__WEBPACK_IMPORTED_MODULE_1__.formatLong,
  formatRelative: _en_US_lib_formatRelative_js__WEBPACK_IMPORTED_MODULE_2__.formatRelative,
  localize: _en_US_lib_localize_js__WEBPACK_IMPORTED_MODULE_3__.localize,
  match: _en_US_lib_match_js__WEBPACK_IMPORTED_MODULE_4__.match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1,
  },
};

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (enUS);


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/formatDistance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatDistance.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatDistance: () => (/* binding */ formatDistance)
/* harmony export */ });
const formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds",
  },

  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds",
  },

  halfAMinute: "half a minute",

  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes",
  },

  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes",
  },

  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours",
  },

  xHours: {
    one: "1 hour",
    other: "{{count}} hours",
  },

  xDays: {
    one: "1 day",
    other: "{{count}} days",
  },

  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks",
  },

  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks",
  },

  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months",
  },

  xMonths: {
    one: "1 month",
    other: "{{count}} months",
  },

  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years",
  },

  xYears: {
    one: "1 year",
    other: "{{count}} years",
  },

  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years",
  },

  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years",
  },
};

const formatDistance = (token, count, options) => {
  let result;

  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }

  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }

  return result;
};


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/formatLong.js":
/*!***************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatLong.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatLong: () => (/* binding */ formatLong)
/* harmony export */ });
/* harmony import */ var _lib_buildFormatLongFn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildFormatLongFn.js */ "./node_modules/date-fns/locale/_lib/buildFormatLongFn.js");


const dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy",
};

const timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a",
};

const dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}",
};

const formatLong = {
  date: (0,_lib_buildFormatLongFn_js__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({
    formats: dateFormats,
    defaultWidth: "full",
  }),

  time: (0,_lib_buildFormatLongFn_js__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({
    formats: timeFormats,
    defaultWidth: "full",
  }),

  dateTime: (0,_lib_buildFormatLongFn_js__WEBPACK_IMPORTED_MODULE_0__.buildFormatLongFn)({
    formats: dateTimeFormats,
    defaultWidth: "full",
  }),
};


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/formatRelative.js":
/*!*******************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/formatRelative.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatRelative: () => (/* binding */ formatRelative)
/* harmony export */ });
const formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P",
};

const formatRelative = (token, _date, _baseDate, _options) =>
  formatRelativeLocale[token];


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/localize.js":
/*!*************************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/localize.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   localize: () => (/* binding */ localize)
/* harmony export */ });
/* harmony import */ var _lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildLocalizeFn.js */ "./node_modules/date-fns/locale/_lib/buildLocalizeFn.js");


const eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"],
};

const quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"],
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ],

  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
};

const dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
  ],
};

const dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night",
  },
};

const formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night",
  },
};

const ordinalNumber = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`.
  //
  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'.

  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};

const localize = {
  ordinalNumber,

  era: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: eraValues,
    defaultWidth: "wide",
  }),

  quarter: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1,
  }),

  month: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: monthValues,
    defaultWidth: "wide",
  }),

  day: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: dayValues,
    defaultWidth: "wide",
  }),

  dayPeriod: (0,_lib_buildLocalizeFn_js__WEBPACK_IMPORTED_MODULE_0__.buildLocalizeFn)({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide",
  }),
};


/***/ }),

/***/ "./node_modules/date-fns/locale/en-US/_lib/match.js":
/*!**********************************************************!*\
  !*** ./node_modules/date-fns/locale/en-US/_lib/match.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   match: () => (/* binding */ match)
/* harmony export */ });
/* harmony import */ var _lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../_lib/buildMatchFn.js */ "./node_modules/date-fns/locale/_lib/buildMatchFn.js");
/* harmony import */ var _lib_buildMatchPatternFn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_lib/buildMatchPatternFn.js */ "./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js");



const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;

const matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i,
};
const parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i],
};

const matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i,
};
const parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i],
};

const matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,
};
const parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],

  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i,
  ],
};

const matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,
};
const parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],
};

const matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,
};
const parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i,
  },
};

const match = {
  ordinalNumber: (0,_lib_buildMatchPatternFn_js__WEBPACK_IMPORTED_MODULE_0__.buildMatchPatternFn)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10),
  }),

  era: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any",
  }),

  quarter: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index) => index + 1,
  }),

  month: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any",
  }),

  day: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any",
  }),

  dayPeriod: (0,_lib_buildMatchFn_js__WEBPACK_IMPORTED_MODULE_1__.buildMatchFn)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any",
  }),
};


/***/ }),

/***/ "./node_modules/date-fns/toDate.js":
/*!*****************************************!*\
  !*** ./node_modules/date-fns/toDate.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   toDate: () => (/* binding */ toDate)
/* harmony export */ });
/* harmony import */ var _constructFrom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constructFrom.js */ "./node_modules/date-fns/constructFrom.js");


/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * Starting from v3.7.0, it clones a date using `[Symbol.for("constructDateFrom")]`
 * enabling to transfer extra properties from the reference date to the new date.
 * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)
 * that accept a time zone as a constructor argument.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.
 *
 * @param argument - The value to convert
 *
 * @returns The parsed date in the local time zone
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */
function toDate(argument, context) {
  // [TODO] Get rid of `toDate` or `constructFrom`?
  return (0,_constructFrom_js__WEBPACK_IMPORTED_MODULE_0__.constructFrom)(context || argument, argument);
}

// Fallback for modularized imports:
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toDate);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.scss */ "./src/main.scss");
/* harmony import */ var _utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/domHelpers */ "./src/utils/domHelpers.js");
/* harmony import */ var _utils_enhanceUi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/enhanceUi */ "./src/utils/enhanceUi.js");
/* harmony import */ var _features_shortcuts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./features/shortcuts */ "./src/features/shortcuts/index.js");
/* harmony import */ var _features_folders__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./features/folders */ "./src/features/folders/index.js");
/* harmony import */ var _features_snoozed__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./features/snoozed */ "./src/features/snoozed/index.js");
/* harmony import */ var _features_scheduled__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./features/scheduled */ "./src/features/scheduled/index.js");
/* harmony import */ var _observers_chatOnHoverObserver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./observers/chatOnHoverObserver */ "./src/observers/chatOnHoverObserver.js");
/* harmony import */ var _whatsappStore_archiveChat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./whatsappStore/archiveChat */ "./src/whatsappStore/archiveChat.js");
/* harmony import */ var _whatsappStore_unarchiveChat__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./whatsappStore/unarchiveChat */ "./src/whatsappStore/unarchiveChat.js");
/* harmony import */ var _whatsappStore_markChatDone__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./whatsappStore/markChatDone */ "./src/whatsappStore/markChatDone.js");
/* harmony import */ var _whatsappStore_openDrawerLeft__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./whatsappStore/openDrawerLeft */ "./src/whatsappStore/openDrawerLeft.js");
/* harmony import */ var _whatsappStore_getChatDetails__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./whatsappStore/getChatDetails */ "./src/whatsappStore/getChatDetails.js");
/* harmony import */ var _whatsappStore_openContextMenu__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./whatsappStore/openContextMenu */ "./src/whatsappStore/openContextMenu.js");
/* harmony import */ var _whatsappStore_getChatFiberFromDOM__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./whatsappStore/getChatFiberFromDOM */ "./src/whatsappStore/getChatFiberFromDOM.js");
/* harmony import */ var _features_done__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./features/done */ "./src/features/done/index.js");
/* harmony import */ var _whatsappStore_customToasts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./whatsappStore/customToasts */ "./src/whatsappStore/customToasts.js");
/* harmony import */ var _whatsappStore_chatEventEmitter__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./whatsappStore/chatEventEmitter */ "./src/whatsappStore/chatEventEmitter.js");



















// Inject font styles into the page
const link1 = document.createElement("link");
link1.rel = "stylesheet";
link1.href =
  "https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200";

document.head.appendChild(link1);

Element.prototype.insertChildAtIndex = function (child, index) {
  if (!index) index = 0;
  if (index >= this.children.length) {
    this.appendChild(child);
  } else {
    this.insertBefore(child, this.children[index]);
  }
};

function initializeWhatsApp() {
  // Dispatch a custom event to signal that WhatsApp is initialized
  const event = new CustomEvent("whatsappInitialized", {
    detail: { message: "WhatsApp is now initialized" },
  });
  document.dispatchEvent(event);
}

(0,_features_shortcuts__WEBPACK_IMPORTED_MODULE_3__.initializeShortcuts)();
(0,_features_folders__WEBPACK_IMPORTED_MODULE_4__.initializeFolders)();
(0,_features_scheduled__WEBPACK_IMPORTED_MODULE_6__.initializeScheduled)();
(0,_features_snoozed__WEBPACK_IMPORTED_MODULE_5__.initializeSnoozed)();
(0,_features_done__WEBPACK_IMPORTED_MODULE_15__.initializeDone)();

// Target node to observe
const targetNode = document.body;

// Options for the observer (which mutations to observe)
const config = { childList: true, subtree: true };

// Callback function to execute when mutations are observed
const callback = function (mutationsList, observer) {
  for (const mutation of mutationsList) {
    if (mutation.type === "childList") {
      if (
        (0,_utils_domHelpers__WEBPACK_IMPORTED_MODULE_1__.getElementByXpath)(
          `//*[@id="app"]/div/div[2]/div[3]/header/header/div/div/h1`
        )
      ) {
        observer.disconnect();
        initializeWhatsApp(); // Dispatch event when WhatsApp is loaded

        (0,_observers_chatOnHoverObserver__WEBPACK_IMPORTED_MODULE_7__.chatOnHoverObserver)();
        (0,_whatsappStore_archiveChat__WEBPACK_IMPORTED_MODULE_8__.archiveChatListener)();
        (0,_whatsappStore_unarchiveChat__WEBPACK_IMPORTED_MODULE_9__.unarchiveChatListener)();
        (0,_whatsappStore_openDrawerLeft__WEBPACK_IMPORTED_MODULE_11__.openDrawerLeftListener)();
        (0,_whatsappStore_getChatDetails__WEBPACK_IMPORTED_MODULE_12__.getChatDetailsListener)();
        (0,_whatsappStore_markChatDone__WEBPACK_IMPORTED_MODULE_10__.markChatDoneListener)();
        (0,_whatsappStore_openContextMenu__WEBPACK_IMPORTED_MODULE_13__.openContextMenuListener)();
        (0,_whatsappStore_getChatFiberFromDOM__WEBPACK_IMPORTED_MODULE_14__.getChatFiberFromDOMListener)();

        (0,_utils_enhanceUi__WEBPACK_IMPORTED_MODULE_2__.removeWhatsAppSpam)();
        (0,_utils_enhanceUi__WEBPACK_IMPORTED_MODULE_2__.addStartupMessage)();
        (0,_whatsappStore_customToasts__WEBPACK_IMPORTED_MODULE_16__.customToasts)();
        (0,_whatsappStore_chatEventEmitter__WEBPACK_IMPORTED_MODULE_17__.chatEventEmitter)();

        break;
      }
    }
  }
};

// Create an observer instance linked to the callback function
const observer = new MutationObserver(callback);

// Start observing the target node for configured mutations
observer.observe(targetNode, config);

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,